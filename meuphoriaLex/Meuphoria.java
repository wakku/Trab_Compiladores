/* Generated By:JavaCC: Do not edit this line. Meuphoria.java */
/* MeuPhoria Parser */
class Meuphoria implements MeuphoriaConstants {

    private static int errors = 0;
    private static boolean checkDeclaration = false;
    private static int _return = 0;
    private static Token call = null;
    private static java.util.ArrayList<Type> _return_param = null; //new java.util.ArrayList<Type>();

// Processa o código e gera a tabela de tokens
    public void processa() throws ParseException, TokenMgrError {
        Token t;
        String nomeToken;
        do {
// Pega o próximo token gerado pelo Léxico.
            t = getNextToken();
            if(t.kind == IDENTIFIER) {
// Se tamanho for maior que 30, váriavel é invalida. Gera um erro.
                if(t.image.length() > 30)
                    throw new TokenMgrError();
            }
// Pega o proximo token do tipo t.kind
            nomeToken = tokenImage[t.kind];
// Seta a localização do token
            String location = "@(" + t.beginLine + ", " + t.beginColumn + ")";
// Imprime as informações do token. Se for EOF não imprime image, pois ela não existe.
            if(t.kind == EOL)
                System.out.println(String.format("%-15s %-20s <EOL>", location, nomeToken));
            else
                System.out.println(String.format("%-15s %-20s %s", location, nomeToken, t.image));
        } while (!(nomeToken.equals("<EOF>"))); // Termina o loop se EOF
        System.out.println(String.format("%s", t.image));
    }

/** Main entry point. */
public static void main(String args[]) {
    try
    {
        java.io.InputStream tmp = System.in;

        java.io.InputStreamReader is = new java.io.InputStreamReader(tmp);
        java.lang.StringBuilder sb=new java.lang.StringBuilder();
        java.io.BufferedReader br = new java.io.BufferedReader(is);
        try {
            String read = br.readLine();

            while(read != null) {
                sb.append(read + "\u005cn");
                read =br.readLine();

            }
        }
        catch(java.io.IOException e) {
            System.out.println(e.getMessage());
        }

        // Define o analisador sintatico de acordo com a entrada do sistema
        Meuphoria analisadorSintatico = new Meuphoria(new java.io.StringReader(sb.toString()));

        analisadorSintatico.variables_declaration();

        checkDeclaration = true;
        _return = 0;
        _return_param = null;
        analisadorSintatico = new Meuphoria(new java.io.StringReader(sb.toString()));

        analisadorSintatico.javacc_input();
    }
    catch(ParseException e)
    {
        System.out.println(e.getMessage());
        System.out.println("Ocorreu uma excecao!");
    }
    catch(TokenMgrError e)
    {
        System.out.println(e.getMessage());
        System.out.println("Existem erros no codigo! Por favor, verifica-los.");
    }
}

/*******************************************************
MEUPHORIA GRAMMAR
*******************************************************/
  final public void printError(Token t, String msg) throws ParseException {
    errors++;
    System.out.println("[" + t.beginLine + ", " + t.beginColumn + "] " + msg);
  }

  final public void variables_declaration() throws ParseException {
    SemanticRoutines rSem;
        rSem = new SemanticRoutines();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2)) {
        stmblk(rSem);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXPORT:
        case GLOBAL:
        case PUBLIC:
        case ENUM:
        case OVERRIDE:
        case FUNCTION:
        case PROCEDURE:
        case TYPE:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPORT:
          case GLOBAL:
          case PUBLIC:
          case OVERRIDE:
            ScopeModifier();
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            VarDeclare(rSem);
            break;
          case FUNCTION:
          case PROCEDURE:
          case TYPE:
            ProcDeclare(rSem);
            break;
          case ENUM:
            EnumDeclare(rSem);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
  }

  final public void VarDeclare(SemanticRoutines rSem) throws ParseException {
        Type type;
    type = DataType(rSem);
    IdentList(rSem, type);
  }

  final public void IdentList(SemanticRoutines rSem, Type type) throws ParseException {
    Ident(rSem, type);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      Ident(rSem, type);
    }
  }

  final public void Ident(SemanticRoutines rSem, Type type) throws ParseException {
                          Token t;
    t = jj_consume_token(IDENTIFIER);
                              if(!checkDeclaration) {
                                  if (rSem.searchLevel(t.toString()) == null) {
                                    Symbol s = new Symbol(t.toString(),rSem.getLevel(),Category.Variable);
                                    s.setType(type);
                                    rSem.insert(s);
                                  }
                                  else {
                                    //Throw semantic exception
                                    printError(t, "Erro Semantico: Variavel '" + t.toString() + "' ja declarada.");
                                  }
                              }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      Expression(rSem);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

      /* NAO SEI SE O ENUM EH ASSIM ????????? */
  final public void EnumDeclare(SemanticRoutines rSem) throws ParseException {
        Type type;
    jj_consume_token(ENUM);
          type = Type.Enum;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      EnumVal(rSem, type);
      break;
    case TYPE:
      EnumType(rSem, type);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EnumVal(SemanticRoutines rSem, Type type) throws ParseException {
    IdentList(rSem, type);
  }

  final public void EnumType(SemanticRoutines rSem, Type type) throws ParseException {
    jj_consume_token(TYPE);
    IdentList(rSem, type);
    jj_consume_token(END);
    jj_consume_token(TYPE);
  }

  final public void ProcDeclare(SemanticRoutines rSem) throws ParseException {
        Token t, t2;
        Symbol proc = null;
        java.util.ArrayList<Symbol> par = new java.util.ArrayList<Symbol>();
        java.util.ArrayList<Type> return_parameters = null;//new java.util.ArrayList<Type>();
        int flag = 0;
        int a = 0;
        int tmp = 0;
          if(_return_param!= null && !_return_param.isEmpty()) {
              return_parameters = new java.util.ArrayList<Type>();
              for(int count=0; count<_return_param.size(); count++)
                return_parameters.add(_return_param.get(count));

            _return_param.clear();
          }
          if(_return > 0) {
            tmp = _return;
            _return = 0;
          }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      t2 = jj_consume_token(PROCEDURE);
      break;
    case TYPE:
      t2 = jj_consume_token(TYPE);
      break;
    case FUNCTION:
      t2 = jj_consume_token(FUNCTION);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
          if(!checkDeclaration) {
              if ( rSem.searchLevel(t.toString()) == null ) {
                proc = new Symbol(t.toString(), rSem.getLevel(), Category.Procedure);
                rSem.insert(proc);
                rSem.newLevel();
                flag = 1;
              }
              else {
                //Throw semantic exception
                printError(t, "Erro Semantico: Procedimento '" + t.toString() + "' ja declarado.");
              }
          }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      par = ParamList(rSem);
                if(proc != null)
                  proc.setParameters(par);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      stmblk(rSem);
    }
    jj_consume_token(END);
    ProcedureType(rSem, t2);
          if(proc != null) {
            proc.setReturnParameters(_return);
            proc.setReturnTypes(_return_param);
          }
          _return_param.clear();
          if(return_parameters != null) {
            for(int count=0; count<return_parameters.size(); count++)
              _return_param.add(return_parameters.get(count));

            return_parameters = null;
          }

          if(_return > 0) {
            if(t2.toString().equals("procedure") && !checkDeclaration)
              printError(t2, "Erro Semantico: Procedure nao pode retornar nenhum valor.");
            _return = tmp;
          }
          else if((t2.toString().equals("function") || t2.toString().equals("type") ) && !checkDeclaration)
            printError(t2, "Erro Semantico: " + t2.toString() + " nao retorna nenhum valor.");

          if (flag == 1) {

              if(proc!= null) {
                proc.setNPar(par.size());

                for (int i = 0; i < par.size(); i++)
                  rSem.insert(par.get(i));
              }
          }
          if(!checkDeclaration) {
            rSem.removeLastLevel();
          }
  }

  final public void ProcedureType(SemanticRoutines rSem, Token procType) throws ParseException {
              Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
      break;
    case FUNCTION:
      t = jj_consume_token(FUNCTION);
      break;
    case TYPE:
      t = jj_consume_token(TYPE);
                if(!t.toString().equals(procType.toString()) && !checkDeclaration)
                  printError(t, "Erro Sint\u00e1tico: Esperado fechamento de '" + procType.toString());
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public java.util.ArrayList<Symbol> ParamList(SemanticRoutines rSem) throws ParseException {
        Symbol s;
        java.util.ArrayList<Symbol> parList = new java.util.ArrayList<Symbol>();
    s = Parameter(rSem);
          parList.add(s);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      s = Parameter(rSem);
              parList.add(s);
    }
          {if (true) return parList;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol Parameter(SemanticRoutines rSem) throws ParseException {
              Type type;
              Token t;
    type = DataType(rSem);
    t = jj_consume_token(IDENTIFIER);
                if (rSem.searchLevel(t.toString()) == null) {
                  Symbol s = new Symbol(t.toString(), rSem.getLevel(), Category.Parameter);
                  s.setType(type);
                  rSem.insert(s);
                  {if (true) return s;}
                }
                else {
                  if(!checkDeclaration)
                      printError(t, "Erro Semantico: Par\u00e2metro '" + t.toString() + "' ja declarado.");
                  {if (true) return null;}
                }
    throw new Error("Missing return statement in function");
  }

  final public void javacc_input() throws ParseException {
    Token t;
    SemanticRoutines rSem;
        rSem = new SemanticRoutines();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      if (jj_2_2(2)) {
        stmblk(rSem);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXPORT:
        case GLOBAL:
        case PUBLIC:
        case ENUM:
        case OVERRIDE:
        case FUNCTION:
        case PROCEDURE:
        case TYPE:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPORT:
          case GLOBAL:
          case PUBLIC:
          case OVERRIDE:
            ScopeModifier();
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            VarDeclare(rSem);
            break;
          case ENUM:
            EnumDeclare(rSem);
            break;
          case FUNCTION:
          case PROCEDURE:
          case TYPE:
            ProcDeclare(rSem);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
        if ( errors != 0 ) {
          System.out.println("An\u00e1lise encontrou " + errors + " erro(s).");
        }
        else {
          System.out.println("An\u00e1lises l\u00e9xica, sint\u00e1tica e sem\u00e2ntica conclu\u00eddas com sucesso!");
        }
  }

  final public int stmblk(SemanticRoutines rSem) throws ParseException {
        int a = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case FALLTHRU:
    case GOTO:
    case RETRY:
    case WHILE:
    case BREAK:
    case CONTINUE:
    case ENUM:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case EXIT:
    case FUNCTION:
    case IFDEF:
    case PROCEDURE:
    case TYPE:
    case FOR:
    case PRINT:
    case IDENTIFIER:
      a = statement(rSem);
                                    {if (true) return a;}
      break;
    case EOL:
      jj_consume_token(EOL);
                    {if (true) return a;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int statement(SemanticRoutines rSem) throws ParseException {
        Token t;
        int a = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALLTHRU:
    case RETRY:
    case BREAK:
    case CONTINUE:
    case EXIT:
      Flow(rSem);
                         {if (true) return a;}
      break;
    case GOTO:
    case WHILE:
    case LOOP:
    case FOR:
      Loop(rSem);
                         {if (true) return a;}
      break;
    case SWITCH:
    case IF:
    case IFDEF:
      Branch(rSem);
                           {if (true) return a;}
      break;
    case RETURN:
      a = Return(rSem);
                                  {if (true) return a;}
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_3(2)) {
        t = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case COMMA:
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case CONCAT:
        case EQUAL:
          Assignment(rSem,t);
          break;
        case LPAREN:
          Call(rSem,t);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                   {if (true) return a;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXPORT:
        case GLOBAL:
        case PUBLIC:
        case ENUM:
        case OVERRIDE:
        case FUNCTION:
        case PROCEDURE:
        case TYPE:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPORT:
          case GLOBAL:
          case PUBLIC:
          case OVERRIDE:
            ScopeModifier();
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            VarDeclare(rSem);
            break;
          case FUNCTION:
          case PROCEDURE:
          case TYPE:
            ProcDeclare(rSem);
            break;
          case ENUM:
            EnumDeclare(rSem);
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                                              {if (true) return a;}
          break;
        case PRINT:
          Print(rSem);
                          {if (true) return a;}
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Print(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(PRINT);
    Expression(rSem);
  }

  final public void Flow(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      break;
    case RETRY:
      jj_consume_token(RETRY);
      break;
    case EXIT:
      jj_consume_token(EXIT);
      break;
    case FALLTHRU:
      jj_consume_token(FALLTHRU);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRINGLIT:
      jj_consume_token(STRINGLIT);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void Loop(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
    case LOOP:
    case FOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        ForStatement(rSem);
        break;
      case WHILE:
        WhileStatement(rSem);
        break;
      case LOOP:
        LoopStatement(rSem);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if(!checkDeclaration) {
        rSem.removeLastLevel();
      }
      break;
    case GOTO:
      jj_consume_token(GOTO);
      jj_consume_token(LABELSTMT);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForStatement(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(FOR);
    ForIDX(rSem);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABELSTMT:
      jj_consume_token(LABELSTMT);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(DO);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_6;
      }
      stmblk(rSem);
    }
    jj_consume_token(END);
    jj_consume_token(FOR);
  }

  final public void ForIDX(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUAL);
    Expression(rSem);
    jj_consume_token(TO);
    Expression(rSem);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      Expression(rSem);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void WhileStatement(SemanticRoutines rSem) throws ParseException {
        Token t;
        java.util.ArrayList<Type> type;
    t = jj_consume_token(WHILE);
    type = Expression(rSem);
          if(type.size() != 1 && !checkDeclaration)
            printError(t, "Erro Semantico: A express\u00e3o do " + t.toString() + " retorna nenhum ou mais resultados." );
          else if(type.get(0) != Type.Boolean && !checkDeclaration)
            printError(t, "Erro Semantico: A condi\u00e7\u00e3o do " + t.toString() + " deve ser do tipo boolean" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHENTRY:
      jj_consume_token(WITHENTRY);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABELSTMT:
      jj_consume_token(LABELSTMT);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(DO);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_7;
      }
      stmblk(rSem);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTRY:
      EntryStatement(rSem);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(WHILE);
  }

  final public void LoopStatement(SemanticRoutines rSem) throws ParseException {
        java.util.ArrayList<Type> type;
        Token t;
    jj_consume_token(LOOP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHENTRY:
      jj_consume_token(WITHENTRY);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABELSTMT:
      jj_consume_token(LABELSTMT);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(DO);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_8;
      }
      stmblk(rSem);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTRY:
      EntryStatement(rSem);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    t = jj_consume_token(UNTIL);
    type = Expression(rSem);
          if(type.size() != 1 && !checkDeclaration)
            printError(t, "Erro Semantico: A express\u00e3o do " + t.toString() + " retorna nenhum ou mais resultados." );
          else if(type.get(0) != Type.Boolean && !checkDeclaration)
            printError(t, "Erro Semantico: A condi\u00e7\u00e3o do " + t.toString() + " deve ser do tipo boolean" );
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_9;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(END);
    jj_consume_token(LOOP);
  }

  final public void EntryStatement(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(ENTRY);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_10;
      }
      stmblk(rSem);
    }
  }

  final public void Branch(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfStatement(rSem);
      break;
    case SWITCH:
      SwitchStatement(rSem);
      break;
    case IFDEF:
      IfDefStatement(rSem);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement(SemanticRoutines rSem) throws ParseException {
    IfTest(rSem);
      if(!checkDeclaration) {
        rSem.removeLastLevel();
      }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSIF:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_11;
      }
      ElsifStatement(rSem);
        if(!checkDeclaration) {
          rSem.removeLastLevel();
        }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      ElseStatement(rSem);
        if(!checkDeclaration) {
          rSem.removeLastLevel();
        }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
  }

  final public void IfTest(SemanticRoutines rSem) throws ParseException {
        Token t;
        java.util.ArrayList<Type> type;
    t = jj_consume_token(IF);
    type = Expression(rSem);
          if(type.size() != 1 && !checkDeclaration)
            printError(t, "Erro Semantico: A express\u00e3o do " + t.toString() + " retorna nenhum ou mais resultados." );
          else if(type.get(0) != Type.Boolean && !checkDeclaration)
            printError(t, "Erro Semantico: A condi\u00e7\u00e3o do " + t.toString() + " deve ser do tipo boolean" );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABELSTMT:
      jj_consume_token(LABELSTMT);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_12;
      }
      stmblk(rSem);
    }
  }

  final public void ElsifStatement(SemanticRoutines rSem) throws ParseException {
        Token t;
        java.util.ArrayList<Type> type;
    t = jj_consume_token(ELSIF);
    type = Expression(rSem);
          if(type.size() != 1 && !checkDeclaration)
            printError(t, "Erro Semantico: A express\u00e3o do " + t.toString() + " retorna nenhum ou mais resultados." );
          else if(type.get(0) != Type.Boolean && !checkDeclaration)
            printError(t, "Erro Semantico: A condi\u00e7\u00e3o do " + t.toString() + " deve ser do tipo boolean" );
    jj_consume_token(THEN);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      stmblk(rSem);
    }
  }

  final public void ElseStatement(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(ELSE);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_14;
      }
      stmblk(rSem);
    }
  }

  final public void IfDefStatement(SemanticRoutines rSem) throws ParseException {
    IfDefTest(rSem);
      if(!checkDeclaration) {
        rSem.removeLastLevel();
      }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSEIFDEF:
      ElsDefIfStatement(rSem);
      jj_consume_token(LABELSTMT);
        if(!checkDeclaration) {
          rSem.removeLastLevel();
        }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSEDEF:
      ElsDefStatement(rSem);
        if(!checkDeclaration) {
          rSem.removeLastLevel();
        }
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    jj_consume_token(ENDDEFIF);
  }

  final public void IfDefTest(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(IFDEF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_OP:
      jj_consume_token(NOT_OP);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_OR:
    case SC_AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        jj_consume_token(SC_AND);
        break;
      case SC_OR:
        jj_consume_token(SC_OR);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT_OP:
        jj_consume_token(NOT_OP);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_15;
      }
      stmblk(rSem);
    }
  }

  final public void ElsDefIfStatement(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(ELSEIFDEF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_OP:
      jj_consume_token(NOT_OP);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_OR:
    case SC_AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        jj_consume_token(SC_AND);
        break;
      case SC_OR:
        jj_consume_token(SC_OR);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT_OP:
        jj_consume_token(NOT_OP);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_16;
      }
      stmblk(rSem);
    }
  }

  final public void ElsDefStatement(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(ELSEDEF);
          if(!checkDeclaration) {
            rSem.newLevel();
          }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_17;
      }
      stmblk(rSem);
    }
  }

  final public void SwitchStatement(SemanticRoutines rSem) throws ParseException {
    SwitchTest(rSem);
    CaseStatement(rSem);
    if(!checkDeclaration) {
      rSem.removeLastLevel();
    }
    label_18:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_18;
      }
      CaseStatement(rSem);
        if(!checkDeclaration) {
          rSem.removeLastLevel();
        }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      if(!checkDeclaration) {
        rSem.newLevel();
      }
      jj_consume_token(ELSE);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case EXPORT:
        case GLOBAL:
        case PUBLIC:
        case SWITCH:
        case FALLTHRU:
        case GOTO:
        case RETRY:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case ENUM:
        case IF:
        case LOOP:
        case OVERRIDE:
        case RETURN:
        case EXIT:
        case FUNCTION:
        case IFDEF:
        case PROCEDURE:
        case TYPE:
        case FOR:
        case PRINT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_19;
        }
        stmblk(rSem);
      }
      if(!checkDeclaration) {
        rSem.removeLastLevel();
      }
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(SWITCH);
  }

  final public void SwitchTest(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(SWITCH);
    Expression(rSem);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
    case WITHOUT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        jj_consume_token(WITH);
        break;
      case WITHOUT:
        jj_consume_token(WITHOUT);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FALLTHRU);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABELSTMT:
      jj_consume_token(LABELSTMT);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
  }

  final public void CaseStatement(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(CASE);
    CaseList(rSem);
    jj_consume_token(THEN);
    if(!checkDeclaration) {
      rSem.newLevel();
    }
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case PRINT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_20;
      }
      stmblk(rSem);
    }
  }

  final public void CaseList(SemanticRoutines rSem) throws ParseException {
    Expression(rSem);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      Expression(rSem);
    }
  }

// MUDAR AINDA ??????????????
  final public void Assignment(SemanticRoutines rSem, Token identifier) throws ParseException {
  Symbol var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
    case COMMA:
    case EQUAL:
      var = rSem.searchLevel(identifier.toString());
      if(var == null && !checkDeclaration)
        printError(identifier, "Erro Semantico: Vari\u00e1vel " + identifier.toString() + " n\u00e3o declarada.");
      AssignmentMulti(rSem, identifier);
      break;
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case CONCAT:
      AssignmentWihOp(rSem, identifier);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignmentMulti(SemanticRoutines rSem, Token identifier) throws ParseException {
        Token t;
        Type tp;
        Symbol s;
        //Type tp1 = null, tp2 = null;
        java.util.ArrayList<Type> tp1 = new java.util.ArrayList<Type>();
        java.util.ArrayList<Type> tp2 = new java.util.ArrayList<Type>();
        java.util.ArrayList<Type> tmp = new java.util.ArrayList<Type>();

        int var = 1, exp = 0;
            call = null;
            if(!checkDeclaration) {
              s = rSem.searchLevel(identifier.toString());
              tp = s.getType();
              tp1.add(tp);
            }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      Variable(rSem, identifier);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        Variable(rSem, identifier);
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
              var++;
              s = rSem.searchLevel(t.toString());
              tp = s.getType();
              tp1.add(tp);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    t = jj_consume_token(EQUAL);
    // teria que pegar ou retornar o token da expressão para saber se é ou não uma função.
              tmp = Expression(rSem);
            if(!tmp.isEmpty() && !checkDeclaration) {
              for(int i = 0; i < tmp.size(); i++)
                tp2.add(tmp.get(i));
              tmp.clear();
            }

            if(call != null) {
              Symbol c = rSem.search(call.toString());
              if(c != null && c.getCategory() == Category.Procedure) {
                exp += c.getReturnParameters();
              }
              else
                exp = 1;
            }
            else
              exp = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      tmp = Expression(rSem);
              if(!tmp.isEmpty() && !checkDeclaration) {
                for(int i = 0; i < tmp.size(); i++)
                  tp2.add(tmp.get(i));
                tmp.clear();
              }

              if(call != null) {
                Symbol c = rSem.search(call.toString());
                if(c != null && c.getCategory() == Category.Procedure) {
                  exp += c.getReturnParameters();
                }
                else
                  exp++;
              }
              else
                exp++;
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
            if(var != exp && !checkDeclaration) {
              printError(t, "Erro Semantico: Quantidade diferente de parametros na atribuicao de variaveis.");
            }
            else if(!checkDeclaration){
              // check if the types are the same ????????
              for(int i = 0; i < tp1.size(); i++) {
                if(tp1.get(i) != tp2.get(i) && !rSem.checkAtom(tp1.get(i), tp2.get(i)) ) {
                  printError(t, "Erro Semantico: Tipos diferentes na atribui\u00e7\u00e3o de vari\u00e1veis. " + tp1.get(i).toString() + " e " + tp2.get(i).toString());
                }
              }
            }
  }

  final public void AssignmentWihOp(SemanticRoutines rSem, Token identifier) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case CONCAT:
      jj_consume_token(CONCAT);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EQUAL);
    Expression(rSem);

  }

  final public int Return(SemanticRoutines rSem) throws ParseException {
  Token t;
  java.util.ArrayList<Type> type = null;
  int i = 1;
  java.util.ArrayList<Type> tmp = new java.util.ArrayList<Type>();
    t = jj_consume_token(RETURN);
    Expression(rSem);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      type = Expression(rSem);
        i++;
        // adicionar na lista 
        for(int j = 0; j < type.size(); j++)
            tmp.add(type.get(j));
    }
      if(_return > 0 && _return != i && !checkDeclaration) {
        printError(t, "Erro Semantico: Quantidade de parametros de retorno diferentes.");
      }
      else if(_return == 0) {
        _return = i;

        if(_return_param == null)
          _return_param = new java.util.ArrayList<Type>();

        for(int count=0; count<tmp.size(); count++)
            _return_param.add(tmp.get(count));
      }
      else if(!checkDeclaration){
        for(int count=0; count<tmp.size(); count++) {
          if(tmp.get(count) != _return_param.get(count))
            printError(t, "Erro Semantico: Tipos de retornos diferentes.");
        }
      }

      {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  final public void Call(SemanticRoutines rSem, Token t) throws ParseException {
  Symbol proc = null;
  java.util.ArrayList<Type> par = new java.util.ArrayList<Type>();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:
      par = ArgList(rSem);
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
            if(checkDeclaration) {
                  proc = rSem.search(t.toString());

                  if (proc != null) {

                    int analisePar = proc.verifyParameters(par);

                    if (analisePar == 1 ) {
                      printError(t, "Erro semantico: Procedimento '" + t + "' n\u00e3o declarado.");
                    } else if (analisePar == 2)
                      printError(t, "Erro semantico: Procedimento '" + t.toString() + "' com numero de parametros invalidos.");
                    else if (analisePar == 3)
                      printError(t, "Erro semantico: Procedimento '" + t.toString() + "' com tipo de parametros invalidos.");
                    else {
                      //DO SOMETHING
                      // está correto
                    }

                  }
                  else {
                    printError(t, "Erro semantico: Procedimento '" + t.toString() + "' n\u00e3o declarado.");
                  }
            }
  }

  final public java.util.ArrayList<Type> ArgList(SemanticRoutines rSem) throws ParseException {
        java.util.ArrayList<Type> type;
        java.util.ArrayList<Type> parList = new java.util.ArrayList<Type>();
    type = Expression(rSem);
          for(int i = 0; i < type.size(); i++)
            parList.add(type.get(i));
          //parList.add(type);

    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      type = Expression(rSem);
              for(int i = 0; i < type.size(); i++)
                parList.add(type.get(i));
              //parList.add(type);

    }
          {if (true) return parList;}
    throw new Error("Missing return statement in function");
  }

/************************************************************
SEQUENCIA
************************************************************/
  final public void Sequence(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case END_SYMBOL:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case BIN_NUMBER:
    case OCT_NUMBER:
    case DEC_NUMBER:
    case HEX_NUMBER:
    case STRINGLIT:
      if (jj_2_6(2)) {
        jj_consume_token(END_SYMBOL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case IDENTIFIER:
        case INTEGER:
        case FLOAT:
        case EXP:
        case BIN_NUMBER:
        case OCT_NUMBER:
        case DEC_NUMBER:
        case HEX_NUMBER:
        case STRINGLIT:
          Object(rSem);
          label_24:
          while (true) {
            if (jj_2_5(2)) {
              ;
            } else {
              break label_24;
            }
            jj_consume_token(COMMA);
            Object(rSem);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            jj_consume_token(END_SYMBOL);
            break;
          default:
            jj_la1[77] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void Object(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Sequence(rSem);
      break;
    case INTEGER:
    case FLOAT:
    case EXP:
      Atom(rSem);
      break;
    case BIN_NUMBER:
      jj_consume_token(BIN_NUMBER);
      break;
    case OCT_NUMBER:
      jj_consume_token(OCT_NUMBER);
      break;
    case DEC_NUMBER:
      jj_consume_token(DEC_NUMBER);
      break;
    case HEX_NUMBER:
      jj_consume_token(HEX_NUMBER);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case STRINGLIT:
      jj_consume_token(STRINGLIT);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/************************************************************
EXPRESSÕES
************************************************************/
  final public java.util.ArrayList<Type> Expression(SemanticRoutines rSem) throws ParseException {
  java.util.ArrayList<Type> tp = new java.util.ArrayList<Type>();
  java.util.ArrayList<Type> tp2 = new java.util.ArrayList<Type>();
  java.util.ArrayList<Type> type = new java.util.ArrayList<Type>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case NOT_OP:
      case PLUS:
      case MINUS:
      case END_SYMBOL:
      case IDENTIFIER:
      case INTEGER:
      case FLOAT:
      case EXP:
      case STRINGLIT:
        if (jj_2_8(2)) {
          jj_consume_token(END_SYMBOL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
          case LBRACE:
          case NOT_OP:
          case PLUS:
          case MINUS:
          case IDENTIFIER:
          case INTEGER:
          case FLOAT:
          case EXP:
          case STRINGLIT:
            tp = Expression(rSem);
            label_25:
            while (true) {
              if (jj_2_7(2)) {
                ;
              } else {
                break label_25;
              }
              jj_consume_token(COMMA);
              tp = Expression(rSem);
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              jj_consume_token(END_SYMBOL);
              break;
            default:
              jj_la1[81] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[82] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
        //System.out.println(tp2);
        type.add(Type.Sequence);
        {if (true) return type;}
      break;
    case LPAREN:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:
      type = Expression00(rSem);
        {if (true) return type;}
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<Type> Expression00(SemanticRoutines rSem) throws ParseException {
  Token t = null;
  java.util.ArrayList<Type> tp1, tp2, tmp = new java.util.ArrayList<Type>();
    tp1 = Expression01(rSem);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_OR:
    case SC_AND:
    case XOR_OP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        t = jj_consume_token(SC_AND);
        break;
      case SC_OR:
        t = jj_consume_token(SC_OR);
        break;
      case XOR_OP:
        t = jj_consume_token(XOR_OP);
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tp2 = Expression01(rSem);
        if(t != null) {
          // check if the expressions are sequences with different sizes ???????
          // if tp1 or tp2 sizes are more than one, then they are sequences
          if((tp1.get(0) == Type.Sequence && tp2.get(0) == Type.Sequence) && tp1.size()!= tp2.size())
              printError(t, "Erro Semantico: Sequencias de tamanhos diferentes.");
          tmp.add(Type.Boolean);
          {if (true) return tmp;}
        }
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
      //if(t != null) {
        // check if the expressions are sequences with different sizes ???????
        //return Type.Boolean;
      //}
      //else
        {if (true) return tp1;}
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<Type> Expression01(SemanticRoutines rSem) throws ParseException {
  Token t = null;
  java.util.ArrayList<Type> tp1, tp2, tmp = new java.util.ArrayList<Type>();
    tp1 = Expression02(rSem);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
      case EQUAL:
      case NE:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case EQUAL:
        t = jj_consume_token(EQUAL);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tp2 = Expression02(rSem);
        if(t != null) {
            // check if the expressions are sequences with different sizes ???????
            // if tp1 or tp2 sizes are more than one, then they are sequences
            if((tp1.get(0) == Type.Sequence && tp2.get(0) == Type.Sequence) && tp1.size()!= tp2.size())
                printError(t, "Erro Semantico: Sequencias de tamanhos diferentes.");
            tmp.add(Type.Boolean);
            {if (true) return tmp;}
          }
    }
        {if (true) return tp1;}
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<Type> Expression02(SemanticRoutines rSem) throws ParseException {
  Token t = null;
  java.util.ArrayList<Type> tp1, tp2, tmp=new java.util.ArrayList<Type>();
    tp1 = Expression03(rSem);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_27;
      }
      t = jj_consume_token(CONCAT);
      tp2 = Expression03(rSem);
        if(t != null) {
            // tudo se concatena e vira sequencia (lembrar que sequencia é o Arr > 1)
            // lembrar de juntar arraylist tp1 e tp2(adicionar tp2 em tp1)
            tmp.add(Type.Sequence);
            for(int count=0; count<tp1.size(); count++)
              tmp.add(tp1.get(count));
            for(int count=0; count<tp2.size(); count++)
              tmp.add(tp2.get(count));

            {if (true) return tmp;}
          }
    }
        {if (true) return tp1;}
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<Type> Expression03(SemanticRoutines rSem) throws ParseException {
  Token t = null;
  java.util.ArrayList<Type> tp1, tp2, tmp=new java.util.ArrayList<Type>();
  int value1=0, value2=0;
    tp1 = Expression04(rSem);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tp2 = Expression04(rSem);
        if(t != null) {
            // check if the expressions are sequences with different sizes ???????
            // if tp1 or tp2 sizes are more than one, then they are sequences
            if((tp1.get(0) == Type.Sequence && tp2.get(0) == Type.Sequence) && tp1.size()!= tp2.size())
                printError(t, "Erro Semantico: Sequencias de tamanhos diferentes.");

            value1=0;
            value2=0;

            if(tp1.get(value1) == tp2.get(value2)) tmp.add(tp1.get(value1));
            else if(tp1.get(value1) == Type.Sequence || tp2.get(value2) == Type.Sequence ) tmp.add(Type.Sequence);
            else if(tp1.get(value1) == Type.Object || tp2.get(value2) == Type.Object ) tmp.add(Type.Object);
            else if(tp1.get(value1) == Type.Atom || tp2.get(value2) == Type.Atom ) tmp.add(Type.Atom);
            else if(tp1.get(value1) == Type.Int || tp2.get(value2) == Type.Int ) tmp.add(Type.Int);
            else printError(t, "Erro Semantico: Tipo invalido.");

            {if (true) return tmp;}

          }
    }
      // check the matching types ?????????????
      {if (true) return tp1;}
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<Type> Expression04(SemanticRoutines rSem) throws ParseException {
  Token t = null;
  java.util.ArrayList<Type> tp1, tp2, tmp=new java.util.ArrayList<Type>();
  int value1=0, value2=0;
    tp1 = Expression05(rSem);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tp2 = Expression05(rSem);
        if(t != null) {
            // check if the expressions are sequences with different sizes ???????
            // if tp1 or tp2 sizes are more than one, then they are sequences
            if((tp1.get(0) == Type.Sequence && tp2.get(0) == Type.Sequence) && tp1.size()!= tp2.size())
                printError(t, "Erro Semantico: Sequencias de tamanhos diferentes.");

            value1=0;
            value2=0;

            if(tp1.get(value1) == tp2.get(value2)) tmp.add(tp1.get(value1));
            else if(tp1.get(value1) == Type.Sequence || tp2.get(value2) == Type.Sequence ) tmp.add(Type.Sequence);
            else if(tp1.get(value1) == Type.Object || tp2.get(value2) == Type.Object ) tmp.add(Type.Object);
            else if(tp1.get(value1) == Type.Atom || tp2.get(value2) == Type.Atom ) tmp.add(Type.Atom);
            else if(tp1.get(value1) == Type.Int || tp2.get(value2) == Type.Int ) tmp.add(Type.Int);
            else printError(t, "Erro Semantico: Tipo invalido.");

            {if (true) return tmp;}

          }
    }
      // check the matching types ?????????????
      {if (true) return tp1;}
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<Type> Expression05(SemanticRoutines rSem) throws ParseException {
  Token t = null;
  java.util.ArrayList<Type> tp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_OP:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case NOT_OP:
        t = jj_consume_token(NOT_OP);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    tp = Expression06(rSem);
      {if (true) return tp;}
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<Type> Expression06(SemanticRoutines rSem) throws ParseException {
  Token t;
  Symbol var = null;
  java.util.ArrayList<Type> tp = new java.util.ArrayList<Type>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case EXP:
      Atom(rSem);
                    tp.add(Type.Atom); {if (true) return tp;}
      break;
    case STRINGLIT:
      jj_consume_token(STRINGLIT);
                    tp.add(Type.Sequence); {if (true) return tp;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      tp = Expression(rSem);
      jj_consume_token(RPAREN);
                                                  {if (true) return tp;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          Call(rSem, t);
          break;
        case LBRACKET:
          Variable(rSem, t);
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
        // search the variable and return its type ?????? 
        call = t;
        // check if the variable is declared
        var = rSem.searchLevel(t.toString());
        Symbol var2 = rSem.search(t.toString());
        if(var == null) {
          if(!checkDeclaration)
            printError(t, "Erro Semantico: Vari\u00e1vel " + t.toString() + " n\u00e3o declarada.");
          tp.add(Type.NotDeclared);
          {if (true) return tp;}
        }
        else {
          if(var.getCategory() == Category.Procedure)
            {if (true) return var.getReturnTypes();}
          else {
            tp.add(var.getType());
            {if (true) return tp;}
          }
        }
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void Variable(SemanticRoutines rSem, Token t) throws ParseException {
    jj_consume_token(LBRACKET);
    Expression(rSem);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLICE:
      Slice(rSem, t);
      break;
    case RBRACKET:
      Subscripting(rSem, t);
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Slice(SemanticRoutines rSem, Token t) throws ParseException {
  Type type;
    jj_consume_token(SLICE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:
      Expression(rSem);
      break;
    case END_SYMBOL:
      jj_consume_token(END_SYMBOL);
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_30;
      }
      jj_consume_token(LBRACKET);
      Expression(rSem);
      jj_consume_token(SLICE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case NOT_OP:
      case PLUS:
      case MINUS:
      case IDENTIFIER:
      case INTEGER:
      case FLOAT:
      case EXP:
      case STRINGLIT:
        Expression(rSem);
        break;
      case END_SYMBOL:
        jj_consume_token(END_SYMBOL);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACKET);
    }

  }

  final public void Subscripting(SemanticRoutines rSem, Token t) throws ParseException {
    jj_consume_token(RBRACKET);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_31;
      }
      Index(rSem);
    }
  }

  final public void Index(SemanticRoutines rSem) throws ParseException {
    jj_consume_token(LBRACKET);
    Expression(rSem);
    jj_consume_token(RBRACKET);

  }

/*****************************************
DATA TYPE
*****************************************/
  final public void ScopeModifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBAL:
      jj_consume_token(GLOBAL);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Type DataType(SemanticRoutines rSem) throws ParseException {
  Token t;
  Type tp;
    t = jj_consume_token(IDENTIFIER);
      tp = null;
      if(t.toString().equals("atom"))
          tp = Type.Atom;
      else if(t.toString().equals("integer"))
          tp = Type.Int;
      else if(t.toString().equals("sequence"))
          tp = Type.Sequence;
      //else if(t.toString().equals("object"))
          //tp = Type.Object;
      else if(t.toString().equals("constant"))
          tp = Type.Constant;
      else if(t.toString().equals("boolean"))
          tp = Type.Boolean;
      else if(!checkDeclaration)
        printError(t, "Erro Semantico: Tipo " + t.toString() + " nao existe.");

      {if (true) return tp;}
    throw new Error("Missing return statement in function");
  }

  final public void Real(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case EXP:
      jj_consume_token(EXP);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Atom(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case FLOAT:
    case EXP:
      Real(rSem);
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_92() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(LOOP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) jj_scanpos = xsp;
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(STRINGLIT)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(END_SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(IFDEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(END_SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(LABELSTMT)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(90)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_94()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_32()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MeuphoriaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[107];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xdd636200,0x16000,0x40000000,0x40016000,0x0,0x0,0x0,0x0,0x0,0xdd636200,0x0,0x0,0xdd636200,0x16000,0x40000000,0x40016000,0xdd636200,0x0,0x16000,0x40000000,0x9d620000,0x40016000,0x0,0x19200000,0x0,0x4000000,0x4400000,0x0,0xdd636200,0x0,0x0,0x0,0xdd636200,0x100000,0x0,0x0,0xdd636200,0x100000,0x200,0xdd636200,0x80020000,0x0,0x80000,0x0,0xdd636200,0xdd636200,0xdd636200,0x0,0x20000000,0x0,0x0,0x0,0x0,0xdd636200,0x0,0x0,0x0,0x0,0xdd636200,0xdd636200,0xdd636200,0x80000,0x0,0x0,0x0,0x200,0xdd636200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x30f87,0x2,0xd00,0xd02,0x2000000,0x0,0x800,0xd00,0x0,0x30f87,0xd00,0x2000000,0x30f87,0x2,0xd00,0xd02,0x30f87,0x2440000,0x2,0xd00,0x10285,0x20d02,0x0,0x80,0x0,0x10001,0x10001,0x0,0x30f87,0x20,0x0,0x0,0x30f87,0x0,0x0,0x0,0x30f87,0x0,0x0,0x30f87,0x200,0x40,0x0,0x0,0x30f87,0x30f87,0x30f87,0x8000,0x0,0x0,0x0,0x0,0x0,0x30f87,0x0,0x0,0x0,0x0,0x30f87,0x30f87,0x30f87,0x0,0x1010,0x1010,0x0,0x0,0x30f87,0x2000000,0x2400000,0x400000,0x400000,0x2000000,0x2000000,0x0,0x2000000,0x140000,0x2000000,0x2000000,0x100000,0x100000,0x100000,0x2000000,0x140000,0x140000,0x140000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x440000,0x440000,0x40000,0x10800000,0x140000,0x400000,0x140000,0x400000,0x2,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20000,0x0,0x20000,0x20000,0x0,0x800,0x20000,0x0,0x20000,0x20000,0x0,0x0,0x20000,0x0,0x20000,0x20000,0x20000,0x85e,0x0,0x20000,0x0,0x20000,0x80000,0x0,0x4000000,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x0,0x0,0x1,0x6000,0x1,0x6000,0x20000,0x1,0x6000,0x1,0x6000,0x20000,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x85e,0x0,0x0,0x0,0x0,0x5e,0x0,0x43a0007,0x0,0x0,0x7fa0000,0x7fb0000,0x7fa0000,0x0,0x43a0007,0x43b0007,0x43a0007,0xe000,0xe000,0x1f80,0x1f80,0x40,0x6,0x6,0x18,0x18,0x7,0x7,0x0,0x0,0x43a0000,0x0,0x43b0007,0x0,0x43b0007,0x0,0x0,0x300000,0x380000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x20,0x40,0x0,0x0,0x20,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Meuphoria(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Meuphoria(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MeuphoriaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Meuphoria(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MeuphoriaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Meuphoria(MeuphoriaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MeuphoriaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[104];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 107; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 104; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
