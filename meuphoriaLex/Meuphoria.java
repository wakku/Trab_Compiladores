/* Meuphoria.java */
/* Generated By:JavaCC: Do not edit this line. Meuphoria.java */
/* MeuPhoria Parser */
class Meuphoria implements MeuphoriaConstants {

  // Processa o código e gera a tabela de tokens
  public void processa() throws ParseException, TokenMgrError{
    Token t;
    String nomeToken;
    do {
      //try {
      // Pega o próximo token gerado pelo Léxico.
        t = getNextToken();
        if(t.kind == IDENTIFIER) {
                  // Se tamanho for maior que 30, váriavel é invalida. Gera um erro.
            if(t.image.length() > 30)
                throw new TokenMgrError();
                //throw new TokenMgrError(TokenMgrError.IDENT_ERROR);
        }
        // Pega o proximo token do tipo t.kind
        nomeToken = tokenImage[t.kind];
        // Seta a localização do token
        String location = "@(" + t.beginLine + ", " + t.beginColumn + ")";
        // Imprime as informações do token. Se for EOF não imprime image, pois ela não existe.
        if(t.kind == EOL)
          System.out.println(String.format("%-15s %-20s <EOL>", location, nomeToken));
        else
          System.out.println(String.format("%-15s %-20s %s", location, nomeToken, t.image));
    } while (nomeToken.equals("<EOF>")); // Termina o loop se EOF
  }

  /** Main entry point. */
  public static void main(String args[]) {
    try
    {
      // Define o analisador lexico de acordo com a entrada do sistema
      Meuphoria analisadorlexico = new Meuphoria(System.in);
      // Roda o loop de processamento enquanto não encontrar EOF
      //analisadorlexico.processa();
      // Processamento finalizado
      //System.out.println("Analisado com sucesso!");

      analisadorlexico.javacc_input();
      System.out.println("input... ");

    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
        System.out.println("Ocorreu uma excecao!");
    }
    catch(TokenMgrError e)
    {
        System.out.println(e.getMessage());
        System.out.println("Existem erros no codigo! Por favor, verifica-los.");
    }
  }

/*************************
        Atribuição
**************************
TOKEN : {
    < ASSIGNMONO    : <IDENTIFIER> <EQUAL> <EXPRESSION> >
  | < ASSIGNMULTI   : <IDENTIFIER> (<COMMA> <IDENTIFIER>)? <EQUAL> <EXPRESSION> (<COMMA> <EXPRESSION>)? >
  | < ASSIGNWITHOP  : <IDENTIFIER> (<PLUS> | <MINUS> | <SLASH> | <STAR> | <CONCAT> ) <EQUAL> <EXPRESSION> >
}

/*************************
          Return
**************************
TOKEN : {
  < RETURNSTMT : <RETURN> <EXPRESSION> (<COMMA> <EXPRESSION>)* >
}

/*************************
  Declaração de Variáveis
**************************
TOKEN : {
  < VARDECLARE : (<SCOPEMODIFIER>)? <DATATYPE> <IDENTLIST> >
}

/*************************
  Delaração de Constantes
**************************
TOKEN : {
  < CONSTDECLARE : (<SCOPEMODIFIER>)? <CONSTANT> <IDENTLIST> >
}

/*************************
 Declaração de Enumeração
**************************
TOKEN : {
    < ENUMDELTA : (<PLUS> | <MINUS> | <STAR> | <SLASH>)? <EXPRESSION> >
  | < ENUMVAL   : <ENUM> (<BY> <ENUMDELTA>)? <IDENTLIST> >
  | < ENUMTYPE  : <ENUM> <TYPE> (<BY> <ENUMDELTA>)? <IDENTLIST> <END> <TYPE> >
}

/*************************
  Declaração de Processos
**************************
TOKEN : {
  < PROCDECLARE :  (<SCOPEMODIFIER>)? <PROCEDURE> <IDENTIFIER> <LPAREN> (<PARAMLIST>)? <RPAREN> (<STMBLK>)? <END> <PROCEDURE> >
}

/*************************
  Declaração de Função
**************************
TOKEN : {
  < FUNCDECLARE :  (<SCOPEMODIFIER>)? <FUNCTION> <IDENTIFIER> <LPAREN> (<PARAMLIST>)? <RPAREN> (<STMBLK>)? <END> <FUNCTION> >
}

/*************************
    Declaração de Tipo
**************************
TOKEN : {
  < TYPEDECLARE :  (<SCOPEMODIFIER>)? <TYPE> <IDENTIFIER> <LPAREN> (<PARAMLIST>)? <RPAREN> (<STMBLK>)? <END> <TYPE> >
}

/*******************************************************
                MEUPHORIA GRAMMAR
*******************************************************/
  final public 
void javacc_input() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    case CONSTANT:
    case ENUM:
    case FUNCTION:
    case PROCEDURE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case OVERRIDE:{
        ScopeModifier();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONSTANT:{
          ConstantDeclare();
          break;
          }
        case ENUM:{
          EnumDeclare();
          break;
          }
        case PROCEDURE:{
          ProcDeclare();
          break;
          }
        case FUNCTION:{
          FuncDeclare();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONSTANT:
        case ENUM:
        case FUNCTION:
        case PROCEDURE:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConstantDeclare() throws ParseException {
    jj_consume_token(CONSTANT);
    IdentList();
  }

  final public void EnumDeclare() throws ParseException {
    jj_consume_token(ENUM);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BY:
    case IDENTIFIER:{
      EnumVal();
      break;
      }
    case TYPE:{
      EnumType();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EnumVal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BY:{
      jj_consume_token(BY);
      EnumDelta();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    IdentList();
  }

  final public void EnumType() throws ParseException {
    jj_consume_token(TYPE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BY:{
      jj_consume_token(BY);
      EnumDelta();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    IdentList();
    jj_consume_token(END);
    jj_consume_token(TYPE);
  }

  final public void EnumDelta() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    Expression();
  }

  final public void ProcDeclare() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:
    case 131:
    case 132:
    case 133:
    case 134:{
      ParamList();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(PROCEDURE);
  }

  final public void FuncDeclare() throws ParseException {
    jj_consume_token(FUNCTION);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:
    case 131:
    case 132:
    case 133:
    case 134:{
      ParamList();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FUNCTION);
  }

  final public void stmblk() throws ParseException {
    label_2:
    while (true) {
      statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case WHILE:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case IFDEF:
      case TYPE:
      case FOR:
      case IDENTIFIER:
      case BREAKSTMT:
      case CONTINUESTMT:
      case RETRYSTMT:
      case EXITSTMT:
      case FALLTHRUSTMT:
      case GOTOSTMT:
      case 131:
      case 132:
      case 133:
      case 134:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
    }
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:{
      Flow();
      break;
      }
    case WHILE:
    case LOOP:
    case FOR:
    case GOTOSTMT:{
      Loop();
      break;
      }
    case SWITCH:
    case IF:
    case IFDEF:{
      Branch();
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case CONCAT:
      case EQUAL:{
        Assignment();
        break;
        }
      case LPAREN:{
        Call();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case RETURN:{
      Return();
      break;
      }
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case OVERRIDE:
    case TYPE:
    case 131:
    case 132:
    case 133:
    case 134:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case OVERRIDE:{
        ScopeModifier();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:
      case 131:
      case 132:
      case 133:
      case 134:{
        VarDeclare();
        break;
        }
      case TYPE:{
        TypeDeclare();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Flow() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BREAKSTMT:{
      jj_consume_token(BREAKSTMT);
      break;
      }
    case CONTINUESTMT:{
      jj_consume_token(CONTINUESTMT);
      break;
      }
    case RETRYSTMT:{
      jj_consume_token(RETRYSTMT);
      break;
      }
    case EXITSTMT:{
      jj_consume_token(EXITSTMT);
      break;
      }
    case FALLTHRUSTMT:{
      jj_consume_token(FALLTHRUSTMT);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Loop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:{
      ForStatement();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    case LOOP:{
      LoopStatement();
      break;
      }
    case GOTOSTMT:{
      jj_consume_token(GOTOSTMT);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    ForIDX();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FOR);
  }

  final public void ForIDX() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUAL);
    Expression();
    jj_consume_token(TO);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BY:{
      jj_consume_token(BY);
      Expression();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHENTRY:{
      jj_consume_token(WITHENTRY);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    stmblk();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTRY:{
      EntryStatement();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(WHILE);
  }

  final public void LoopStatement() throws ParseException {
    jj_consume_token(LOOP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHENTRY:{
      jj_consume_token(WITHENTRY);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    stmblk();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTRY:{
      EntryStatement();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(UNTIL);
    Expression();
    jj_consume_token(END);
    jj_consume_token(LOOP);
  }

  final public void EntryStatement() throws ParseException {
    jj_consume_token(ENTRY);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void Branch() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      IfStatement();
      break;
      }
    case SWITCH:{
      SwitchStatement();
      break;
      }
    case IFDEF:{
      IfDefStatement();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    IfTest();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSIF:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_3;
      }
      ElsifStatement();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      ElseStatement();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

  final public void IfTest() throws ParseException {
    jj_consume_token(IF);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  final public void ElsifStatement() throws ParseException {
    jj_consume_token(ELSIF);
    Expression();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  final public void ElseStatement() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  final public void IfDefStatement() throws ParseException {
    IfDefTest();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSEIFDEF:{
      ElsDefIfStatement();
      label_4:
      while (true) {
        jj_consume_token(CHAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_4;
        }
      }
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSEDEF:{
      ElsDefStatement();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(ENDDEFIF);
  }

  final public void IfDefTest() throws ParseException {
    jj_consume_token(IFDEF);
    jj_consume_token(DEFEXPR);
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  final public void ElsDefIfStatement() throws ParseException {
    jj_consume_token(ELSEIFDEF);
    jj_consume_token(DEFEXPR);
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
  }

  final public void ElsDefStatement() throws ParseException {
    jj_consume_token(ELSEDEF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
  }

  final public void SwitchStatement() throws ParseException {
    SwitchTest();
    CaseStatement();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_5;
      }
      CaseStatement();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASEELSE:{
      jj_consume_token(CASEELSE);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(ENDSWITCH);
  }

  final public void SwitchTest() throws ParseException {
    jj_consume_token(SWITCH);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHFALL:{
      jj_consume_token(WITHFALL);
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(DO);
  }

  final public void CaseStatement() throws ParseException {
    jj_consume_token(CASE);
    CaseList();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
  }

  final public void CaseList() throws ParseException {
    Expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void Assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      AssignmentMono();
      break;
      }
    case COMMA:{
      AssignmentMulti();
      break;
      }
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case CONCAT:{
      AssignmentWihOp();
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignmentMono() throws ParseException {
    jj_consume_token(EQUAL);
    Expression();
  }

  final public void AssignmentMulti() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(EQUAL);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Expression();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
  }

  final public void AssignmentWihOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case SLASH:{
      jj_consume_token(SLASH);
      break;
      }
    case STAR:{
      jj_consume_token(STAR);
      break;
      }
    case CONCAT:{
      jj_consume_token(CONCAT);
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EQUAL);
    Expression();
  }

  final public void Return() throws ParseException {
    jj_consume_token(RETURN);
    Expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void VarDeclare() throws ParseException {
    DataType();
    IdentList();
  }

  final public void IdentList() throws ParseException {
    Ident();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      Ident();
    }
  }

  final public void Ident() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      jj_consume_token(EQUAL);
      Expression();
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
  }

  final public void TypeDeclare() throws ParseException {
    jj_consume_token(TYPE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:
    case 131:
    case 132:
    case 133:
    case 134:{
      ParamList();
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case WHILE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:
    case BREAKSTMT:
    case CONTINUESTMT:
    case RETRYSTMT:
    case EXITSTMT:
    case FALLTHRUSTMT:
    case GOTOSTMT:
    case 131:
    case 132:
    case 133:
    case 134:{
      stmblk();
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(TYPE);
  }

  final public void Call() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:
    case 129:
    case 130:{
      ArgList();
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ArgList() throws ParseException {
    Expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

/************************************************************
                        SEQUENCIA
************************************************************/
  final public 
void Sequence() throws ParseException {
    jj_consume_token(LBRACE);
    Object();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      Object();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      jj_consume_token(END_SYMBOL);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void Object() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      Sequence();
      break;
      }
    case INTEGER:
    case FLOAT:
    case EXP:{
      Atom();
      break;
      }
    case BIN_NUMBER:{
      jj_consume_token(BIN_NUMBER);
      break;
      }
    case OCT_NUMBER:{
      jj_consume_token(OCT_NUMBER);
      break;
      }
    case DEC_NUMBER:{
      jj_consume_token(DEC_NUMBER);
      break;
      }
    case HEX_NUMBER:{
      jj_consume_token(HEX_NUMBER);
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/************************************************************
                          EXPRESSÕES
************************************************************/
  final public 
void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      Sequence();
      break;
      }
    case LPAREN:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:
    case 129:
    case 130:{
      Expression00();
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression00() throws ParseException {
    Expression01();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:
      case SC_AND:
      case XOR_OP:{
        ;
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        jj_consume_token(SC_AND);
        break;
        }
      case SC_OR:{
        jj_consume_token(SC_OR);
        break;
        }
      case XOR_OP:{
        jj_consume_token(XOR_OP);
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression01();
    }
  }

  final public void Expression01() throws ParseException {
    Expression02();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
      case EQUAL:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        break;
        }
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression02();
    }
  }

  final public void Expression02() throws ParseException {
    Expression03();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONCAT:{
        ;
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        break label_13;
      }
      jj_consume_token(CONCAT);
      Expression03();
    }
  }

  final public void Expression03() throws ParseException {
    Expression04();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression04();
    }
  }

  final public void Expression04() throws ParseException {
    Expression05();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:{
        ;
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression05();
    }
  }

  final public void Expression05() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT_OP:
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case NOT_OP:{
        jj_consume_token(NOT_OP);
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    Expression06();
  }

  final public void Expression06() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case EXP:{
      Atom();
      break;
      }
    case STRINGLIT:{
      jj_consume_token(STRINGLIT);
      break;
      }
    case LBRACE:{
      Sequence();
      break;
      }
    case 129:{
      jj_consume_token(129);
      break;
      }
    case 130:{
      jj_consume_token(130);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          Slice();
          break;
          }{
          Subscripting();
          break;
          }
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      break;
      }{
      Call();
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// LOAKAHED HERE COM O LBRACKET E EXPRESSION??? mas e a repetição??? !!!!!!!!!!
  final public             void Slice() throws ParseException {
    jj_consume_token(LBRACKET);
    Expression();
    jj_consume_token(SLICE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:
    case 129:
    case 130:{
      Expression();
      break;
      }
    case END_SYMBOL:{
      jj_consume_token(END_SYMBOL);
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
  }

  final public void Subscripting() throws ParseException {
    label_16:
    while (true) {
      Index();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        break label_16;
      }
    }
  }

  final public void Index() throws ParseException {
    jj_consume_token(LBRACKET);
    Expression();
    jj_consume_token(RBRACKET);
  }

  final public void ParamList() throws ParseException {
    Parameter();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      Parameter();
    }
  }

  final public void Parameter() throws ParseException {
    DataType();
    jj_consume_token(IDENTIFIER);
  }

/*****************************************
              DATA TYPE
*****************************************/
  final public 
void ScopeModifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GLOBAL:{
      jj_consume_token(GLOBAL);
      break;
      }
    case PUBLIC:{
      jj_consume_token(PUBLIC);
      break;
      }
    case EXPORT:{
      jj_consume_token(EXPORT);
      break;
      }
    case OVERRIDE:{
      jj_consume_token(OVERRIDE);
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DataType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 131:{
      jj_consume_token(131);
      break;
      }
    case 132:{
      jj_consume_token(132);
      break;
      }
    case 133:{
      jj_consume_token(133);
      break;
      }
    case 134:{
      jj_consume_token(134);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Real() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case EXP:{
      jj_consume_token(EXP);
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Atom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case FLOAT:
    case EXP:{
      Real();
      break;
      }
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public MeuphoriaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[85];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x16000,0x100000,0x100000,0x10136000,0x0,0x0,0x0,0x0,0x0,0x0,0x10036000,0x0,0x10036000,0x10036000,0x0,0x16000,0x0,0x10036000,0x0,0x10000000,0x0,0x10036000,0x0,0x0,0x0,0x400000,0x0,0x0,0x400000,0x10036000,0x20000,0x0,0x200000,0x0,0x10036000,0x10036000,0x10036000,0x0,0x0,0x80000000,0x10036000,0x10036000,0x10036000,0x400,0x0,0x0,0x0,0x10036000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10036000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x4801,0x4801,0x4001581f,0x10080,0x80,0x80,0x0,0x0,0x0,0x4001101e,0x0,0x4001101e,0x4001101e,0x80000000,0x8,0x10000,0x4001101e,0x0,0x40000004,0x0,0x4001101e,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x4001101e,0x1002,0x200,0x0,0x0,0x4001101e,0x4001101e,0x4001101e,0x0,0x20000000,0x0,0x4001101e,0x4001101e,0x4001101e,0x0,0x0,0x0,0x0,0x4001101e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4001101e,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x8,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x3c000,0x3c000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x10bc040,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x40,0x10bc040,0x40,0x40,0xbc000,0x40,0x40,0x1000000,0x80000000,0x80000000,0x8000e002,0x40,0x40,0x40,0x2,0x8000e002,0x1c000000,0x1c000000,0x3f00000,0x3f00000,0x80000,0xc000,0xc000,0x30000,0x30000,0xe000,0xe000,0x8,0x8,0x80000002,0xc000e002,0x8,0x40,0x0,0x80000000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x3f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00000,0x0,0x3f00000,0x3f00000,0x0,0x0,0x0,0x3f00000,0x1f00000,0x2000000,0x80000,0x3f00000,0x0,0x40000,0x80000,0x0,0x40000,0x80000,0x0,0x3f00000,0x0,0x0,0x0,0x80000,0x3f00000,0x3f00000,0x3f00000,0x1,0x0,0x0,0x3f00000,0x3f00000,0x3f00000,0x0,0x20000000,0x8000000,0x80000,0x3f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00000,0x10e,0x0,0x0,0x0,0xfe,0x10e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10e,0x10e,0x0,0x0,0x0,0x0,0xc,0xe,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x78,0x78,0x78,0x78,0x78,0x0,0x0,0x78,0x78,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x78,0x78,0x78,0x0,0x0,0x0,0x78,0x78,0x78,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0x78,0x6,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x78,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Meuphoria(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Meuphoria(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MeuphoriaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Meuphoria(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MeuphoriaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Meuphoria(MeuphoriaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MeuphoriaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[135];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 85; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 135; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
