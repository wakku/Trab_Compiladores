/* Meuphoria.java */
/* Generated By:JavaCC: Do not edit this line. Meuphoria.java */
/* MeuPhoria Parser */
class Meuphoria implements MeuphoriaConstants {

  private static int errors = 0;

  // Processa o código e gera a tabela de tokens
  public void processa() throws ParseException, TokenMgrError{
    Token t;
    String nomeToken;
    do {
        // Pega o próximo token gerado pelo Léxico.
        t = getNextToken();
        if(t.kind == IDENTIFIER) {
        // Se tamanho for maior que 30, váriavel é invalida. Gera um erro.
                if(t.image.length() > 30)
                throw new TokenMgrError();
        }
        // Pega o proximo token do tipo t.kind
        nomeToken = tokenImage[t.kind];
        // Seta a localização do token
        String location = "@(" + t.beginLine + ", " + t.beginColumn + ")";
        // Imprime as informações do token. Se for EOF não imprime image, pois ela não existe.
        if(t.kind == EOL)
                        System.out.println(String.format("%-15s %-20s <EOL>", location, nomeToken));
        else
                        System.out.println(String.format("%-15s %-20s %s", location, nomeToken, t.image));
    } while (!(nomeToken.equals("<EOF>"))); // Termina o loop se EOF
    System.out.println(String.format("%s", t.image));
  }

  /** Main entry point. */
  public static void main(String args[]) {
    try
    {
      java.io.InputStream tmp = System.in;

      java.io.InputStreamReader is = new java.io.InputStreamReader(tmp);
      java.lang.StringBuilder sb=new java.lang.StringBuilder();
      java.io.BufferedReader br = new java.io.BufferedReader(is);
      try {
        String read = br.readLine();

        while(read != null) {
            //System.out.println(read);
            sb.append(read + "\u005cn");
            read =br.readLine();

        }
      }
      catch(java.io.IOException e) {
          System.out.println(e.getMessage());
      }

      //System.out.println(sb.toString());

      // Define o analisador sintatico de acordo com a entrada do sistema
      //Meuphoria analisadorSintatico = new Meuphoria(System.in);
      Meuphoria analisadorSintatico = new Meuphoria(new java.io.StringReader(sb.toString()));

      // Roda o loop de processamento enquanto não encontrar EOF
      //analisadorlexico.processa();
      // Processamento finalizado
      //System.out.println("Analisado com sucesso!");

      analisadorSintatico.javacc_input();

      analisadorSintatico = new Meuphoria(new java.io.StringReader(sb.toString()));

      //analisadorSintatico.javacc_input();
      //System.out.println("SUCESSO!");
    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
        System.out.println("Ocorreu uma excecao!");
    }
    catch(TokenMgrError e)
    {
        System.out.println(e.getMessage());
        System.out.println("Existem erros no codigo! Por favor, verifica-los.");
    }
  }

/*******************************************************
                MEUPHORIA GRAMMAR
*******************************************************/
  final public 
void printError(Token t, String msg) throws ParseException {
errors++;
    System.out.println("[" + t.beginLine + ", " + t.beginColumn + "] " + msg);
     //System.exit(1);

  }

  final public void javacc_input() throws ParseException {Token t;
    SemanticRoutines rSem;
rSem = new SemanticRoutines();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:
      case EXPORT:
      case GLOBAL:
      case PUBLIC:
      case SWITCH:
      case CONSTANT:
      case FALLTHRU:
      case GOTO:
      case RETRY:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case ENUM:
      case IF:
      case LOOP:
      case OVERRIDE:
      case RETURN:
      case EXIT:
      case FUNCTION:
      case IFDEF:
      case PROCEDURE:
      case TYPE:
      case FOR:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2)) {
        stmblk(rSem);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXPORT:
        case GLOBAL:
        case PUBLIC:
        case CONSTANT:
        case ENUM:
        case OVERRIDE:
        case FUNCTION:
        case PROCEDURE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EXPORT:
          case GLOBAL:
          case PUBLIC:
          case OVERRIDE:{
            ScopeModifier();
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONSTANT:{
            ConstantDeclare(rSem);
            break;
            }
          case ENUM:{
            EnumDeclare(rSem);
            break;
            }
          case PROCEDURE:{
            ProcDeclare();
            break;
            }
          case FUNCTION:{
            FuncDeclare();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
if ( errors != 0 ) {
          System.out.println("An\u221a\u00b0lise encontrou " + errors + " erro(s).");
          //System.exit(1);
        } else {
          System.out.println("An\u221a\u00b0lises l\u221a\u00a9xica, sint\u221a\u00b0tica e sem\u221a\u00a2ntica conclu\u221a\u2260das com sucesso!");
        }

        //System.exit(0);

  }

  final public void ConstantDeclare(SemanticRoutines rSem) throws ParseException {Token type;
    type = jj_consume_token(CONSTANT);
    IdentList(rSem, type);
  }

/* NAO SEI SE O ENUM EH ASSIM ????????? */
  final public       void EnumDeclare(SemanticRoutines rSem) throws ParseException {Token type;
    type = jj_consume_token(ENUM);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      EnumVal(rSem, type);
      break;
      }
    case TYPE:{
      EnumType(rSem, type);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EnumVal(SemanticRoutines rSem, Token type) throws ParseException {
    IdentList(rSem, type);
  }

  final public void EnumType(SemanticRoutines rSem, Token type) throws ParseException {
    jj_consume_token(TYPE);
    IdentList(rSem, type);
    jj_consume_token(END);
    jj_consume_token(TYPE);
  }

  final public void ProcDeclare() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      ParamList();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void FuncDeclare() throws ParseException {
    jj_consume_token(FUNCTION);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      ParamList();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void stmblk(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPORT:
    case GLOBAL:
    case PUBLIC:
    case SWITCH:
    case FALLTHRU:
    case GOTO:
    case RETRY:
    case WHILE:
    case BREAK:
    case CONTINUE:
    case IF:
    case LOOP:
    case OVERRIDE:
    case RETURN:
    case EXIT:
    case IFDEF:
    case TYPE:
    case FOR:
    case IDENTIFIER:{
      statement(rSem);
      break;
      }
    case EOL:{
      jj_consume_token(EOL);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void statement(SemanticRoutines rSem) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALLTHRU:
    case RETRY:
    case BREAK:
    case CONTINUE:
    case EXIT:{
      Flow();
      break;
      }
    case GOTO:
    case WHILE:
    case LOOP:
    case FOR:{
      Loop();
      break;
      }
    case SWITCH:
    case IF:
    case IFDEF:{
      Branch();
      break;
      }
    case RETURN:{
      Return();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_2(2)) {
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:
        case COMMA:
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case CONCAT:
        case EQUAL:{
          Assignment();
          break;
          }
        case LPAREN:{
          Call();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXPORT:
        case GLOBAL:
        case PUBLIC:
        case OVERRIDE:
        case TYPE:
        case IDENTIFIER:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EXPORT:
          case GLOBAL:
          case PUBLIC:
          case OVERRIDE:{
            ScopeModifier();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            VarDeclare(rSem);
            break;
            }
          case TYPE:{
            TypeDeclare();
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Flow() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BREAK:{
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    case CONTINUE:{
      jj_consume_token(CONTINUE);
      break;
      }
    case RETRY:{
      jj_consume_token(RETRY);
      break;
      }
    case EXIT:{
      jj_consume_token(EXIT);
      break;
      }
    case FALLTHRU:{
      jj_consume_token(FALLTHRU);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRINGLIT:{
      jj_consume_token(STRINGLIT);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void Loop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:{
      ForStatement();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    case LOOP:{
      LoopStatement();
      break;
      }
    case GOTO:{
      jj_consume_token(GOTO);
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
  }

  final public void ForIDX() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUAL);
    Expression();
    jj_consume_token(TO);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BY:{
      jj_consume_token(BY);
      Expression();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHENTRY:{
      jj_consume_token(WITHENTRY);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(DO);
  }

  final public void LoopStatement() throws ParseException {
    jj_consume_token(LOOP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHENTRY:{
      jj_consume_token(WITHENTRY);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(DO);
  }

  final public void EntryStatement() throws ParseException {
    jj_consume_token(ENTRY);
  }

  final public void Branch() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      IfStatement();
      break;
      }
    case SWITCH:{
      SwitchStatement();
      break;
      }
    case IFDEF:{
      IfDefStatement();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    IfTest();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSIF:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_2;
      }
      ElsifStatement();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      ElseStatement();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
  }

  final public void IfTest() throws ParseException {
    jj_consume_token(IF);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
  }

  final public void ElsifStatement() throws ParseException {
    jj_consume_token(ELSIF);
    Expression();
    jj_consume_token(THEN);
  }

  final public void ElseStatement() throws ParseException {
    jj_consume_token(ELSE);
  }

  final public void IfDefStatement() throws ParseException {
    IfDefTest();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSEIFDEF:{
      ElsDefIfStatement();
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSEDEF:{
      ElsDefStatement();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(ENDDEFIF);
  }

  final public void IfDefTest() throws ParseException {
    jj_consume_token(IFDEF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT_OP:{
      jj_consume_token(NOT_OP);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SC_OR:
    case SC_AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        jj_consume_token(SC_AND);
        break;
        }
      case SC_OR:{
        jj_consume_token(SC_OR);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT_OP:{
        jj_consume_token(NOT_OP);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
  }

  final public void ElsDefIfStatement() throws ParseException {
    jj_consume_token(ELSEIFDEF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT_OP:{
      jj_consume_token(NOT_OP);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SC_OR:
    case SC_AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        jj_consume_token(SC_AND);
        break;
        }
      case SC_OR:{
        jj_consume_token(SC_OR);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT_OP:{
        jj_consume_token(NOT_OP);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(THEN);
  }

  final public void ElsDefStatement() throws ParseException {
    jj_consume_token(ELSEDEF);
  }

  final public void SwitchStatement() throws ParseException {
    SwitchTest();
    CaseStatement();
    label_3:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_3;
      }
      CaseStatement();
    }
  }

  final public void SwitchTest() throws ParseException {
    jj_consume_token(SWITCH);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:
    case WITHOUT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WITH:{
        jj_consume_token(WITH);
        break;
        }
      case WITHOUT:{
        jj_consume_token(WITHOUT);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FALLTHRU);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABELSTMT:{
      jj_consume_token(LABELSTMT);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EOL:{
      jj_consume_token(EOL);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  final public void CaseStatement() throws ParseException {
    jj_consume_token(CASE);
    CaseList();
    jj_consume_token(THEN);
  }

  final public void CaseList() throws ParseException {
    Expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void Assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:
    case COMMA:
    case EQUAL:{
      AssignmentMulti();
      break;
      }
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case CONCAT:{
      AssignmentWihOp();
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignmentMulti() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      Variable();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        Variable();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(EQUAL);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Expression();
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      ;
    }
  }

  final public void AssignmentWihOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case SLASH:{
      jj_consume_token(SLASH);
      break;
      }
    case STAR:{
      jj_consume_token(STAR);
      break;
      }
    case CONCAT:{
      jj_consume_token(CONCAT);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EQUAL);
    Expression();
  }

  final public void Return() throws ParseException {
    jj_consume_token(RETURN);
    Expression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void VarDeclare(SemanticRoutines rSem) throws ParseException {Token type;
    type = DataType();
    IdentList(rSem, type);
  }

  final public void IdentList(SemanticRoutines rSem, Token type) throws ParseException {
    Ident(rSem, type);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      Ident(rSem, type);
    }
  }

  final public void Ident(SemanticRoutines rSem, Token type) throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
System.out.println(t.toString());
                              if (rSem.searchLevel(t.toString()) == null) {
                                Symbol s = new Symbol(t.toString(),rSem.getLevel(),Category.Variable);
                                s.setType(SemanticRoutines.tokenAsType(type));
                                rSem.insert(s);

                              }
                              else {
                                //Throw semantic exception
                                printError(t, "Erro Semantico: Variavel '" + t.toString() + "' ja declarada.");
                              }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      jj_consume_token(EQUAL);
      Expression();
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      ;
    }
  }

  final public void TypeDeclare() throws ParseException {
    jj_consume_token(TYPE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      ParamList();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void Call() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:{
      ArgList();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ArgList() throws ParseException {
    Expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

/************************************************************
                        SEQUENCIA
************************************************************/
  final public 
void Sequence() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:
    case END_SYMBOL:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case BIN_NUMBER:
    case OCT_NUMBER:
    case DEC_NUMBER:
    case HEX_NUMBER:
    case STRINGLIT:{
      if (jj_2_5(2)) {
        jj_consume_token(END_SYMBOL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:
        case IDENTIFIER:
        case INTEGER:
        case FLOAT:
        case EXP:
        case BIN_NUMBER:
        case OCT_NUMBER:
        case DEC_NUMBER:
        case HEX_NUMBER:
        case STRINGLIT:{
          Object();
          label_8:
          while (true) {
            if (jj_2_4(2)) {
              ;
            } else {
              break label_8;
            }
            jj_consume_token(COMMA);
            Object();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            jj_consume_token(COMMA);
            jj_consume_token(END_SYMBOL);
            break;
            }
          default:
            jj_la1[53] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void Object() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      Sequence();
      break;
      }
    case INTEGER:
    case FLOAT:
    case EXP:{
      Atom();
      break;
      }
    case BIN_NUMBER:{
      jj_consume_token(BIN_NUMBER);
      break;
      }
    case OCT_NUMBER:{
      jj_consume_token(OCT_NUMBER);
      break;
      }
    case DEC_NUMBER:{
      jj_consume_token(DEC_NUMBER);
      break;
      }
    case HEX_NUMBER:{
      jj_consume_token(HEX_NUMBER);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case STRINGLIT:{
      jj_consume_token(STRINGLIT);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/************************************************************
                          EXPRESSÕES
************************************************************/
  final public 
void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      Sequence();
      break;
      }
    case LPAREN:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:{
      Expression00();
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression00() throws ParseException {
    Expression01();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:
      case SC_AND:
      case XOR_OP:{
        ;
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        jj_consume_token(SC_AND);
        break;
        }
      case SC_OR:{
        jj_consume_token(SC_OR);
        break;
        }
      case XOR_OP:{
        jj_consume_token(XOR_OP);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression01();
    }
  }

  final public void Expression01() throws ParseException {
    Expression02();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
      case EQUAL:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        break;
        }
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression02();
    }
  }

  final public void Expression02() throws ParseException {
    Expression03();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONCAT:{
        ;
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        break label_11;
      }
      jj_consume_token(CONCAT);
      Expression03();
    }
  }

  final public void Expression03() throws ParseException {
    Expression04();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression04();
    }
  }

  final public void Expression04() throws ParseException {
    Expression05();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:{
        ;
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression05();
    }
  }

  final public void Expression05() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT_OP:
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case NOT_OP:{
        jj_consume_token(NOT_OP);
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    Expression06();
  }

  final public void Expression06() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case EXP:{
      Atom();
      break;
      }
    case STRINGLIT:{
      jj_consume_token(STRINGLIT);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case LBRACKET:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          Call();
          break;
          }
        case LBRACKET:{
          Variable();
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variable() throws ParseException {
    jj_consume_token(LBRACKET);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SLICE:{
      Slice();
      break;
      }
    case RBRACKET:{
      Subscripting();
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Slice() throws ParseException {
    jj_consume_token(SLICE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case NOT_OP:
    case PLUS:
    case MINUS:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case EXP:
    case STRINGLIT:{
      Expression();
      break;
      }
    case END_SYMBOL:{
      jj_consume_token(END_SYMBOL);
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
  }

  final public void Subscripting() throws ParseException {
    jj_consume_token(RBRACKET);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        break label_14;
      }
      Index();
    }
  }

  final public void Index() throws ParseException {
    jj_consume_token(LBRACKET);
    Expression();
    jj_consume_token(RBRACKET);
  }

  final public void ParamList() throws ParseException {
    Parameter();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      Parameter();
    }
  }

  final public void Parameter() throws ParseException {
    DataType();
    jj_consume_token(IDENTIFIER);
  }

/*****************************************
              DATA TYPE
*****************************************/
  final public 
void ScopeModifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GLOBAL:{
      jj_consume_token(GLOBAL);
      break;
      }
    case PUBLIC:{
      jj_consume_token(PUBLIC);
      break;
      }
    case EXPORT:{
      jj_consume_token(EXPORT);
      break;
      }
    case OVERRIDE:{
      jj_consume_token(OVERRIDE);
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Token DataType() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
System.out.println(t.toString());
      {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void Real() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case EXP:{
      jj_consume_token(EXP);
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Atom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case FLOAT:
    case EXP:{
      Real();
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(LABELSTMT)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(LOOP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(END_SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_71()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(IFDEF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MeuphoriaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[79];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x75936200,0x16000,0x100000,0x116000,0x0,0x0,0x0,0x75836200,0x0,0x16000,0x0,0x75820000,0x16000,0x0,0x64800000,0x0,0x11000000,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x200000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40015c1f,0x8,0x4801,0x4809,0x10000,0x0,0x0,0x4001141e,0x80000000,0x8,0x10000,0x40001416,0x10008,0x0,0x400,0x0,0x40000004,0x80,0x0,0x0,0x0,0x0,0x1002,0x200,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20040,0x20040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x80000000,0x0,0x0,0x8,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x80000000,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x10bc048,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0xc000000,0x2000,0xc000000,0x2000,0xc000000,0x2000,0xc000000,0x0,0x0,0x0,0x0,0x40,0x10bc048,0x8,0x8,0x40,0x40,0xbc000,0x40,0x40,0x1000000,0x80000000,0x8000e002,0x40,0x40,0x80000002,0xc0000002,0x80000002,0x8000e002,0x1c000000,0x1c000000,0x3f00000,0x3f00000,0x80000,0xc000,0xc000,0x30000,0x30000,0xe000,0xe000,0x8,0x8,0x80000000,0x210,0xc000e002,0x8,0x40,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x100,0x0,0x0,0x80000,0x100000,0x80000,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10e,0x0,0x0,0x1fe,0x1fe,0x1fe,0x10e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10e,0x0,0x10e,0x0,0x0,0x0,0xc,0xe,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Meuphoria(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Meuphoria(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MeuphoriaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Meuphoria(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MeuphoriaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Meuphoria(MeuphoriaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MeuphoriaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 79; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[118];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 79; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 118; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
