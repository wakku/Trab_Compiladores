/* Generated By:JavaCC: Do not edit this line. MeuphoriaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MeuphoriaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIO_INICIAL = 5;
  /** RegularExpression Id. */
  int COMENTARIO_LINHA = 6;
  /** RegularExpression Id. */
  int ALPHA = 9;
  /** RegularExpression Id. */
  int DIGIT = 10;
  /** RegularExpression Id. */
  int USCORE = 11;
  /** RegularExpression Id. */
  int EOL = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int END = 15;
  /** RegularExpression Id. */
  int EXPORT = 16;
  /** RegularExpression Id. */
  int GLOBAL = 17;
  /** RegularExpression Id. */
  int INCLUDE = 18;
  /** RegularExpression Id. */
  int PUBLIC = 19;
  /** RegularExpression Id. */
  int SWITCH = 20;
  /** RegularExpression Id. */
  int UNTIL = 21;
  /** RegularExpression Id. */
  int AS = 22;
  /** RegularExpression Id. */
  int CONSTANT = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int ENTRY = 25;
  /** RegularExpression Id. */
  int FALLTHRU = 26;
  /** RegularExpression Id. */
  int GOTO = 27;
  /** RegularExpression Id. */
  int LABEL = 28;
  /** RegularExpression Id. */
  int RETRY = 29;
  /** RegularExpression Id. */
  int THEN = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int BREAK = 32;
  /** RegularExpression Id. */
  int CONTINUE = 33;
  /** RegularExpression Id. */
  int ELSEDEF = 34;
  /** RegularExpression Id. */
  int ENUM = 35;
  /** RegularExpression Id. */
  int IF = 36;
  /** RegularExpression Id. */
  int LOOP = 37;
  /** RegularExpression Id. */
  int OVERRIDE = 38;
  /** RegularExpression Id. */
  int RETURN = 39;
  /** RegularExpression Id. */
  int TO = 40;
  /** RegularExpression Id. */
  int WITH = 41;
  /** RegularExpression Id. */
  int BY = 42;
  /** RegularExpression Id. */
  int DEPRECATE = 43;
  /** RegularExpression Id. */
  int ELSIF = 44;
  /** RegularExpression Id. */
  int EXIT = 45;
  /** RegularExpression Id. */
  int FUNCTION = 46;
  /** RegularExpression Id. */
  int IFDEF = 47;
  /** RegularExpression Id. */
  int NAMESPACE = 48;
  /** RegularExpression Id. */
  int PROCEDURE = 49;
  /** RegularExpression Id. */
  int ROUTINE = 50;
  /** RegularExpression Id. */
  int TYPE = 51;
  /** RegularExpression Id. */
  int WITHOUT = 52;
  /** RegularExpression Id. */
  int PROFILE = 53;
  /** RegularExpression Id. */
  int PROFILE_TIME = 54;
  /** RegularExpression Id. */
  int TRACE = 55;
  /** RegularExpression Id. */
  int BATCH = 56;
  /** RegularExpression Id. */
  int TYPE_CHECK = 57;
  /** RegularExpression Id. */
  int INDIRECT_INCLUDES = 58;
  /** RegularExpression Id. */
  int INLINE = 59;
  /** RegularExpression Id. */
  int WARNING = 60;
  /** RegularExpression Id. */
  int SAVE = 61;
  /** RegularExpression Id. */
  int RESTORE = 62;
  /** RegularExpression Id. */
  int STRICT = 63;
  /** RegularExpression Id. */
  int ELSEIFDEF = 64;
  /** RegularExpression Id. */
  int FOR = 65;
  /** RegularExpression Id. */
  int LPAREN = 66;
  /** RegularExpression Id. */
  int RPAREN = 67;
  /** RegularExpression Id. */
  int LBRACE = 68;
  /** RegularExpression Id. */
  int RBRACE = 69;
  /** RegularExpression Id. */
  int LBRACKET = 70;
  /** RegularExpression Id. */
  int RBRACKET = 71;
  /** RegularExpression Id. */
  int SEMICOLON = 72;
  /** RegularExpression Id. */
  int COMMA = 73;
  /** RegularExpression Id. */
  int DOT = 74;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 75;
  /** RegularExpression Id. */
  int SLICE = 76;
  /** RegularExpression Id. */
  int QUOTE = 77;
  /** RegularExpression Id. */
  int TRIPLE_QUOTE = 78;
  /** RegularExpression Id. */
  int COLON = 79;
  /** RegularExpression Id. */
  int NOT_OP = 80;
  /** RegularExpression Id. */
  int PLUS = 81;
  /** RegularExpression Id. */
  int MINUS = 82;
  /** RegularExpression Id. */
  int STAR = 83;
  /** RegularExpression Id. */
  int SLASH = 84;
  /** RegularExpression Id. */
  int CONCAT = 85;
  /** RegularExpression Id. */
  int GT = 86;
  /** RegularExpression Id. */
  int LT = 87;
  /** RegularExpression Id. */
  int LE = 88;
  /** RegularExpression Id. */
  int GE = 89;
  /** RegularExpression Id. */
  int EQUAL = 90;
  /** RegularExpression Id. */
  int NE = 91;
  /** RegularExpression Id. */
  int SC_OR = 92;
  /** RegularExpression Id. */
  int SC_AND = 93;
  /** RegularExpression Id. */
  int XOR_OP = 94;
  /** RegularExpression Id. */
  int QMARK = 95;
  /** RegularExpression Id. */
  int END_SYMBOL = 96;
  /** RegularExpression Id. */
  int IDENTIFIER = 97;
  /** RegularExpression Id. */
  int BIN_NUMBER = 98;
  /** RegularExpression Id. */
  int OCT_NUMBER = 99;
  /** RegularExpression Id. */
  int HEX_NUMBER = 100;
  /** RegularExpression Id. */
  int DATATYPE = 101;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"/*\"",
    "<COMENTARIO_INICIAL>",
    "<COMENTARIO_LINHA>",
    "\"*/\"",
    "<token of kind 8>",
    "<ALPHA>",
    "<DIGIT>",
    "\"_\"",
    "\"\\n\"",
    "\"case\"",
    "\"do\"",
    "\"end\"",
    "\"export\"",
    "\"global\"",
    "\"include\"",
    "\"public\"",
    "\"switch\"",
    "\"until\"",
    "\"as\"",
    "\"constant\"",
    "\"else\"",
    "\"entry\"",
    "\"fallthru\"",
    "\"goto\"",
    "\"label\"",
    "\"retry\"",
    "\"then\"",
    "\"while\"",
    "\"break\"",
    "\"continue\"",
    "\"elsedef\"",
    "\"enum\"",
    "\"if\"",
    "\"loop\"",
    "\"override\"",
    "\"return\"",
    "\"to\"",
    "\"with\"",
    "\"by\"",
    "\"deprecate\"",
    "\"elsif\"",
    "\"exit\"",
    "\"function\"",
    "\"ifdef\"",
    "\"namespace\"",
    "\"procedure\"",
    "\"routine\"",
    "\"type\"",
    "\"without\"",
    "\"profile\"",
    "\"profile_time\"",
    "\"trace\"",
    "\"batch\"",
    "\"type_check\"",
    "\"indirect_includes\"",
    "\"inline\"",
    "\"warning\"",
    "\"save\"",
    "\"restore\"",
    "\"strict\"",
    "\"elsifdef\"",
    "\"for\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"\\\'\"",
    "\"..\"",
    "\"\\\"\"",
    "\"\\\"\\\"\\\"\"",
    "\":\"",
    "\"not\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"or\"",
    "\"and\"",
    "\"xor\"",
    "\"?\"",
    "\"$\"",
    "<IDENTIFIER>",
    "<BIN_NUMBER>",
    "<OCT_NUMBER>",
    "<HEX_NUMBER>",
    "<DATATYPE>",
  };

}
