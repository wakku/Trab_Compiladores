/***********************************************************************
                          ANALISADOR LÉXICO
************************************************************************

Integrantes: 
  Caio Gomes                  7239072
  Diego Gomes                 7656467
  Fernando Cury Gorodscy      7152354
  Roberty Manzini Bertolo     7573399
  Vanessa Apolinário Lima     7239256

Documento:
  Codigo fonte

Nome:
  MeuPhoria

************************************************************************/


/*****************************************
                Opções
*****************************************/
options {
  STATIC = false;
}

/*****************************************
    Inicialização do Analisador Léxico
*****************************************/
PARSER_BEGIN(Meuphoria)

/* MeuPhoria Parser */
class Meuphoria {

  // Processa o código e gera a tabela de tokens
  public void processa() throws ParseException, TokenMgrError{
    Token t;
    String nomeToken;
    do {
      //try {
      // Pega o próximo token gerado pelo Léxico.
        t = getNextToken();
        if(t.kind == IDENTIFIER) {
        	  // Se tamanho for maior que 30, váriavel é invalida. Gera um erro.
            if(t.image.length() > 30)
                throw new TokenMgrError();
                //throw new TokenMgrError(TokenMgrError.IDENT_ERROR);
        }
        // Pega o proximo token do tipo t.kind
        nomeToken = tokenImage[t.kind];
        // Seta a localização do token
        String location = "@(" + t.beginLine + ", " + t.beginColumn + ")";
        // Imprime as informações do token. Se for EOF não imprime image, pois ela não existe.
        if(t.kind == EOL)
          System.out.println(String.format("%-15s %-20s <EOL>", location, nomeToken));
        else
          System.out.println(String.format("%-15s %-20s %s", location, nomeToken, t.image));
    } while (nomeToken.equals("<EOF>")); // Termina o loop se EOF
  }

  /** Main entry point. */
  public static void main(String args[]) {
    try
    {
      // Define o analisador lexico de acordo com a entrada do sistema
      Meuphoria analisadorlexico = new Meuphoria(System.in);
      // Roda o loop de processamento enquanto não encontrar EOF
      //analisadorlexico.processa();
      // Processamento finalizado
      //System.out.println("Analisado com sucesso!");

      analisadorlexico.javacc_input();
      System.out.println("input... ");

    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
        System.out.println("Ocorreu uma excecao!");
    }
    catch(TokenMgrError e)
    {
        System.out.println(e.getMessage());
        System.out.println("Existem erros no codigo! Por favor, verifica-los.");
    }
  }
}
PARSER_END(Meuphoria)

/*****************************************
                SKIP
*****************************************/
SKIP : { " " | "\t" | "\r" }

/* Skip Comentários de linha e de bloco */
SKIP :
{
  "/*" : WithinComment
  | <COMENTARIO_INICIAL : "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <COMENTARIO_LINHA: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

/*****************************************
              TERMINAIS
*****************************************/
TOKEN : {
    < ALPHA : ["a"-"z", "A"-"Z"] >
  | < DIGIT : ["0"-"9"] >
  | < USCORE : "_" >
  | < EOL : "\n" >
}

/*****************************************
          PALAVRAS RERSERVADAS
*****************************************/
TOKEN : {
    <CASE : "case">
  | <DO : "do">
  | <END : "end">
  | <EXPORT : "export">
  | <GLOBAL : "global">
  | <INCLUDE : "include">
  | <PUBLIC : "public">
  | <SWITCH : "switch">
  | <UNTIL : "until">
  | <AS : "as">
  | <CONSTANT : "constant">
  | <ELSE : "else">
  | <ENTRY : "entry">
  | <FALLTHRU : "fallthru">
  | <GOTO : "goto">
  | <LABEL : "label">
  | <RETRY : "retry">
  | <THEN : "then">
  | <WHILE : "while">
  | <BREAK : "break">
  | <CONTINUE : "continue">
  | <ELSEDEF : "elsedef">
  | <ENUM : "enum">
  | <IF : "if">
  | <LOOP : "loop">
  | <OVERRIDE : "override">
  | <RETURN : "return">
  | <TO : "to">
  | <WITH : "with">
  | <BY : "by">
  | <DEPRECATE : "deprecate">
  | <ELSIF : "elsif">
  | <EXIT : "exit">
  | <FUNCTION : "function">
  | <IFDEF : "ifdef">
  | <NAMESPACE : "namespace">
  | <PROCEDURE : "procedure">
  | <ROUTINE : "routine">
  | <TYPE : "type">
  | <WITHOUT : "without">
  | <PROFILE : "profile">
  | <PROFILE_TIME : "profile_time">
  | <TRACE : "trace">
  | <BATCH : "batch">
  | <TYPE_CHECK : "type_check">
  | <INDIRECT_INCLUDES : "indirect_includes">
  | <INLINE : "inline">
  | <WARNING : "warning">
  | <SAVE : "save">
  | <RESTORE : "restore">
  | <STRICT : "strict">
  | <ELSEIFDEF : "elsifdef">
  | <FOR : "for">
}

/*****************************************
              SEPARADORES
*****************************************/
TOKEN : { 
    <LPAREN: "(" >
  | <RPAREN: ")" >
  | <LBRACE: "{" >
  | <RBRACE: "}" >
  | <LBRACKET: "[" >
  | <RBRACKET: "]" >
  | <SEMICOLON: ";" >
  | <COMMA: "," >
  | <DOT: "." >
  | <#SINGLE_QUOTE: "\'" >
  | <SLICE: ".." >
  | <#QUOTE: "\"">
  | <#TRIPLE_QUOTE: "\"\"\"">
  | <COLON : ":">
}

/*****************************************
              OPERADORES
*****************************************/
TOKEN : {
  <NOT_OP: "not" >
  | <PLUS: "+" >
  | <MINUS: "-" >
  | <STAR: "*" >
  | <SLASH: "/" >
  | <CONCAT: "&" >
  | <GT: ">" >
  | <LT: "<" >
  | <LE: "<=" >
  | <GE: ">=" >
  // Depois no sintático, terá que ser adicionado como comando
  | <EQUAL: "=" >
  | <NE: "!=" >
  | <SC_OR: "or" >
  | <SC_AND: "and" >
  | <XOR_OP: "xor" >
  | <QMARK : "?"> // print command
  | <END_SYMBOL : "$">
}

/*****************************************
            IDENTIFICADORES
*****************************************/
TOKEN : { 
    < IDENTIFIER : ( <ALPHA> | <USCORE> ) ( <ALPHA> | <DIGIT> | <USCORE> )* > 
}

/*****************************************
        MANIPULACAO DE NUMEROS
*****************************************/
TOKEN : {
    < INTEGER : ( <PLUS> | <MINUS> )+ <DIGIT> (<DIGIT> | <USCORE>)* >
  | < FLOAT   : <INTEGER> <DOT> <DIGIT> (<DIGIT> | <USCORE>)* >
  | < EXP     : (<INTEGER> | <FLOAT>) ("E" | "e") <INTEGER> >
  | < REAL    : <FLOAT> | <EXP> >
  | < ATOM    : <INTEGER> | <REAL> >
}

TOKEN : {
    < SEQUENCE : <LBRACE> <OBJECT> (<COMMA> <OBJECT>)* (<COMMA> <END_SYMBOL>)? <RBRACE> >
  | < OBJECT   : <ATOM> | <SEQUENCE> | <BIN_NUMBER> | <OCT_NUMBER> | <DEC_NUMBER> | <HEX_NUMBER> > 
}

TOKEN : {
    < BIN        : (["0", "1"])+(["0", "1", "_"])* >  
  | < BIN_NUMBER : "0b" <BIN> >
  | < OCT        : (["0"-"7"])+(["0"-"7", "_"])* >
  | < OCT_NUMBER : "0t" <OCT> >
  | < DEC_NUMBER : "0d" <INTEGER> >
  | < HEX        : (["0"-"9", "A"-"F"])+(["0"-"9", "A"-"F", "_"])* >
  | < HEX_NUMBER : "0x" <HEX> >
}

/*****************************************
        MANIPULACAO DE VARIÁVEIS
*****************************************/
TOKEN : {
    < PARAMLIST : <PARAMETER> (<COMMA> <PARAMETER> )* >
  | < PARAMETER : <DATATYPE> <IDENTIFIER> >
}

TOKEN : {
  < IDENTLIST : <IDENT> ( <COMMA> <IDENT> )* >
  | < IDENT     : <IDENTIFIER> (<EQUAL> <EXPRESSION>)? >
}

TOKEN : {
  < VARIABLE : <IDENTIFIER>  (<SLICESTMT> | <SUBSCRIPTING>)? >
  | < SLICESTMT : <LBRACKET> <EXPRESSION> <SLICE> ( <EXPRESSION> | <END_SYMBOL>) <RBRACKET> >
  | < SUBSCRIPTING : (<INDEX>)+ >
  | < INDEX : <LBRACKET> <EXPRESSION> <RBRACKET> >
}

/*****************************************
        MANIPULAÇÃO DE STRINGS
*****************************************/
TOKEN : {
  < STRINGLIT : <SIMPLESTRINGLIT> | <RAWSTRINGLIT> >
  | < SIMPLESTRINGLIT : <QUOTE> (<CHAR> | <ESCCHAR>)* <QUOTE> >
  | < ESCCHAR : <ESCLEAD> ( "n" | "r" | "t" | "\\" | "\"" | "\'" | "0" | "e" | "E" 
    | <BINARY> | <HEX2> | <HEX4> | <HEX8> ) >
  | < BINARY : "\\b" <BIN> >
  | < HEX2 : "\\x" ["0" - "7"] ["0" - "7"] >
  | < HEX4 : "\\u" ["0" - "7"] ["0" - "7"]["0" - "7"] ["0" - "7"] >
  | < HEX8 : "\\U" ["0" - "7"] ["0" - "7"]["0" - "7"] ["0" - "7"]["0" - "7"] ["0" - >
  "7"]["0" - "7"] ["0" - "7"]
  | < RAWSTRINGLIT : DQRAWSTRING | BQRAWSTRING >
  | < DQRAWSTRING : "`" {CHAR} "`" >
  | <BQRAWSTRING : "\"\"\"" {CHAR} "\"\"\"" >
}

/*****************************************
              DATA TYPE
*****************************************/
TOKEN : { 
  //< SCOPEMODIFIER : <GLOBAL> | <PUBLIC> | <EXPORT> | <OVERRIDE> >
   < DATATYPE : "atom" | "integer" | "sequence" | "object" > }//| <IDENTIFIER> > }

/*****************************************
             EXPRESSÕES
*****************************************/

EXPRESSION : SEQUENCE | E0
E0 :  E1 { (SC_AND | SC_OR | SC_XOR) E1}
E1 : E2 { RELATIONOP E2 }
  RELATIONOP : "<" | ">" | "<=" | ">=" | "=" | "!="
E2 : E3 { CONCAT E3 }
E3 : E4 { (PLUS | MINUS) E4 }
E4 : E5 { (STAR | SLASH) E5 }
E5 : [PLUS | MINUS | NOT_OP] E6 
E6 :  ATOM | STRINGLIT | SEQUENCE |VARIABLE | "0" | "1" |  (LPAREN EXPRESSION RPAREN) | IDENTIFIER | CALL
CALL : IDENTIFIER "(" [ ARGLIST ] ")"
    ARGLIST : EXPRESSION { "," EXPRESSION }

/*****************************************
               STATEMENT
*****************************************/

STMBLK : STATEMENT { STATEMENT }

/*************************
    Statements Básicos
**************************/

// used in the loop
WITHENTRY : WITH ENTRY
ENTRYSTMT : ENTRY [STMBLK]

/*************************
     Controle de Fluxo
**************************/

  BREAKSTMT : BREAK [STRINGLIT]
  CONTINUESTMT : CONTINUE [STRINGLIT]
  RETRYSTMT : RETRY [STRINGLIT]
  EXITSTMT : EXIT [STRINGLIT]
  FALLTHRUSTMT : FALLTHRU [STRINGLIT]

/*************************
    Loop
**************************/

FORSTMT : FOR FORIDX [LABEL] DO [STMBLK] END FOR
    FORIDX : IDENTIFIER EQUAL EXPRESSION TO EXPRESSION [BY EXPRESSION]
  WHILESTMT : WHILE EXPRESSION [WITHENTRY][LABEL] DO STMBLK [ENTRYSTMT] END WHILE
  LOOPSTMT : LOOP [WITHENTRY][LABEL] DO STMBLK [ENTRYSTMT] UNTIL EXPRESSION END LOOP
  GOTOSTMT : GOTO LABEL

/*************************
    Branching
**************************/
TOKEN : {
    < IFTEST    : <IF> <EXPRESSION> (<LABEL>)? <THEN> (<STMBLK>)? >
  | < ELSIFSTMT : <ELSIF> <EXPRESSION> <THEN> (<STMBLK>)? >
  | < ELSESTMT  : <ELSE> (<STMBLK>)? >
  | < ENDIF     : <END> <IF> >
  | < IFSTMT    : <IFTEST> (<ELSIFSTMT>)* (<ELSESTMT>)? <ENDIF> >
}

TOKEN : {
    < SWITCHSTMT : <SWITCHTEST> <CASESTMT> (<CASESTMT>)* (<CASEELSE>)? <ENDSWITCH> >
  | < SWITCHTEST : <SWITCH> <EXPRESSION> (<WITHFALL>)? (<LABEL>)? <DO> >
  | < WITHFALL   : (<WITH> | <WITHOUT>) <FALLTHRU> >
}

TOEN : {
    < CASESTMT  : <CASE> <CASELIST> <THEN> (<STMBLK>)? >
  | < CASELIST  : <EXPRESSION> (<COMMA> <EXPRESSION>)* >
  | < CASEELSE  : <CASE> <ELSE> >
  | < ENDSWITCH : <END> <SWITCH> >
}

TOKEN : {
    < IFDEFSTMT     : <IFDEFTEST> (<ELSDEFIFSTMT> (<CHAR>)+)? (<ELSEDEFSTMT>)? <ENDDEFIF> >
  | < IFDEFTEST     : <IFDEF> <DEFEXPR> <THEN> (<STMBLK>)? >
  | < ELSDEFIFSTMT  : <ELSEIFDEF> <DEFEXPR> <THEN> (<STMBLK>)? >
  | < ELSEDEFSTMT   : <ELSEDEF> (<STMBLK>)? >
  | < ENDDEFIF      : <END> <IFDEF> >
  | < DEFEXPR       : <DEFTERM> (<DEFOP> <DEFTERM>)? >
  | < DEFTERM       : (<NOT> <IDENTIFIER>)? >
  | < DEFOP         : <SC_AND> | <SC_OR> >
}

/*************************
        Atribuição
**************************/
TOKEN : {
    < ASSIGNMONO    : <IDENTIFIER> <EQUAL> <EXPRESSION> >
  | < ASSIGNMULTI   : <IDENTIFIER> (<COMMA> <IDENTIFIER>)? <EQUAL> <EXPRESSION> (<COMMA> <EXPRESSION>)? >
  | < ASSIGNWITHOP  : <IDENTIFIER> (<PLUS> | <MINUS> | <SLASH> | <STAR> | <CONCAT> ) <EQUAL> <EXPRESSION> >
}

/*************************
          Return
**************************/
TOKEN : {
  < RETURNSTMT : <RETURN> <EXPRESSION> (<COMMA> <EXPRESSION>)* >
}

/*************************
  Declaração de Variáveis
**************************/
TOKEN : {
  < VARDECLARE : (<SCOPEMODIFIER>)? <DATATYPE> <IDENTLIST> >
}

/*************************
  Delaração de Constantes
**************************/
TOKEN : {
  < CONSTDECLARE : (<SCOPEMODIFIER>)? <CONSTANT> <IDENTLIST> >
}

/*************************
 Declaração de Enumeração
**************************/
TOKEN : {
    < ENUMDELTA : (<PLUS> | <MINUS> | <STAR> | <SLASH>)? <EXPRESSION> >
  | < ENUMVAL   : <ENUM> (<BY> <ENUMDELTA>)? <IDENTLIST> >
  | < ENUMTYPE  : <ENUM> <TYPE> (<BY> <ENUMDELTA>)? <IDENTLIST> <END> <TYPE> >
}

/*************************
  Declaração de Processos
**************************/
TOKEN : {
  < PROCDECLARE :  (<SCOPEMODIFIER>)? <PROCEDURE> <IDENTIFIER> <LPAREN> (<PARAMLIST>)? <RPAREN> (<STMBLK>)? <END> <PROCEDURE> >
}

/*************************
  Declaração de Função
**************************/
TOKEN : {
  < FUNCDECLARE :  (<SCOPEMODIFIER>)? <FUNCTION> <IDENTIFIER> <LPAREN> (<PARAMLIST>)? <RPAREN> (<STMBLK>)? <END> <FUNCTION> >
}

/*************************
    Declaração de Tipo
**************************/
TOKEN : {
  < TYPEDECLARE :  (<SCOPEMODIFIER>)? <TYPE> <IDENTIFIER> <LPAREN> (<PARAMLIST>)? <RPAREN> (<STMBLK>)? <END> <TYPE> >
}

/*******************************************************
          MEUPHORIA GRAMMAR
*******************************************************/

void javacc_input() :
{}
{
  //( <INCLUDESTMT> )?

  stmblk()

  <EOF>


}
void stmblk() :
{}
{
    ( statement() )+
}

void statement() :
{}
{
      Flow() 
    | Loop()
    | Branch()
    | Assignment()
    | RETURNSTMT
    | VARDECLARE
    | CONSTDECLARE
    | EnumDeclare()
    | PROCDECLARE
    | FUNCDECLARE
    | TYPEDECLARE
    | Call()
}

void Flow() :
{}
{
  BREAKSTMT | CONTINUESTMT | RETRYSTMT | EXITSTMT | FALLTHRUSTMT
}

void Loop() :
{}
{
  FORSTMT | WHILESTMT | LOOPSTMT | GOTOSTMT
}

void Branch() :
{}
{
  IFSTMT | SWITCHSTMT | IFDEFSTMT
}

void Assignment() :
{}
{
  ASSIGNMONO | ASSIGNMULTI | ASSIGNWITHOP
}

void EnumDeclare() :
{}
{
  (SCOPEMODIFIER)? (ENUMVAL | ENUMTYPE)
}










