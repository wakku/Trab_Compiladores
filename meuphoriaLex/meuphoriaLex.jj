/***********************************************************************
                          ANALISADOR LÉXICO
************************************************************************

Integrantes: 
  Caio Gomes                  7239072
  Diego Gomes                 7656467
  Fernando Cury Gorodscy      7152354
  Roberty Manzini Bertolo     7573399
  Vanessa Apolinário Lima     7239256

Documento:
  Codigo fonte

Nome:
  MeuPhoria

************************************************************************/


/*****************************************
                Opções
*****************************************/
options {
  STATIC = false;
}

/*****************************************
    Inicialização do Analisador Léxico
*****************************************/
PARSER_BEGIN(Meuphoria)

/* MeuPhoria Parser */
class Meuphoria {

  // Processa o código e gera a tabela de tokens
  public void processa() throws ParseException, TokenMgrError{
    Token t;
    String nomeToken;
    do {
      //try {
      // Pega o próximo token gerado pelo Léxico.
        t = getNextToken();
        if(t.kind == IDENTIFIER) {
        	  // Se tamanho for maior que 30, váriavel é invalida. Gera um erro.
            if(t.image.length() > 30)
                throw new TokenMgrError();
                //throw new TokenMgrError(TokenMgrError.IDENT_ERROR);
        }
        // Pega o proximo token do tipo t.kind
        nomeToken = tokenImage[t.kind];
        // Seta a localização do token
        String location = "@(" + t.beginLine + ", " + t.beginColumn + ")";
        // Imprime as informações do token. Se for EOF não imprime image, pois ela não existe.
        if(t.kind == EOL)
          System.out.println(String.format("%-15s %-20s <EOL>", location, nomeToken));
        else
          System.out.println(String.format("%-15s %-20s %s", location, nomeToken, t.image));
    } while (nomeToken.equals("<EOF>")); // Termina o loop se EOF
  }

  /** Main entry point. */
  public static void main(String args[]) {
    try
    {
      // Define o analisador lexico de acordo com a entrada do sistema
      Meuphoria analisadorlexico = new Meuphoria(System.in);
      // Roda o loop de processamento enquanto não encontrar EOF
      //analisadorlexico.processa();
      // Processamento finalizado
      //System.out.println("Analisado com sucesso!");

      analisadorlexico.javacc_input();
      System.out.println("input... ");

    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
        System.out.println("Ocorreu uma excecao!");
    }
    catch(TokenMgrError e)
    {
        System.out.println(e.getMessage());
        System.out.println("Existem erros no codigo! Por favor, verifica-los.");
    }
  }
}
PARSER_END(Meuphoria)

/*****************************************
                SKIP
*****************************************/
SKIP : { " " | "\t" | "\r" }

/* Skip Comentários de linha e de bloco */
SKIP :
{
  "/*" : WithinComment
  | <COMENTARIO_INICIAL : "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <COMENTARIO_LINHA: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

/*****************************************
              TERMINAIS
*****************************************/
TOKEN : {
    < ALPHA : ["a"-"z", "A"-"Z"] >
  | < DIGIT : ["0"-"9"] >
  | < USCORE : "_" >
  | < EOL : "\n" >
}

/*****************************************
          PALAVRAS RERSERVADAS
*****************************************/
TOKEN : {
    <CASE : "case">
  | <DO : "do">
  | <END : "end">
  | <EXPORT : "export">
  | <GLOBAL : "global">
  | <INCLUDE : "include">
  | <PUBLIC : "public">
  | <SWITCH : "switch">
  | <UNTIL : "until">
  | <AS : "as">
  | <CONSTANT : "constant">
  | <ELSE : "else">
  | <ENTRY : "entry">
  | <FALLTHRU : "fallthru">
  | <GOTO : "goto">
  | <LABEL : "label">
  | <RETRY : "retry">
  | <THEN : "then">
  | <WHILE : "while">
  | <BREAK : "break">
  | <CONTINUE : "continue">
  | <ELSEDEF : "elsedef">
  | <ENUM : "enum">
  | <IF : "if">
  | <LOOP : "loop">
  | <OVERRIDE : "override">
  | <RETURN : "return">
  | <TO : "to">
  | <WITH : "with">
  | <BY : "by">
  | <DEPRECATE : "deprecate">
  | <ELSIF : "elsif">
  | <EXIT : "exit">
  | <FUNCTION : "function">
  | <IFDEF : "ifdef">
  | <NAMESPACE : "namespace">
  | <PROCEDURE : "procedure">
  | <ROUTINE : "routine">
  | <TYPE : "type">
  | <WITHOUT : "without">
  | <PROFILE : "profile">
  | <PROFILE_TIME : "profile_time">
  | <TRACE : "trace">
  | <BATCH : "batch">
  | <TYPE_CHECK : "type_check">
  | <INDIRECT_INCLUDES : "indirect_includes">
  | <INLINE : "inline">
  | <WARNING : "warning">
  | <SAVE : "save">
  | <RESTORE : "restore">
  | <STRICT : "strict">
  | <ELSEIFDEF : "elsifdef">
  | <FOR : "for">
}

/*****************************************
              SEPARADORES
*****************************************/
TOKEN : { 
    <LPAREN: "(" >
  | <RPAREN: ")" >
  | <LBRACE: "{" >
  | <RBRACE: "}" >
  | <LBRACKET: "[" >
  | <RBRACKET: "]" >
  | <SEMICOLON: ";" >
  | <COMMA: "," >
  | <DOT: "." >
  | <#SINGLE_QUOTE: "\'" >
  | <SLICE: ".." >
  | <#QUOTE: "\"">
  | <#TRIPLE_QUOTE: "\"\"\"">
  | <COLON : ":">
}

/*****************************************
              OPERADORES
*****************************************/
TOKEN : {
  <NOT_OP: "not" >
  | <PLUS: "+" >
  | <MINUS: "-" >
  | <STAR: "*" >
  | <SLASH: "/" >
  | <CONCAT: "&" >
  | <GT: ">" >
  | <LT: "<" >
  | <LE: "<=" >
  | <GE: ">=" >
  // Depois no sintático, terá que ser adicionado como comando
  | <EQUAL: "=" >
  | <NE: "!=" >
  | <SC_OR: "or" >
  | <SC_AND: "and" >
  | <XOR_OP: "xor" >
  | <QMARK : "?"> // print command
  | <END_SYMBOL : "$">
}

/*****************************************
            IDENTIFICADORES
*****************************************/
TOKEN : { 
    < IDENTIFIER : ( <ALPHA> | <USCORE> ) ( <ALPHA> | <DIGIT> | <USCORE> )* > 
}

/*****************************************
        MANIPULACAO DE NUMEROS
*****************************************
TOKEN : {
    < INTEGER : (PLUS | MINUS)+ DIGIT (DIGIT | USCORE)+ >
  | < FLOAT   : INTEGER DOT DIGIT (DIGIT | USCORE)+ >
  | < EXP     : (INTEGER | FLOAT) ("E" | "e") INTEGER >
  | < REAL    : FLOAT | EXP >
  | < ATOM    : INTEGER | REAL >
}
*/

TOKEN : {
    <#BIN_NUMBER : (["0", "1"])+(["0", "1", "_"])*>
  | <#OCT_NUMBER : (["0"-"7"])+(["0"-"7", "_"])*>
  | <#HEX_NUMBER : (["0"-"9", "A"-"F"])+(["0"-"9", "A"-"F", "_"])*>
}

/*****************************************
        MANIPULACAO DE VARIÁVEIS
*****************************************
TOKEN : {
PARAMLIST ::= PARAMETER {"," PARAMETER }
  PARAMETER ::= DATATYPE IDENTIFIER

}
*/

/*****************************************
               STRING
*****************************************/



/*****************************************
              DATATYPE
*****************************************/
TOKEN : { 
  //< SCOPEMODIFIER : <GLOBAL> | <PUBLIC> | <EXPORT> | <OVERRIDE> >
   < DATATYPE : "atom" | "integer" | "sequence" | "object" > }//| <IDENTIFIER> > }



/*******************************************************
          MEUPHORIA GRAMMAR
*******************************************************/

void javacc_input() :
{}
{
  //( <INCLUDESTMT> )?

  stmblk()

  <EOF>


}
void stmblk() :
{}
{
    ( statement() )+
}

void statement() :
{}
{
      Flow() 
    | Loop()
    | Branch()
    | Assignment()
    | Return()
    | VarDeclare()
    | ConstDeclare()
    | EnumDeclare()
    | ProcDeclare()
    | FuncDeclare()
    | TypeDeclare()
    | Call()
}

void Flow() :
{}
{
  ( BREAK | CONTINUE | RETRY | EXIT | FALLTHRU ) (STRINGLIT)?
}










