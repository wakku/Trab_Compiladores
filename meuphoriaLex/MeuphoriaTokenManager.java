/* MeuphoriaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MeuphoriaTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class MeuphoriaTokenManager implements MeuphoriaConstants {
        //Ação executada para cada Token encontrado
        void CommonTokenAction(Token t) {
                if(t.kind == IDENTIFIER) {
                // Se tamanho for maior que 30, váriavel é invalida. Gera um erro.
                if(t.image.length() > 30)
                throw new TokenMgrError();
                }
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x202004010000000L) != 0L)
         {
            jjmatchedKind = 95;
            return 36;
         }
         if ((active1 & 0x8000L) != 0L)
            return 2;
         if ((active0 & 0x2000060180603000L) != 0L)
         {
            jjmatchedKind = 95;
            return 177;
         }
         if ((active1 & 0x40000L) != 0L)
            return 9;
         if ((active0 & 0x402000000L) != 0L)
         {
            jjmatchedKind = 95;
            return 169;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 96;
            return -1;
         }
         if ((active0 & 0x5dfdf9ba6d9fcc00L) != 0L || (active1 & 0x1c002000L) != 0L)
         {
            jjmatchedKind = 95;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0x10a200080800L) != 0L || (active1 & 0x4000000L) != 0L)
            return 6;
         if ((active0 & 0x2004000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 168;
         }
         if ((active1 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x100401000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 171;
         }
         if ((active0 & 0x7ffdef1cfdb7e400L) != 0L || (active1 & 0x18002000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x18002000L) != 0L)
            return 6;
         if ((active0 & 0x2004000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
            return 29;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
            return 167;
         }
         if ((active0 & 0x3ffdff1dfdf7e400L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
            return 6;
         }
         if ((active0 & 0x1000L) != 0L)
            return 176;
         return -1;
      case 3:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 3;
            }
            return 38;
         }
         if ((active0 & 0x441040589200400L) != 0L)
            return 6;
         if ((active0 & 0x2004000000000L) != 0L)
            return 34;
         if ((active0 & 0x3bbcfb1874d7e000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x2030120034440000L) != 0L)
            return 6;
         if ((active0 & 0x2000000L) != 0L)
            return 39;
         if ((active0 & 0x1bcee918c093e000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x2acee908c0908000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
            return 6;
         }
         if ((active0 & 0x1100001000036000L) != 0L)
            return 6;
         return -1;
      case 6:
         if ((active0 & 0x20c0690840900000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 6;
            }
            return 6;
         }
         if ((active0 & 0xa0e800080008000L) != 0L)
            return 6;
         return -1;
      case 7:
         if ((active0 & 0xc8610000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
            return 6;
         }
         if ((active0 & 0x2000080840900000L) != 0L)
            return 6;
         return -1;
      case 8:
         if ((active0 & 0xc8000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
            return 6;
         }
         if ((active0 & 0x610000000000L) != 0L)
            return 6;
         return -1;
      case 9:
         if ((active0 & 0x40000000000000L) != 0L)
            return 6;
         if ((active0 & 0x88000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
            return 6;
         }
         return -1;
      case 10:
         if ((active0 & 0x88000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 10;
            return 6;
         }
         return -1;
      case 11:
         if ((active0 & 0x8000000000000L) != 0L)
            return 6;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 11;
            return 6;
         }
         return -1;
      case 12:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 12;
            return 6;
         }
         return -1;
      case 13:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 13;
            return 6;
         }
         return -1;
      case 14:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 14;
            return 6;
         }
         return -1;
      case 15:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 15;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 9);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 36:
         return jjStopAtPos(0, 94);
      case 38:
         return jjStopAtPos(0, 83);
      case 40:
         return jjStopAtPos(0, 63);
      case 41:
         return jjStopAtPos(0, 64);
      case 42:
         return jjStopAtPos(0, 80);
      case 43:
         return jjStopAtPos(0, 78);
      case 44:
         return jjStopAtPos(0, 70);
      case 45:
         return jjStartNfaWithStates_0(0, 79, 2);
      case 46:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 47:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 58:
         return jjStopAtPos(0, 76);
      case 59:
         return jjStopAtPos(0, 69);
      case 60:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 61:
         return jjStopAtPos(0, 88);
      case 62:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 63:
         return jjStopAtPos(0, 93);
      case 91:
         return jjStopAtPos(0, 67);
      case 92:
         return jjStartNfaWithStates_0(0, 82, 9);
      case 93:
         return jjStopAtPos(0, 68);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x8000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20008020000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40100400L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000000800L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000060180603000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000080000800000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1004000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x180100200008000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x402000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xc400000010000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800801004000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1400000000020000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x51002008000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x202004010000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 123:
         return jjStopAtPos(0, 65);
      case 125:
         return jjStopAtPos(0, 66);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 46:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 61:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x620200002800400L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800011004000000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2004000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000020080204000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000100449000L, active1, 0x8000000L);
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 6);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000800441100000L, active1, 0x10002000L);
      case 114:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x1c400020000000L, active1, 0L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 6);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000010000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000002000L, active1, 0L);
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x41000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 176);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x80100000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x828000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40010020000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000800000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80040100000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc400400004000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x41010000002000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 6);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800020080200400L, active1, 0L);
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x22005005440000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x30480000000000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 6);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x40300082000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000L);
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x3180020000040000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10818000L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 6);
         break;
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 112:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 6);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10804400000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x800800040020000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000020000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 6);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x410000000000L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L);
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20c800040010000L);
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 6);
         break;
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 6);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 39);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x802000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80001800002000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000900000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 6);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 99:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x40010000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000400000008000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000080000000L);
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80800000000L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x200800040000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 6);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 6);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x210000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 6);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 6);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x2008000000000000L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 6);
         break;
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 6);
         break;
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 6);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400040000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 6);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      case 102:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 6);
         break;
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 6);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x80010000000000L);
      case 117:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 6);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 6);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 6);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x88000000000000L);
      case 107:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 54, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 51, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 55, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x2000000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0x4000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x1000000000000L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x20000000000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x80000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x400000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x800000000L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x20000000000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 552;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 176:
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 0:
                  if ((0x2000677b00000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 34)
                     { jjAddStates(7, 9); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(10, 12); }
                  if (curChar == 34)
                     { jjCheckNAddStates(13, 24); }
                  else if (curChar == 48)
                     { jjAddStates(25, 28); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 130;
                  else if (curChar == 39)
                     { jjCheckNAdd(93); }
                  if (curChar == 34)
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 9:
                  if ((0x1008400000000L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 177:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar != 45)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 7:
                  if ((0x2000677b00000000L & l) != 0L && kind > 96)
                     kind = 96;
                  break;
               case 12:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
               case 20:
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 40:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 44:
                  if ((0x1008400000000L & l) != 0L)
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 45:
               case 99:
                  if (curChar == 34 && kind > 116)
                     kind = 116;
                  break;
               case 50:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 42); }
                  break;
               case 51:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(43, 49); }
                  break;
               case 53:
               case 58:
               case 66:
               case 79:
               case 83:
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 76:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(50, 57); }
                  break;
               case 77:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(58, 64); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if (curChar == 39)
                     { jjCheckNAdd(93); }
                  break;
               case 93:
                  if ((0x47100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(93, 94); }
                  break;
               case 94:
                  if (curChar == 39 && kind > 116)
                     kind = 116;
                  break;
               case 95:
                  if (curChar == 34)
                     { jjCheckNAddStates(65, 68); }
                  break;
               case 96:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 100:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 106:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(74, 80); }
                  break;
               case 107:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(81, 86); }
                  break;
               case 109:
               case 114:
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(110); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 130:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 131:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 133:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 140:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(91, 96); }
                  break;
               case 141:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(97, 101); }
                  break;
               case 143:
               case 148:
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(144); }
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(180); }
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(181, 182); }
                  break;
               case 182:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 183:
               case 184:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(184); }
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(185, 186); }
                  break;
               case 187:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 188:
               case 189:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(189); }
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(190, 191); }
                  break;
               case 191:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 192:
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(193, 186); }
                  break;
               case 194:
                  if (curChar == 48)
                     { jjAddStates(25, 28); }
                  break;
               case 196:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  { jjCheckNAddTwoStates(196, 197); }
                  break;
               case 197:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  { jjCheckNAdd(197); }
                  break;
               case 199:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(199, 200); }
                  break;
               case 200:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(200); }
                  break;
               case 202:
               case 203:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  { jjCheckNAdd(203); }
                  break;
               case 205:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAddTwoStates(205, 206); }
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(206); }
                  break;
               case 207:
                  if (curChar == 34)
                     { jjCheckNAddStates(13, 24); }
                  break;
               case 208:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 212:
                  if ((0x1008400000000L & l) != 0L)
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 213:
               case 324:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 218:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(108, 115); }
                  break;
               case 219:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(116, 122); }
                  break;
               case 221:
               case 226:
               case 234:
               case 247:
               case 251:
               case 259:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(222); }
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 244:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 130); }
                  break;
               case 245:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(131, 137); }
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 255:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 256:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 257:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 260:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 264:
                  if ((0x1008400000000L & l) != 0L)
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 265:
                  if (curChar == 34 && kind > 105)
                     kind = 105;
                  break;
               case 270:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(144, 151); }
                  break;
               case 271:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(152, 158); }
                  break;
               case 273:
               case 278:
               case 286:
               case 299:
               case 303:
               case 311:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(274); }
                  break;
               case 274:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 276:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 277:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 281:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 282:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 284:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 285:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 296:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(159, 166); }
                  break;
               case 297:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(167, 173); }
                  break;
               case 301:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 302:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 305:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 306:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 307:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 308:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 309:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 310:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 312:
                  if (curChar == 39)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 313:
                  if ((0x47100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(313, 314); }
                  break;
               case 314:
                  if (curChar == 39 && kind > 104)
                     kind = 104;
                  break;
               case 315:
                  if ((0x47100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(315, 316); }
                  break;
               case 316:
                  if (curChar == 39 && kind > 111)
                     kind = 111;
                  break;
               case 317:
                  if ((0x47100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(317, 318); }
                  break;
               case 318:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 319:
                  if (curChar == 34)
                     { jjAddStates(7, 9); }
                  break;
               case 320:
                  if (curChar == 34)
                     { jjCheckNAddStates(174, 177); }
                  break;
               case 321:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 325:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 326:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 331:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(183, 189); }
                  break;
               case 332:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(190, 195); }
                  break;
               case 334:
               case 339:
               case 347:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(335); }
                  break;
               case 335:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 337:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 338;
                  break;
               case 338:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 339;
                  break;
               case 341:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 342;
                  break;
               case 342:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 343:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 344:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 345;
                  break;
               case 345:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 346;
                  break;
               case 346:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 347;
                  break;
               case 355:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 320;
                  break;
               case 356:
                  if (curChar == 34)
                     { jjCheckNAddStates(196, 199); }
                  break;
               case 357:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 360:
                  if (curChar == 34 && kind > 111)
                     kind = 111;
                  break;
               case 361:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 360;
                  break;
               case 362:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 361;
                  break;
               case 367:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(205, 211); }
                  break;
               case 368:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(212, 217); }
                  break;
               case 370:
               case 375:
               case 383:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(371); }
                  break;
               case 371:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 373:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 374:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 377:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 378;
                  break;
               case 378:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 379;
                  break;
               case 379:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 380;
                  break;
               case 380:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 381:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 382:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 383;
                  break;
               case 391:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 356;
                  break;
               case 392:
                  if (curChar == 34)
                     { jjCheckNAddStates(218, 221); }
                  break;
               case 393:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 396:
                  if (curChar == 34 && kind > 113)
                     kind = 113;
                  break;
               case 397:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 396;
                  break;
               case 398:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 397;
                  break;
               case 403:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(227, 233); }
                  break;
               case 404:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(234, 239); }
                  break;
               case 406:
               case 411:
               case 419:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(407); }
                  break;
               case 407:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 409:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 410;
                  break;
               case 410:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 411;
                  break;
               case 413:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 414;
                  break;
               case 414:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 415;
                  break;
               case 415:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 416;
                  break;
               case 416:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 417;
                  break;
               case 417:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 418;
                  break;
               case 418:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 419;
                  break;
               case 427:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 392;
                  break;
               case 430:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 437:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(244, 249); }
                  break;
               case 438:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(250, 254); }
                  break;
               case 440:
               case 445:
               case 453:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(441); }
                  break;
               case 441:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 443:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 444;
                  break;
               case 444:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 445;
                  break;
               case 447:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 448;
                  break;
               case 448:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 449;
                  break;
               case 449:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 450;
                  break;
               case 450:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 451;
                  break;
               case 451:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 452;
                  break;
               case 452:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 453;
                  break;
               case 464:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 471:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(259, 264); }
                  break;
               case 472:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(265, 269); }
                  break;
               case 474:
               case 479:
               case 487:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(475); }
                  break;
               case 475:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 477:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 478;
                  break;
               case 478:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 479;
                  break;
               case 481:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 482;
                  break;
               case 482:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 483;
                  break;
               case 483:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 484;
                  break;
               case 484:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 485;
                  break;
               case 485:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 486;
                  break;
               case 486:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 487;
                  break;
               case 498:
                  if ((0xffffff7b00000000L & l) != 0L)
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 505:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(274, 279); }
                  break;
               case 506:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(280, 284); }
                  break;
               case 508:
               case 513:
               case 521:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(509); }
                  break;
               case 509:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 511:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 512;
                  break;
               case 512:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 513;
                  break;
               case 515:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 516;
                  break;
               case 516:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 517;
                  break;
               case 517:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 518;
                  break;
               case 518:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 519;
                  break;
               case 519:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 520;
                  break;
               case 520:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 521;
                  break;
               case 533:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddTwoStates(533, 534); }
                  break;
               case 534:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(534); }
                  break;
               case 536:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 537;
                  break;
               case 537:
                  if ((0x3ff000000000000L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 539:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 540;
                  break;
               case 540:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 541;
                  break;
               case 541:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 542;
                  break;
               case 542:
                  if ((0x3ff000000000000L & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               case 544:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 545;
                  break;
               case 545:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 546;
                  break;
               case 546:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 547;
                  break;
               case 547:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 548;
                  break;
               case 548:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 549;
                  break;
               case 549:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 550;
                  break;
               case 550:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 551;
                  break;
               case 551:
                  if ((0x3ff000000000000L & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 176:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 0:
                  if ((0x7fffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(285, 288); }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 177;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 169;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 92)
                     { jjAddStates(289, 290); }
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 39:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 171:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 169:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 167:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 9:
                  if ((0x14402010000020L & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 544;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 539;
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 536;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 533;
                  if (curChar == 92)
                     { jjAddStates(291, 294); }
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 108)
                     { jjAddStates(295, 298); }
                  break;
               case 177:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(6); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(6); }
                  break;
               case 7:
                  if ((0x7fffffed7ffffffL & l) != 0L && kind > 96)
                     kind = 96;
                  break;
               case 8:
                  if (curChar == 92)
                     { jjAddStates(289, 290); }
                  break;
               case 10:
                  if (curChar == 92)
                     { jjAddStates(291, 294); }
                  break;
               case 11:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if (curChar != 95)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
               case 20:
               case 28:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x7eL & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 17:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 121 && kind > 115)
                     kind = 115;
                  break;
               case 31:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 43:
                  if (curChar == 92)
                     { jjAddStates(299, 300); }
                  break;
               case 44:
                  if ((0x14402010000020L & l) != 0L)
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 48:
                  if (curChar == 92)
                     { jjAddStates(301, 304); }
                  break;
               case 49:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 51:
                  if (curChar == 95)
                     { jjCheckNAddStates(43, 49); }
                  break;
               case 52:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
               case 58:
               case 66:
               case 79:
               case 83:
               case 91:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 55:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 59:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 74:
                  if (curChar == 92)
                     { jjAddStates(305, 308); }
                  break;
               case 75:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 77:
                  if (curChar == 95)
                     { jjCheckNAddStates(58, 64); }
                  break;
               case 78:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 80:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 84:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     { jjAddStates(309, 310); }
                  break;
               case 96:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 104:
                  if (curChar == 92)
                     { jjAddStates(311, 314); }
                  break;
               case 105:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 107:
                  if (curChar == 95)
                     { jjCheckNAddStates(81, 86); }
                  break;
               case 108:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
               case 114:
               case 122:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(110); }
                  break;
               case 110:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 111:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 115:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 133:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 138:
                  if (curChar == 92)
                     { jjAddStates(315, 318); }
                  break;
               case 139:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 141:
                  if (curChar == 95)
                     { jjCheckNAddStates(97, 101); }
                  break;
               case 142:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 143:
               case 148:
               case 156:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(144); }
                  break;
               case 144:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 145:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 146:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 147:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 149:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 150:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 170:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if (curChar == 102 && kind > 117)
                     kind = 117;
                  break;
               case 173:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 178:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 180:
                  if (curChar != 95)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 181:
                  if (curChar == 95)
                     { jjAddStates(319, 320); }
                  break;
               case 184:
                  if (curChar != 95)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 185:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(185, 186); }
                  break;
               case 186:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(321, 322); }
                  break;
               case 189:
                  if (curChar != 95)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 190:
                  if (curChar == 95)
                     { jjAddStates(323, 324); }
                  break;
               case 193:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(193, 186); }
                  break;
               case 195:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 197:
                  if (curChar != 95)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 198:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 200:
                  if (curChar != 95)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 201:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 203:
                  if (curChar != 95)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 204:
                  if (curChar == 120)
                     { jjCheckNAdd(205); }
                  break;
               case 205:
                  if ((0x7eL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAddTwoStates(205, 206); }
                  break;
               case 206:
                  if ((0x8000007eL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(206); }
                  break;
               case 208:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 211:
                  if (curChar == 92)
                     { jjAddStates(325, 326); }
                  break;
               case 212:
                  if ((0x14402010000020L & l) != 0L)
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 216:
                  if (curChar == 92)
                     { jjAddStates(327, 330); }
                  break;
               case 217:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 219:
                  if (curChar == 95)
                     { jjCheckNAddStates(116, 122); }
                  break;
               case 220:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 221:
               case 226:
               case 234:
               case 247:
               case 251:
               case 259:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(222); }
                  break;
               case 222:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 223:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 224:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 225:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 227:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 228:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 229:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 230:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 231:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 232:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 242:
                  if (curChar == 92)
                     { jjAddStates(331, 334); }
                  break;
               case 243:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 245:
                  if (curChar == 95)
                     { jjCheckNAddStates(131, 137); }
                  break;
               case 246:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 248:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 249:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 250:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 252:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 253:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 254:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 255:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 256:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 257:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 258:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 260:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 263:
                  if (curChar == 92)
                     { jjAddStates(335, 336); }
                  break;
               case 264:
                  if ((0x14402010000020L & l) != 0L)
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 268:
                  if (curChar == 92)
                     { jjAddStates(337, 340); }
                  break;
               case 269:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 271:
                  if (curChar == 95)
                     { jjCheckNAddStates(152, 158); }
                  break;
               case 272:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 273:
               case 278:
               case 286:
               case 299:
               case 303:
               case 311:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(274); }
                  break;
               case 274:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 275:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 276:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 277:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 279:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 280:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 281:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 282:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 284:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 285:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 294:
                  if (curChar == 92)
                     { jjAddStates(341, 344); }
                  break;
               case 295:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 297:
                  if (curChar == 95)
                     { jjCheckNAddStates(167, 173); }
                  break;
               case 298:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 300:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 301:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 302:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 304:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 305:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 306:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 307:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 308:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 309:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 310:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 313:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     { jjAddStates(345, 346); }
                  break;
               case 315:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     { jjAddStates(347, 348); }
                  break;
               case 317:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     { jjAddStates(349, 350); }
                  break;
               case 321:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 329:
                  if (curChar == 92)
                     { jjAddStates(351, 354); }
                  break;
               case 330:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 331;
                  break;
               case 332:
                  if (curChar == 95)
                     { jjCheckNAddStates(190, 195); }
                  break;
               case 333:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 334:
               case 339:
               case 347:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(335); }
                  break;
               case 335:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 336:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 337;
                  break;
               case 337:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 338;
                  break;
               case 338:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 339;
                  break;
               case 340:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 341;
                  break;
               case 341:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 342;
                  break;
               case 342:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 343:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 344:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 345;
                  break;
               case 345:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 346;
                  break;
               case 346:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 347;
                  break;
               case 357:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 365:
                  if (curChar == 92)
                     { jjAddStates(355, 358); }
                  break;
               case 366:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 367;
                  break;
               case 368:
                  if (curChar == 95)
                     { jjCheckNAddStates(212, 217); }
                  break;
               case 369:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 370;
                  break;
               case 370:
               case 375:
               case 383:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(371); }
                  break;
               case 371:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 372:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 373;
                  break;
               case 373:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 374:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 376:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 377;
                  break;
               case 377:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 378;
                  break;
               case 378:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 379;
                  break;
               case 379:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 380;
                  break;
               case 380:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 381:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 382:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 383;
                  break;
               case 393:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 401:
                  if (curChar == 92)
                     { jjAddStates(359, 362); }
                  break;
               case 402:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 403;
                  break;
               case 404:
                  if (curChar == 95)
                     { jjCheckNAddStates(234, 239); }
                  break;
               case 405:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 406;
                  break;
               case 406:
               case 411:
               case 419:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(407); }
                  break;
               case 407:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 408:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 409;
                  break;
               case 409:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 410;
                  break;
               case 410:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 411;
                  break;
               case 412:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 413;
                  break;
               case 413:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 414;
                  break;
               case 414:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 415;
                  break;
               case 415:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 416;
                  break;
               case 416:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 417;
                  break;
               case 417:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 418;
                  break;
               case 418:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 419;
                  break;
               case 430:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 435:
                  if (curChar == 92)
                     { jjAddStates(363, 366); }
                  break;
               case 436:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 437;
                  break;
               case 438:
                  if (curChar == 95)
                     { jjCheckNAddStates(250, 254); }
                  break;
               case 439:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 440;
                  break;
               case 440:
               case 445:
               case 453:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(441); }
                  break;
               case 441:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 442:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 443;
                  break;
               case 443:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 444;
                  break;
               case 444:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 445;
                  break;
               case 446:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 447;
                  break;
               case 447:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 448;
                  break;
               case 448:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 449;
                  break;
               case 449:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 450;
                  break;
               case 450:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 451;
                  break;
               case 451:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 452;
                  break;
               case 452:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 453;
                  break;
               case 464:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 469:
                  if (curChar == 92)
                     { jjAddStates(367, 370); }
                  break;
               case 470:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 471;
                  break;
               case 472:
                  if (curChar == 95)
                     { jjCheckNAddStates(265, 269); }
                  break;
               case 473:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 474;
                  break;
               case 474:
               case 479:
               case 487:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(475); }
                  break;
               case 475:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 476:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 477;
                  break;
               case 477:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 478;
                  break;
               case 478:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 479;
                  break;
               case 480:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 481;
                  break;
               case 481:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 482;
                  break;
               case 482:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 483;
                  break;
               case 483:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 484;
                  break;
               case 484:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 485;
                  break;
               case 485:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 486;
                  break;
               case 486:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 487;
                  break;
               case 498:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 503:
                  if (curChar == 92)
                     { jjAddStates(371, 374); }
                  break;
               case 504:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 505;
                  break;
               case 506:
                  if (curChar == 95)
                     { jjCheckNAddStates(280, 284); }
                  break;
               case 507:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 508;
                  break;
               case 508:
               case 513:
               case 521:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAdd(509); }
                  break;
               case 509:
                  if ((0x7eL & l) != 0L)
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 510:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 511;
                  break;
               case 511:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 512;
                  break;
               case 512:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 513;
                  break;
               case 514:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 515;
                  break;
               case 515:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 516;
                  break;
               case 516:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 517;
                  break;
               case 517:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 518;
                  break;
               case 518:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 519;
                  break;
               case 519:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 520;
                  break;
               case 520:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 521;
                  break;
               case 531:
                  if (curChar == 92)
                     { jjAddStates(285, 288); }
                  break;
               case 532:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 533;
                  break;
               case 534:
                  if (curChar != 95)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 534;
                  break;
               case 535:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 536;
                  break;
               case 536:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 537;
                  break;
               case 537:
                  if ((0x7eL & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 538:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 539;
                  break;
               case 539:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 540;
                  break;
               case 540:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 541;
                  break;
               case 541:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 542;
                  break;
               case 542:
                  if ((0x7eL & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               case 543:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 544;
                  break;
               case 544:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 545;
                  break;
               case 545:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 546;
                  break;
               case 546:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 547;
                  break;
               case 547:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 548;
                  break;
               case 548:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 549;
                  break;
               case 549:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 550;
                  break;
               case 550:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 551;
                  break;
               case 551:
                  if ((0x7eL & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjAddStates(375, 377); }
                  break;
               case 39:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 41:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 42:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 46:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(378, 385); }
                  break;
               case 47:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 67:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 68:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 69:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 70:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 71:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 72:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 73:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(29, 34); }
                  break;
               case 97:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 98:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 102:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(386, 393); }
                  break;
               case 103:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 123:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 124:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 125:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 126:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 127:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 128:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 129:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(69, 73); }
                  break;
               case 132:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(394, 397); }
                  break;
               case 134:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(135, 164); }
                  break;
               case 135:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 136:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(398, 405); }
                  break;
               case 137:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 157:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 158:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 159:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 160:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 161:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 162:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 163:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 164:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 116)
                     kind = 116;
                  break;
               case 165:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(135); }
                  break;
               case 209:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 210:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 214:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(406, 413); }
                  break;
               case 215:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 235:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 236:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 237:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 238:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 239:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 240:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 241:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(102, 107); }
                  break;
               case 261:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 262:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 266:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(414, 421); }
                  break;
               case 267:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 287:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 288:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 289:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 290:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 291:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 292:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 293:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 143); }
                  break;
               case 322:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 323:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 322;
                  break;
               case 327:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(422, 429); }
                  break;
               case 328:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 348:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 349:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 350:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 351:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 352:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 353:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 354:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(178, 182); }
                  break;
               case 358:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 359:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 358;
                  break;
               case 363:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(430, 437); }
                  break;
               case 364:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 384:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 385:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 386:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 387:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 388:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 389:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 390:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(200, 204); }
                  break;
               case 394:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 395:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 394;
                  break;
               case 399:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(438, 445); }
                  break;
               case 400:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 420:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 421:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 422:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 423:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 424:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 425:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 426:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(222, 226); }
                  break;
               case 429:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(446, 449); }
                  break;
               case 431:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(432, 461); }
                  break;
               case 432:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 433:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(450, 457); }
                  break;
               case 434:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 454:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 455:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 456:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 457:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 458:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 459:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 460:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(240, 243); }
                  break;
               case 461:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 104)
                     kind = 104;
                  break;
               case 462:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(432); }
                  break;
               case 463:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(458, 461); }
                  break;
               case 465:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(466, 495); }
                  break;
               case 466:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 467:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(462, 469); }
                  break;
               case 468:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 488:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 489:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 490:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 491:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 492:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 493:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 494:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(255, 258); }
                  break;
               case 495:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 111)
                     kind = 111;
                  break;
               case 496:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(466); }
                  break;
               case 497:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(470, 473); }
                  break;
               case 499:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(500, 529); }
                  break;
               case 500:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 501:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjAddStates(474, 481); }
                  break;
               case 502:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 522:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 523:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 524:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 525:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 526:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 527:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 528:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 273); }
                  break;
               case 529:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 112)
                     kind = 112;
                  break;
               case 530:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(500); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 552 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   180, 181, 182, 185, 190, 191, 186, 355, 391, 427, 313, 315, 317, 208, 210, 211, 
   213, 260, 262, 263, 265, 266, 268, 214, 216, 195, 198, 201, 204, 40, 42, 43, 
   45, 46, 48, 40, 42, 50, 51, 43, 45, 46, 48, 40, 42, 51, 43, 45, 
   46, 48, 40, 42, 43, 76, 77, 45, 46, 48, 40, 42, 43, 77, 45, 46, 
   48, 96, 98, 102, 104, 96, 98, 101, 102, 104, 96, 98, 106, 107, 101, 102, 
   104, 96, 98, 107, 101, 102, 104, 133, 134, 136, 138, 133, 140, 141, 134, 136, 
   138, 133, 141, 134, 136, 138, 208, 210, 211, 213, 214, 216, 208, 210, 218, 219, 
   211, 213, 214, 216, 208, 210, 219, 211, 213, 214, 216, 208, 210, 211, 244, 245, 
   213, 214, 216, 208, 210, 211, 245, 213, 214, 216, 260, 262, 263, 265, 266, 268, 
   260, 262, 270, 271, 263, 265, 266, 268, 260, 262, 271, 263, 265, 266, 268, 260, 
   262, 263, 296, 297, 265, 266, 268, 260, 262, 263, 297, 265, 266, 268, 321, 323, 
   327, 329, 321, 323, 326, 327, 329, 321, 323, 331, 332, 326, 327, 329, 321, 323, 
   332, 326, 327, 329, 357, 359, 363, 365, 357, 359, 362, 363, 365, 357, 359, 367, 
   368, 362, 363, 365, 357, 359, 368, 362, 363, 365, 393, 395, 399, 401, 393, 395, 
   398, 399, 401, 393, 395, 403, 404, 398, 399, 401, 393, 395, 404, 398, 399, 401, 
   430, 431, 433, 435, 430, 437, 438, 431, 433, 435, 430, 438, 431, 433, 435, 464, 
   465, 467, 469, 464, 471, 472, 465, 467, 469, 464, 472, 465, 467, 469, 498, 499, 
   501, 503, 498, 505, 506, 499, 501, 503, 498, 506, 499, 501, 503, 532, 535, 538, 
   543, 9, 10, 11, 14, 17, 21, 39, 92, 131, 166, 44, 74, 49, 52, 55, 
   59, 75, 78, 80, 84, 93, 94, 105, 108, 111, 115, 139, 142, 145, 149, 181, 
   182, 187, 188, 190, 191, 212, 242, 217, 220, 223, 227, 243, 246, 248, 252, 264, 
   294, 269, 272, 275, 279, 295, 298, 300, 304, 313, 314, 315, 316, 317, 318, 330, 
   333, 336, 340, 366, 369, 372, 376, 402, 405, 408, 412, 436, 439, 442, 446, 470, 
   473, 476, 480, 504, 507, 510, 514, 429, 463, 497, 47, 67, 68, 69, 70, 71, 
   72, 73, 103, 123, 124, 125, 126, 127, 128, 129, 133, 165, 136, 138, 137, 157, 
   158, 159, 160, 161, 162, 163, 215, 235, 236, 237, 238, 239, 240, 241, 267, 287, 
   288, 289, 290, 291, 292, 293, 328, 348, 349, 350, 351, 352, 353, 354, 364, 384, 
   385, 386, 387, 388, 389, 390, 400, 420, 421, 422, 423, 424, 425, 426, 430, 462, 
   433, 435, 434, 454, 455, 456, 457, 458, 459, 460, 464, 496, 467, 469, 468, 488, 
   489, 490, 491, 492, 493, 494, 498, 530, 501, 503, 502, 522, 523, 524, 525, 526, 
   527, 528, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\12", "\143\141\163\145", 
"\144\157", "\145\156\144", "\145\170\160\157\162\164", "\147\154\157\142\141\154", 
"\151\156\143\154\165\144\145", "\160\165\142\154\151\143", "\163\167\151\164\143\150", 
"\165\156\164\151\154", "\141\163", "\143\157\156\163\164\141\156\164", "\145\154\163\145", 
"\145\156\164\162\171", "\146\141\154\154\164\150\162\165", "\147\157\164\157", 
"\154\141\142\145\154", "\162\145\164\162\171", "\164\150\145\156", "\167\150\151\154\145", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\145\154\163\145\144\145\146", 
"\145\156\165\155", "\151\146", "\154\157\157\160", "\157\166\145\162\162\151\144\145", 
"\162\145\164\165\162\156", "\164\157", "\167\151\164\150", "\142\171", 
"\144\145\160\162\145\143\141\164\145", "\145\154\163\151\146", "\145\170\151\164", 
"\146\165\156\143\164\151\157\156", "\151\146\144\145\146", "\156\141\155\145\163\160\141\143\145", 
"\160\162\157\143\145\144\165\162\145", "\162\157\165\164\151\156\145", "\164\171\160\145", 
"\167\151\164\150\157\165\164", "\160\162\157\146\151\154\145", 
"\160\162\157\146\151\154\145\137\164\151\155\145", "\164\162\141\143\145", "\142\141\164\143\150", 
"\164\171\160\145\137\143\150\145\143\153", "\151\156\144\151\162\145\143\164\137\151\156\143\154\165\144\145\163", 
"\151\156\154\151\156\145", "\167\141\162\156\151\156\147", "\163\141\166\145", 
"\162\145\163\164\157\162\145", "\163\164\162\151\143\164", "\145\154\163\151\146\144\145\146", 
"\146\157\162", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", null, 
"\56\56", null, null, "\72", "\156\157\164", "\53", "\55", "\52", "\57", "\134", "\46", 
"\76", "\74", "\74\75", "\76\75", "\75", "\41\75", "\157\162", "\141\156\144", 
"\170\157\162", "\77", "\44", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x2200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MeuphoriaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MeuphoriaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 552; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x3ffffffffff2ffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static final long[] jjtoMore = {
   0x100L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[552];
    private final int[] jjstateSet = new int[2 * 552];

    
    protected char curChar;
}
