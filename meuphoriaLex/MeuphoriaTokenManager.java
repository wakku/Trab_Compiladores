/* MeuphoriaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MeuphoriaTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class MeuphoriaTokenManager implements MeuphoriaConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000L) != 0L || (active1 & 0x400L) != 0L)
            return 18;
         if ((active0 & 0x10000L) != 0L)
            return 33;
         if ((active0 & 0x2001f7fafffabe00L) != 0L || (active1 & 0x800L) != 0L)
            return 12;
         if ((active0 & 0x1000000000000000L) != 0L)
            return 47;
         if ((active0 & 0x80100004000L) != 0L)
            return 25;
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x200L) != 0L)
            return 39;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x85100040400L) != 0L || (active1 & 0x200L) != 0L)
            return 12;
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 24;
         }
         if ((active0 & 0x2001f7aefffbba00L) != 0L || (active1 & 0xc00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 12;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000000000000800L) != 0L || (active1 & 0xc00L) != 0L)
            return 12;
         if ((active0 & 0x1ffaefffbf200L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
            return 12;
         }
         return -1;
      case 3:
         if ((active0 & 0x18222c4900200L) != 0L)
            return 12;
         if ((active0 & 0x7d8c3b6bf000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 3;
            }
            return 12;
         }
         return -1;
      case 4:
         if ((active0 & 0x9001b220000L) != 0L)
            return 12;
         if ((active0 & 0x1748c6049f000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
            return 12;
         }
         return -1;
      case 5:
         if ((active0 & 0x80001b000L) != 0L)
            return 12;
         if ((active0 & 0x1748460484000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 12;
         }
         return -1;
      case 6:
         if ((active0 & 0x1400040004000L) != 0L)
            return 12;
         if ((active0 & 0x348420480000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 12;
         }
         return -1;
      case 7:
         if ((active0 & 0x308000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
            return 12;
         }
         if ((active0 & 0x40420480000L) != 0L)
            return 12;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 80);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 34:
         return jjStartNfaWithStates_0(0, 60, 47);
      case 38:
         return jjStopAtPos(0, 66);
      case 39:
         return jjStopAtPos(0, 58);
      case 40:
         return jjStopAtPos(0, 49);
      case 41:
         return jjStopAtPos(0, 50);
      case 42:
         return jjStopAtPos(0, 64);
      case 43:
         return jjStopAtPos(0, 62);
      case 44:
         return jjStopAtPos(0, 56);
      case 45:
         return jjStartNfaWithStates_0(0, 63, 5);
      case 46:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 59:
         return jjStopAtPos(0, 55);
      case 60:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 61:
         return jjStopAtPos(0, 71);
      case 62:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 91:
         return jjStopAtPos(0, 53);
      case 93:
         return jjStopAtPos(0, 54);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4010000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20080200L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000000400L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x300c0301800L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000400000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x802000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80100004000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x201000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000100000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000008000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400802000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x801004000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1002008000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 123:
         return jjStopAtPos(0, 51);
      case 125:
         return jjStopAtPos(0, 52);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 46:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 61:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001400200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8802000000L, active1, 0L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10040102000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80224800L, active1, 0x400L);
      case 111:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 12);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000400220880000L, active1, 0x800L);
      case 114:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 73, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x200010000000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 12);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000008000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000001000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 12);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x414000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20008010000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40020080000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200200002000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x808000001000L, active1, 0L);
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 12);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040100200L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x1002802a20000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x240000000000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 12);
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x180041000000L);
      case 104:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000020000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x840c000L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 12);
         break;
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 12);
         break;
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 112:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 12);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8402200000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x400020010000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x208000000000L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 12);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400020008000L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 12);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 12);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 12);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00001000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000480000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 12);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000004000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 104:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40400000000L);
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 12);
         break;
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x400020000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 12);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x108000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 12);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 12);
         break;
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 12);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 12);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200020000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 12);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 12);
         break;
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 12);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 12);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 117:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 12);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 12);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 47;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(12); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(12); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(14, 15); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 35)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(12); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(12); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(12); }
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(14, 15); }
                  if (curChar == 34)
                  {
                     if (kind > 79)
                        kind = 79;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 45)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 8:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 9:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 13:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 15:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 43:
                  if (kind > 77)
                     kind = 77;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 45:
                  if (curChar == 46)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(46); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     { jjCheckNAdd(12); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     { jjCheckNAdd(12); }
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(12); }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     { jjCheckNAdd(12); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     { jjCheckNAdd(12); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     { jjCheckNAdd(12); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 47:
               case 14:
                  { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 1:
                  { jjAddStates(4, 6); }
                  break;
               case 6:
                  { jjAddStates(7, 9); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(12); }
                  break;
               case 16:
                  if (curChar == 109 && kind > 81)
                     kind = 81;
                  break;
               case 17:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 114 && kind > 81)
                     kind = 81;
                  break;
               case 21:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 101 && kind > 81)
                     kind = 81;
                  break;
               case 28:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 116 && kind > 81)
                     kind = 81;
                  break;
               case 36:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 43:
                  if ((0xf800000178000001L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 47:
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(4, 6); }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(7, 9); }
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 77)
                     kind = 77;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   42, 43, 44, 45, 1, 2, 4, 6, 7, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\143\141\163\145", 
"\144\157", "\145\156\144", "\145\170\160\157\162\164", "\147\154\157\142\141\154", 
"\151\156\143\154\165\144\145", "\160\165\142\154\151\143", "\163\167\151\164\143\150", 
"\165\156\164\151\154", "\141\163", "\143\157\156\163\164\141\156\164", "\145\154\163\145", 
"\145\156\164\162\171", "\146\141\154\154\164\150\162\165", "\147\157\164\157", 
"\154\141\142\145\154", "\162\145\164\162\171", "\164\150\145\156", "\167\150\151\154\145", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\145\154\163\145\144\145\146", 
"\145\156\165\155", "\151\146", "\154\157\157\160", "\157\166\145\162\162\151\144\145", 
"\162\145\164\165\162\156", "\164\157", "\167\151\164\150", "\142\171", 
"\144\145\160\162\145\143\141\164\145", "\145\154\163\151\146", "\145\170\151\164", 
"\146\165\156\143\164\151\157\156", "\151\146\144\145\146", "\156\141\155\145\163\160\141\143\145", 
"\160\162\157\143\145\144\165\162\145", "\162\157\165\164\151\156\145", "\164\171\160\145", 
"\167\151\164\150\157\165\164", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\47", 
"\56\56", "\42", "\156\157\164", "\53", "\55", "\52", "\57", "\46", "\76", "\74", 
"\74\75", "\76\75", "\75", "\41\75", "\157\162", "\141\156\144", "\170\157\162", null, 
null, null, null, "\12", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MeuphoriaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MeuphoriaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 47; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x3ffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static final long[] jjtoMore = {
   0x100L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[47];
    private final int[] jjstateSet = new int[2 * 47];

    
    protected char curChar;
}
