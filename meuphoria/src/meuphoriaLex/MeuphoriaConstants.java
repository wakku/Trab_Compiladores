/* Generated By:JavaCC: Do not edit this line. MeuphoriaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MeuphoriaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ALPHA = 5;
  /** RegularExpression Id. */
  int DIGIT = 6;
  /** RegularExpression Id. */
  int USCORE = 7;
  /** RegularExpression Id. */
  int EOL = 8;
  /** RegularExpression Id. */
  int NAME = 9;
  /** RegularExpression Id. */
  int SPACENAME = 10;
  /** RegularExpression Id. */
  int IDENTIFIER = 11;
  /** RegularExpression Id. */
  int ATOM = 12;
  /** RegularExpression Id. */
  int ATOM_INTEGER_LIT = 13;
  /** RegularExpression Id. */
  int ATOM_REAL_LIT = 14;
  /** RegularExpression Id. */
  int INTEGER = 15;
  /** RegularExpression Id. */
  int INTEGER_LIT = 16;
  /** RegularExpression Id. */
  int SEQUENCE = 17;
  /** RegularExpression Id. */
  int OBJECT = 18;
  /** RegularExpression Id. */
  int EXPRESSION = 19;
  /** RegularExpression Id. */
  int ATOMEXPR = 20;
  /** RegularExpression Id. */
  int INTEXPR = 21;
  /** RegularExpression Id. */
  int STREXPR = 22;
  /** RegularExpression Id. */
  int SEQEXPR = 23;
  /** RegularExpression Id. */
  int BOOL_LIT = 24;
  /** RegularExpression Id. */
  int BOOLEXPR = 25;
  /** RegularExpression Id. */
  int RELATIONOP = 26;
  /** RegularExpression Id. */
  int BINARYEXPR = 27;
  /** RegularExpression Id. */
  int BINOP = 28;
  /** RegularExpression Id. */
  int UNARYEXPR = 29;
  /** RegularExpression Id. */
  int UNARYOP = 30;
  /** RegularExpression Id. */
  int HEADITEM = 31;
  /** RegularExpression Id. */
  int ITEM = 32;
  /** RegularExpression Id. */
  int LASTITEM = 33;
  /** RegularExpression Id. */
  int STATEMENT = 34;
  /** RegularExpression Id. */
  int STMBLK = 35;
  /** RegularExpression Id. */
  int LABEL = 36;
  /** RegularExpression Id. */
  int LISTDELIM = 37;
  /** RegularExpression Id. */
  int STRINGLIT = 38;
  /** RegularExpression Id. */
  int SIMPLESTRINGLIT = 39;
  /** RegularExpression Id. */
  int SSLITSTART = 40;
  /** RegularExpression Id. */
  int SSLITEND = 41;
  /** RegularExpression Id. */
  int CHAR = 42;
  /** RegularExpression Id. */
  int EESCHAR = 43;
  /** RegularExpression Id. */
  int ESCLEAD = 44;
  /** RegularExpression Id. */
  int RAWSTRINGLIT = 45;
  /** RegularExpression Id. */
  int DQRAWSTRING = 46;
  /** RegularExpression Id. */
  int BQRAWSTRING = 47;
  /** RegularExpression Id. */
  int MARGINSTR = 48;
  /** RegularExpression Id. */
  int SCOPEMODIFIER = 49;
  /** RegularExpression Id. */
  int DATATYPE = 50;
  /** RegularExpression Id. */
  int INCLUDESTMT = 51;
  /** RegularExpression Id. */
  int FILEREF = 52;
  /** RegularExpression Id. */
  int NAMESPACEID = 53;
  /** RegularExpression Id. */
  int SLICE = 54;
  /** RegularExpression Id. */
  int SLICESTART = 55;
  /** RegularExpression Id. */
  int SLICEDELIM = 56;
  /** RegularExpression Id. */
  int SLICEEND = 57;
  /** RegularExpression Id. */
  int IFSTMT = 58;
  /** RegularExpression Id. */
  int IFTEST = 59;
  /** RegularExpression Id. */
  int ELSIF = 60;
  /** RegularExpression Id. */
  int ELSE = 61;
  /** RegularExpression Id. */
  int ENDIF = 62;
  /** RegularExpression Id. */
  int IFDEFSTMT = 63;
  /** RegularExpression Id. */
  int IFDEFTEST = 64;
  /** RegularExpression Id. */
  int ELSDEFIF = 65;
  /** RegularExpression Id. */
  int ELSEDEF = 66;
  /** RegularExpression Id. */
  int ENDDEFIF = 67;
  /** RegularExpression Id. */
  int DEFEXPR = 68;
  /** RegularExpression Id. */
  int DEFTERM = 69;
  /** RegularExpression Id. */
  int DEFOP = 70;
  /** RegularExpression Id. */
  int SWITCHSTMT = 71;
  /** RegularExpression Id. */
  int SWITCHTEST = 72;
  /** RegularExpression Id. */
  int WITHFALL = 73;
  /** RegularExpression Id. */
  int CASE = 74;
  /** RegularExpression Id. */
  int CASELIST = 75;
  /** RegularExpression Id. */
  int CASEELSE = 76;
  /** RegularExpression Id. */
  int ENDSWITCH = 77;
  /** RegularExpression Id. */
  int BREAKSTMT = 78;
  /** RegularExpression Id. */
  int CONTINUESTMT = 79;
  /** RegularExpression Id. */
  int RETRYSTMT = 80;
  /** RegularExpression Id. */
  int EXITSTMT = 81;
  /** RegularExpression Id. */
  int FALLTHRUSTMT = 82;
  /** RegularExpression Id. */
  int FORSTMT = 83;
  /** RegularExpression Id. */
  int FORIDX = 84;
  /** RegularExpression Id. */
  int WHILESTMT = 85;
  /** RegularExpression Id. */
  int WITHENTRY = 86;
  /** RegularExpression Id. */
  int ENTRY = 87;
  /** RegularExpression Id. */
  int LOOPSTMT = 88;
  /** RegularExpression Id. */
  int GOTOSTMT = 89;
  /** RegularExpression Id. */
  int VARDECLARE = 90;
  /** RegularExpression Id. */
  int IDENTLIST = 91;
  /** RegularExpression Id. */
  int IDENT = 92;
  /** RegularExpression Id. */
  int CONSTDECLARE = 93;
  /** RegularExpression Id. */
  int ENUMDECLARE = 94;
  /** RegularExpression Id. */
  int ENUMVAL = 95;
  /** RegularExpression Id. */
  int ENUMDELTA = 96;
  /** RegularExpression Id. */
  int ENUMTYPE = 97;
  /** RegularExpression Id. */
  int CALL = 98;
  /** RegularExpression Id. */
  int ARGLIST = 99;
  /** RegularExpression Id. */
  int ARGUMENT = 100;
  /** RegularExpression Id. */
  int PROCDECLARE = 101;
  /** RegularExpression Id. */
  int PARAMLIST = 102;
  /** RegularExpression Id. */
  int PARAMETER = 103;
  /** RegularExpression Id. */
  int FUNCDECLARE = 104;
  /** RegularExpression Id. */
  int TYPEDECLAR = 105;
  /** RegularExpression Id. */
  int RETURN = 106;
  /** RegularExpression Id. */
  int NAMESPACE = 107;
  /** RegularExpression Id. */
  int WITHSTMT = 108;
  /** RegularExpression Id. */
  int WITHOPTION = 109;
  /** RegularExpression Id. */
  int WITHWARNING = 110;
  /** RegularExpression Id. */
  int WARNOPT = 111;
  /** RegularExpression Id. */
  int SETWARN = 112;
  /** RegularExpression Id. */
  int WARNLIST = 113;
  /** RegularExpression Id. */
  int ADDWARN = 114;
  /** RegularExpression Id. */
  int SAVEWARN = 115;
  /** RegularExpression Id. */
  int RESTOREWARN = 116;
  /** RegularExpression Id. */
  int STRICTWARN = 117;
  /** RegularExpression Id. */
  int SUBSCRIPTING = 118;
  /** RegularExpression Id. */
  int INDEX = 119;
  /** RegularExpression Id. */
  int ASSIGNMONO = 120;
  /** RegularExpression Id. */
  int ASSIGNMULTI = 121;
  /** RegularExpression Id. */
  int ASSIGNWITHOP = 122;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<ALPHA>",
    "<DIGIT>",
    "\"_\"",
    "\"\\\\n\"",
    "<NAME>",
    "<SPACENAME>",
    "<IDENTIFIER>",
    "<ATOM>",
    "\"something\"",
    "\"something_else\"",
    "\"something_other_thing\"",
    "\"another_thing\"",
    "<SEQUENCE>",
    "<OBJECT>",
    "<EXPRESSION>",
    "<ATOMEXPR>",
    "<INTEXPR>",
    "\"an_expression_that_evaluates_to_a_string\"",
    "<SEQEXPR>",
    "<BOOL_LIT>",
    "\"atom_zero_represents_falsehood_and_non-zero_represents_truth\"",
    "<RELATIONOP>",
    "<BINARYEXPR>",
    "<BINOP>",
    "<UNARYEXPR>",
    "<UNARYOP>",
    "<HEADITEM>",
    "<ITEM>",
    "\"$\"",
    "\"complete_unit_of_code_executed_by_the_interpreter\"",
    "<STMBLK>",
    "<LABEL>",
    "\",\"",
    "<STRINGLIT>",
    "<SIMPLESTRINGLIT>",
    "\"\\\"\"",
    "<SSLITEND>",
    "\"any_byte_value\"",
    "<EESCHAR>",
    "\"\"",
    "<RAWSTRINGLIT>",
    "<DQRAWSTRING>",
    "<BQRAWSTRING>",
    "<MARGINSTR>",
    "<SCOPEMODIFIER>",
    "<DATATYPE>",
    "<INCLUDESTMT>",
    "\"file_path_that_may_be_enclosed_in_double-quotes\"",
    "<NAMESPACEID>",
    "<SLICE>",
    "\"[\"",
    "\"..\"",
    "\"]\"",
    "<IFSTMT>",
    "<IFTEST>",
    "<ELSIF>",
    "<ELSE>",
    "<ENDIF>",
    "<IFDEFSTMT>",
    "<IFDEFTEST>",
    "<ELSDEFIF>",
    "<ELSEDEF>",
    "<ENDDEFIF>",
    "<DEFEXPR>",
    "<DEFTERM>",
    "<DEFOP>",
    "<SWITCHSTMT>",
    "<SWITCHTEST>",
    "<WITHFALL>",
    "<CASE>",
    "<CASELIST>",
    "<CASEELSE>",
    "<ENDSWITCH>",
    "<BREAKSTMT>",
    "<CONTINUESTMT>",
    "<RETRYSTMT>",
    "<EXITSTMT>",
    "\"fallthru\"",
    "<FORSTMT>",
    "<FORIDX>",
    "<WHILESTMT>",
    "<WITHENTRY>",
    "<ENTRY>",
    "<LOOPSTMT>",
    "<GOTOSTMT>",
    "<VARDECLARE>",
    "<IDENTLIST>",
    "<IDENT>",
    "<CONSTDECLARE>",
    "<ENUMDECLARE>",
    "<ENUMVAL>",
    "<ENUMDELTA>",
    "<ENUMTYPE>",
    "<CALL>",
    "<ARGLIST>",
    "<ARGUMENT>",
    "<PROCDECLARE>",
    "<PARAMLIST>",
    "<PARAMETER>",
    "<FUNCDECLARE>",
    "<TYPEDECLAR>",
    "<RETURN>",
    "<NAMESPACE>",
    "<WITHSTMT>",
    "<WITHOPTION>",
    "<WITHWARNING>",
    "<WARNOPT>",
    "<SETWARN>",
    "\"warnlist\"",
    "\"add\"",
    "\"save\"",
    "\"restore\"",
    "\"strict\"",
    "<SUBSCRIPTING>",
    "<INDEX>",
    "<ASSIGNMONO>",
    "<ASSIGNMULTI>",
    "<ASSIGNWITHOP>",
  };

}
