/* Generated By:JavaCC: Do not edit this line. MeuphoriaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MeuphoriaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIO_INICIAL = 4;
  /** RegularExpression Id. */
  int COMENTARIO_LINHA = 5;
  /** RegularExpression Id. */
  int COMENTARIO_BLOCO = 6;
  /** RegularExpression Id. */
  int AND = 7;
  /** RegularExpression Id. */
  int CASE = 8;
  /** RegularExpression Id. */
  int DO = 9;
  /** RegularExpression Id. */
  int END = 10;
  /** RegularExpression Id. */
  int EXPORT = 11;
  /** RegularExpression Id. */
  int GLOBAL = 12;
  /** RegularExpression Id. */
  int INCLUDE = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int PUBLIC = 15;
  /** RegularExpression Id. */
  int SWITCH = 16;
  /** RegularExpression Id. */
  int UNTIL = 17;
  /** RegularExpression Id. */
  int XOR = 18;
  /** RegularExpression Id. */
  int AS = 19;
  /** RegularExpression Id. */
  int CONSTANT = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int ENTRY = 22;
  /** RegularExpression Id. */
  int FALLTHRU = 23;
  /** RegularExpression Id. */
  int GOTO = 24;
  /** RegularExpression Id. */
  int LABEL = 25;
  /** RegularExpression Id. */
  int OR = 26;
  /** RegularExpression Id. */
  int RETRY = 27;
  /** RegularExpression Id. */
  int THEN = 28;
  /** RegularExpression Id. */
  int WHILE = 29;
  /** RegularExpression Id. */
  int BREAK = 30;
  /** RegularExpression Id. */
  int CONTINUE = 31;
  /** RegularExpression Id. */
  int ELSEDEF = 32;
  /** RegularExpression Id. */
  int ENUM = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int LOOP = 35;
  /** RegularExpression Id. */
  int OVERRIDE = 36;
  /** RegularExpression Id. */
  int RETURN = 37;
  /** RegularExpression Id. */
  int TO = 38;
  /** RegularExpression Id. */
  int WITH = 39;
  /** RegularExpression Id. */
  int BY = 40;
  /** RegularExpression Id. */
  int DEPRECATE = 41;
  /** RegularExpression Id. */
  int ELSIF = 42;
  /** RegularExpression Id. */
  int EXIT = 43;
  /** RegularExpression Id. */
  int FUNCTION = 44;
  /** RegularExpression Id. */
  int IFDEF = 45;
  /** RegularExpression Id. */
  int NAMESPACE = 46;
  /** RegularExpression Id. */
  int PROCEDURE = 47;
  /** RegularExpression Id. */
  int ROUTINE = 48;
  /** RegularExpression Id. */
  int TYPE = 49;
  /** RegularExpression Id. */
  int WITHOUT = 50;
  /** RegularExpression Id. */
  int DATATYPE = 51;
  /** RegularExpression Id. */
  int LPAREN = 52;
  /** RegularExpression Id. */
  int RPAREN = 53;
  /** RegularExpression Id. */
  int LBRACE = 54;
  /** RegularExpression Id. */
  int RBRACE = 55;
  /** RegularExpression Id. */
  int LBRACKET = 56;
  /** RegularExpression Id. */
  int RBRACKET = 57;
  /** RegularExpression Id. */
  int SEMICOLON = 58;
  /** RegularExpression Id. */
  int COMMA = 59;
  /** RegularExpression Id. */
  int DOT = 60;
  /** RegularExpression Id. */
  int ALPHA = 61;
  /** RegularExpression Id. */
  int DIGIT = 62;
  /** RegularExpression Id. */
  int USCORE = 63;
  /** RegularExpression Id. */
  int EOL = 64;
  /** RegularExpression Id. */
  int NAME = 65;
  /** RegularExpression Id. */
  int SPACENAME = 66;
  /** RegularExpression Id. */
  int IDENTIFIER = 67;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "<COMENTARIO_INICIAL>",
    "<COMENTARIO_LINHA>",
    "<COMENTARIO_BLOCO>",
    "\"and\"",
    "\"case\"",
    "\"do\"",
    "\"end\"",
    "\"export\"",
    "\"global\"",
    "\"include\"",
    "\"not\"",
    "\"public\"",
    "\"switch\"",
    "\"until\"",
    "\"xor\"",
    "\"as\"",
    "\"constant\"",
    "\"else\"",
    "\"entry\"",
    "\"fallthru\"",
    "\"goto\"",
    "\"label\"",
    "\"or\"",
    "\"retry\"",
    "\"then\"",
    "\"while\"",
    "\"break\"",
    "\"continue\"",
    "\"elsedef\"",
    "\"enum\"",
    "\"if\"",
    "\"loop\"",
    "\"override\"",
    "\"return\"",
    "\"to\"",
    "\"with\"",
    "\"by\"",
    "\"deprecate\"",
    "\"elsif\"",
    "\"exit\"",
    "\"function\"",
    "\"ifdef\"",
    "\"namespace\"",
    "\"procedure\"",
    "\"routine\"",
    "\"type\"",
    "\"without\"",
    "<DATATYPE>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "<ALPHA>",
    "<DIGIT>",
    "\"_\"",
    "\"\\n\"",
    "<NAME>",
    "<SPACENAME>",
    "<IDENTIFIER>",
  };

}
