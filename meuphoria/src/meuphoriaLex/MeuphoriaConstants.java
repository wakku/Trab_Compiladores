/* Generated By:JavaCC: Do not edit this line. MeuphoriaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MeuphoriaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIO_INICIAL = 7;
  /** RegularExpression Id. */
  int COMENTARIO_LINHA = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int CASE = 10;
  /** RegularExpression Id. */
  int DO = 11;
  /** RegularExpression Id. */
  int END = 12;
  /** RegularExpression Id. */
  int EXPORT = 13;
  /** RegularExpression Id. */
  int GLOBAL = 14;
  /** RegularExpression Id. */
  int INCLUDE = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int PUBLIC = 17;
  /** RegularExpression Id. */
  int SWITCH = 18;
  /** RegularExpression Id. */
  int UNTIL = 19;
  /** RegularExpression Id. */
  int XOR = 20;
  /** RegularExpression Id. */
  int AS = 21;
  /** RegularExpression Id. */
  int CONSTANT = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int ENTRY = 24;
  /** RegularExpression Id. */
  int FALLTHRU = 25;
  /** RegularExpression Id. */
  int GOTO = 26;
  /** RegularExpression Id. */
  int LABEL = 27;
  /** RegularExpression Id. */
  int OR = 28;
  /** RegularExpression Id. */
  int RETRY = 29;
  /** RegularExpression Id. */
  int THEN = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int BREAK = 32;
  /** RegularExpression Id. */
  int CONTINUE = 33;
  /** RegularExpression Id. */
  int ELSEDEF = 34;
  /** RegularExpression Id. */
  int ENUM = 35;
  /** RegularExpression Id. */
  int IF = 36;
  /** RegularExpression Id. */
  int LOOP = 37;
  /** RegularExpression Id. */
  int OVERRIDE = 38;
  /** RegularExpression Id. */
  int RETURN = 39;
  /** RegularExpression Id. */
  int TO = 40;
  /** RegularExpression Id. */
  int WITH = 41;
  /** RegularExpression Id. */
  int BY = 42;
  /** RegularExpression Id. */
  int DEPRECATE = 43;
  /** RegularExpression Id. */
  int ELSIF = 44;
  /** RegularExpression Id. */
  int EXIT = 45;
  /** RegularExpression Id. */
  int FUNCTION = 46;
  /** RegularExpression Id. */
  int IFDEF = 47;
  /** RegularExpression Id. */
  int NAMESPACE = 48;
  /** RegularExpression Id. */
  int PROCEDURE = 49;
  /** RegularExpression Id. */
  int ROUTINE = 50;
  /** RegularExpression Id. */
  int TYPE = 51;
  /** RegularExpression Id. */
  int WITHOUT = 52;
  /** RegularExpression Id. */
  int LPAREN = 53;
  /** RegularExpression Id. */
  int RPAREN = 54;
  /** RegularExpression Id. */
  int LBRACE = 55;
  /** RegularExpression Id. */
  int RBRACE = 56;
  /** RegularExpression Id. */
  int LBRACKET = 57;
  /** RegularExpression Id. */
  int RBRACKET = 58;
  /** RegularExpression Id. */
  int SEMICOLON = 59;
  /** RegularExpression Id. */
  int COMMA = 60;
  /** RegularExpression Id. */
  int DOT = 61;
  /** RegularExpression Id. */
  int QUOTE = 62;
  /** RegularExpression Id. */
  int ASSIGN = 63;
  /** RegularExpression Id. */
  int GT = 64;
  /** RegularExpression Id. */
  int LT = 65;
  /** RegularExpression Id. */
  int BANG = 66;
  /** RegularExpression Id. */
  int TILDE = 67;
  /** RegularExpression Id. */
  int HOOK = 68;
  /** RegularExpression Id. */
  int COLON = 69;
  /** RegularExpression Id. */
  int EQ = 70;
  /** RegularExpression Id. */
  int LE = 71;
  /** RegularExpression Id. */
  int GE = 72;
  /** RegularExpression Id. */
  int NE = 73;
  /** RegularExpression Id. */
  int SC_OR = 74;
  /** RegularExpression Id. */
  int SC_AND = 75;
  /** RegularExpression Id. */
  int INCR = 76;
  /** RegularExpression Id. */
  int DECR = 77;
  /** RegularExpression Id. */
  int PLUS = 78;
  /** RegularExpression Id. */
  int MINUS = 79;
  /** RegularExpression Id. */
  int STAR = 80;
  /** RegularExpression Id. */
  int SLASH = 81;
  /** RegularExpression Id. */
  int BIT_AND = 82;
  /** RegularExpression Id. */
  int BIT_OR = 83;
  /** RegularExpression Id. */
  int XOR_OP = 84;
  /** RegularExpression Id. */
  int REM = 85;
  /** RegularExpression Id. */
  int LSHIFT = 86;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 87;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 88;
  /** RegularExpression Id. */
  int PLUSASSIGN = 89;
  /** RegularExpression Id. */
  int MINUSASSIGN = 90;
  /** RegularExpression Id. */
  int STARASSIGN = 91;
  /** RegularExpression Id. */
  int SLASHASSIGN = 92;
  /** RegularExpression Id. */
  int ANDASSIGN = 93;
  /** RegularExpression Id. */
  int ORASSIGN = 94;
  /** RegularExpression Id. */
  int XORASSIGN = 95;
  /** RegularExpression Id. */
  int REMASSIGN = 96;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 97;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 98;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 99;
  /** RegularExpression Id. */
  int USCORE = 100;
  /** RegularExpression Id. */
  int ALPHA = 101;
  /** RegularExpression Id. */
  int ID = 102;
  /** RegularExpression Id. */
  int INT = 103;
  /** RegularExpression Id. */
  int FLOAT = 104;
  /** RegularExpression Id. */
  int STRING = 105;
  /** RegularExpression Id. */
  int EOL = 106;
  /** RegularExpression Id. */
  int DATATYPE = 107;
  /** RegularExpression Id. */
  int NAME = 108;
  /** RegularExpression Id. */
  int SPACENAME = 109;
  /** RegularExpression Id. */
  int IDENTIFIER = 110;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 6>",
    "<COMENTARIO_INICIAL>",
    "<COMENTARIO_LINHA>",
    "\"and\"",
    "\"case\"",
    "\"do\"",
    "\"end\"",
    "\"export\"",
    "\"global\"",
    "\"include\"",
    "\"not\"",
    "\"public\"",
    "\"switch\"",
    "\"until\"",
    "\"xor\"",
    "\"as\"",
    "\"constant\"",
    "\"else\"",
    "\"entry\"",
    "\"fallthru\"",
    "\"goto\"",
    "\"label\"",
    "\"or\"",
    "\"retry\"",
    "\"then\"",
    "\"while\"",
    "\"break\"",
    "\"continue\"",
    "\"elsedef\"",
    "\"enum\"",
    "\"if\"",
    "\"loop\"",
    "\"override\"",
    "\"return\"",
    "\"to\"",
    "\"with\"",
    "\"by\"",
    "\"deprecate\"",
    "\"elsif\"",
    "\"exit\"",
    "\"function\"",
    "\"ifdef\"",
    "\"namespace\"",
    "\"procedure\"",
    "\"routine\"",
    "\"type\"",
    "\"without\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"\\\"\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"_\"",
    "<ALPHA>",
    "<ID>",
    "<INT>",
    "<FLOAT>",
    "<STRING>",
    "\"\\n\"",
    "<DATATYPE>",
    "<NAME>",
    "<SPACENAME>",
    "<IDENTIFIER>",
  };

}
