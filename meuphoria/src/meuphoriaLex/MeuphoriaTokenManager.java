/* MeuphoriaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MeuphoriaTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class MeuphoriaTokenManager implements MeuphoriaConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2000000000L) != 0L)
            return 84;
         if ((active0 & 0x3eff5fdfb6f800L) != 0L)
         {
            jjmatchedKind = 102;
            return 84;
         }
         if ((active0 & 0x400400L) != 0L)
         {
            jjmatchedKind = 102;
            return 17;
         }
         if ((active0 & 0x8020000000L) != 0L)
         {
            jjmatchedKind = 102;
            return 38;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 102;
            return 32;
         }
         if ((active0 & 0x1002000010000L) != 0L)
         {
            jjmatchedKind = 102;
            return 24;
         }
         if ((active1 & 0x8014000L) != 0L)
            return 5;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 85;
         return -1;
      case 1:
         if ((active1 & 0x4000L) != 0L)
            return 86;
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 1;
            }
            return 23;
         }
         if ((active0 & 0x3ef5dfdfbeec00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 1;
            }
            return 87;
         }
         if ((active0 & 0x10a2020401000L) != 0L)
            return 87;
         return -1;
      case 2:
         if ((active0 & 0x222400L) != 0L)
            return 88;
         if ((active0 & 0x3ff5dfdf9dc800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 2;
            }
            return 88;
         }
         return -1;
      case 3:
         if ((active0 & 0x30445889000800L) != 0L)
            return 89;
         if ((active0 & 0xfb187569dc000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 108;
               jjmatchedPos = 3;
            }
            return 89;
         }
         return -1;
      case 4:
         if ((active0 & 0x2e918c048dc000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 4;
            return 90;
         }
         if ((active0 & 0x1200352100000L) != 0L)
            return 90;
         return -1;
      case 5:
         if ((active0 & 0x2e908c04810000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
            return 91;
         }
         if ((active0 & 0x100000cc000L) != 0L)
            return 91;
         return -1;
      case 6:
         if ((active0 & 0x6908404800000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
            return 92;
         }
         if ((active0 & 0x28000800010000L) != 0L)
            return 92;
         return -1;
      case 7:
         if ((active0 & 0x6100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 7;
            return 93;
         }
         if ((active0 & 0x808404800000L) != 0L)
            return 93;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 34:
         return jjStartNfaWithStates_0(0, 63, 85);
      case 37:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 38:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40001000L);
      case 40:
         return jjStopAtPos(0, 54);
      case 41:
         return jjStopAtPos(0, 55);
      case 42:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 43:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4002000L);
      case 44:
         return jjStopAtPos(0, 61);
      case 45:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8004000L);
      case 46:
         return jjStopAtPos(0, 62);
      case 47:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x20000000L);
      case 58:
         return jjStopAtPos(0, 70);
      case 59:
         return jjStopAtPos(0, 60);
      case 60:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400800100L);
      case 61:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 62:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1803000200L);
      case 63:
         return jjStopAtPos(0, 69);
      case 91:
         return jjStopAtPos(0, 58);
      case 93:
         return jjStopAtPos(0, 59);
      case 94:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 101, 84);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400400L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80200000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400800800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000001000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x601803006000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800004000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8008000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1002000010000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4010000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000000020000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8020000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4000000040000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8010040000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10020080000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20040100000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 56);
      case 124:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000800L);
      case 125:
         return jjStopAtPos(0, 57);
      case 126:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 43:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 86);
         break;
      case 60:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L);
      case 61:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 62:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1802000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000014000800L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x110040000000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20040000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200801008000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002112400L, active1, 0L);
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 87);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 87);
         return jjMoveStringLiteralDfa2_0(active0, 0x8004408a20000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 87);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000200000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 87);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000040000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000004000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 87);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 98);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 99);
         break;
      case 62:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 88);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 88);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8280000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800400800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000008000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10100000004000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 88);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200801000800L, active1, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 88);
         return jjMoveStringLiteralDfa3_0(active0, 0x2005004a100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 100);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4800000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 89);
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000810000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000100000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x104050000L, active1, 0L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 89);
         break;
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 89);
         break;
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      case 112:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 89);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x108042000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000400080000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 90);
         return jjMoveStringLiteralDfa5_0(active0, 0x4100000000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 90);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 90);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400040000L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 90);
         break;
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 90);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 90);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000004000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x800004800000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 90);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 90);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 91);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000010000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 104:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 91);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x808000000000L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 91);
         break;
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 91);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000400000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 91);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2100000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 92);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 92);
         break;
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 92);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 92);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000400000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 93);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 93);
         break;
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 93);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 93);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 117:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 94);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 94);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 84;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 92:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 88:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 32:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 24:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 90:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 89:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 38:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 23:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(404, 431); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 87:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(404, 431); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 91:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(432, 435); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(13, 14); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 35)
                     { jjCheckNAddStates(436, 438); }
                  break;
               case 94:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 93:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  else if (curChar == 58)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 86:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(439, 441); }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 84:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 85:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  if (curChar == 34)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  break;
               case 17:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(436, 438); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 45)
                     { jjCheckNAddStates(439, 441); }
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(439, 441); }
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 12:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 13:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if (curChar == 34 && kind > 106)
                     kind = 106;
                  break;
               case 41:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 44:
                  if (curChar == 58 && kind > 109)
                     kind = 109;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(404, 431); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(432, 435); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(79, 80); }
                  break;
               case 80:
                  if (kind > 104)
                     kind = 104;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(81, 82); }
                  break;
               case 82:
                  if (curChar == 46)
                     { jjCheckNAdd(83); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAdd(83); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(404, 431); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 87:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(404, 431); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(442, 446); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 93:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 86:
               case 6:
                  { jjCheckNAddStates(439, 441); }
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 85:
               case 13:
                  { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 108)
                        kind = 108;
                     { jjCheckNAdd(42); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 1:
                  { jjAddStates(436, 438); }
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 102)
                     kind = 102;
                  break;
               case 15:
                  if (curChar == 109 && kind > 107)
                     kind = 107;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 114 && kind > 107)
                     kind = 107;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 101 && kind > 107)
                     kind = 107;
                  break;
               case 27:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 116 && kind > 107)
                     kind = 107;
                  break;
               case 35:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(442, 446); }
                  break;
               case 41:
                  if ((0xf800000178000001L & l) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(48); }
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  { jjCheckNAdd(48); }
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(375, 403); }
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(50, 41); }
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 272); }
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(266, 269); }
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(261, 265); }
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 260); }
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(248, 254); }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(240, 247); }
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(231, 239); }
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(221, 230); }
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(210, 220); }
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(198, 209); }
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(185, 197); }
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(171, 184); }
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(156, 170); }
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 155); }
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(123, 139); }
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(105, 122); }
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(86, 104); }
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(66, 85); }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(45, 65); }
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(23, 44); }
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(0, 22); }
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(351, 374); }
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(326, 350); }
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(300, 325); }
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(273, 299); }
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(404, 431); }
                  break;
               case 80:
                  if ((0xf800000178000001L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 92:
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 88:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 90:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 89:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 87:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 91:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 94:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 93:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 86:
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(439, 441); }
                  break;
               case 84:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 85:
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(436, 438); }
                  break;
               case 80:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 104)
                     kind = 104;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 84 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
   65, 66, 67, 68, 69, 70, 71, 50, 41, 51, 52, 53, 54, 55, 56, 57, 
   58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 50, 41, 51, 
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 
   68, 69, 50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 
   63, 64, 65, 66, 67, 68, 50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 
   59, 60, 61, 62, 63, 64, 65, 66, 67, 50, 41, 51, 52, 53, 54, 55, 
   56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 50, 41, 51, 52, 53, 
   54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 50, 41, 51, 52, 
   53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 50, 41, 51, 52, 
   53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 50, 41, 51, 52, 53, 
   54, 55, 56, 57, 58, 59, 60, 61, 62, 50, 41, 51, 52, 53, 54, 55, 
   56, 57, 58, 59, 60, 61, 50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 
   59, 60, 50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 59, 50, 41, 51, 
   52, 53, 54, 55, 56, 57, 58, 50, 41, 51, 52, 53, 54, 55, 56, 57, 
   50, 41, 51, 52, 53, 54, 55, 56, 50, 41, 51, 52, 53, 54, 55, 50, 
   41, 51, 52, 53, 54, 50, 41, 51, 52, 53, 50, 41, 51, 52, 50, 41, 
   51, 50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
   64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 50, 41, 51, 52, 
   53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
   69, 70, 71, 72, 73, 74, 50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 
   59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 50, 
   41, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
   66, 67, 68, 69, 70, 71, 72, 50, 41, 51, 52, 53, 54, 55, 56, 57, 
   58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 
   74, 75, 76, 77, 50, 41, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
   61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 
   79, 80, 81, 82, 1, 2, 4, 6, 7, 9, 41, 42, 43, 45, 49, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\141\156\144", 
"\143\141\163\145", "\144\157", "\145\156\144", "\145\170\160\157\162\164", 
"\147\154\157\142\141\154", "\151\156\143\154\165\144\145", "\156\157\164", "\160\165\142\154\151\143", 
"\163\167\151\164\143\150", "\165\156\164\151\154", "\170\157\162", "\141\163", 
"\143\157\156\163\164\141\156\164", "\145\154\163\145", "\145\156\164\162\171", 
"\146\141\154\154\164\150\162\165", "\147\157\164\157", "\154\141\142\145\154", "\157\162", 
"\162\145\164\162\171", "\164\150\145\156", "\167\150\151\154\145", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\145\154\163\145\144\145\146", "\145\156\165\155", "\151\146", 
"\154\157\157\160", "\157\166\145\162\162\151\144\145", "\162\145\164\165\162\156", "\164\157", 
"\167\151\164\150", "\142\171", "\144\145\160\162\145\143\141\164\145", "\145\154\163\151\146", 
"\145\170\151\164", "\146\165\156\143\164\151\157\156", "\151\146\144\145\146", 
"\156\141\155\145\163\160\141\143\145", "\160\162\157\143\145\144\165\162\145", "\162\157\165\164\151\156\145", 
"\164\171\160\145", "\167\151\164\150\157\165\164", "\50", "\51", "\173", "\175", "\133", "\135", 
"\73", "\54", "\56", "\42", "\75", "\76", "\74", "\41", "\176", "\77", "\72", 
"\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", 
"\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", "\137", null, null, null, null, null, null, null, 
null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MeuphoriaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MeuphoriaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 84; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x7fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoMore = {
   0x200L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[84];
    private final int[] jjstateSet = new int[2 * 84];

    
    protected char curChar;
}
