/* ***********************************************
        	ANALISADOR LEXICO
    ********************************
    
	Integrantes: 
		Caio
		Diego Gomes
		Fernando
        Roberty Manzini Bertolo         7573399
		Vanessa Apolinário Lima         7239256

    Documento:
        Codigo fonte

	Nome:
		MeuPhoria

*********************************************** */

/************************
        Options
************************/
options {
    STATIC = false;
}

/************************
        Inicialização do AnalisadorLexico
************************/
PARSER_BEGIN(Meuphoria)

	/* MeuPhoria Parser */
	class Meuphoria {

	  /** Main entry point. */
		public static void main(String args[]) throws ParseException, TokenMgrError {
			try
			{
				Meuphoria analisadorlexico = new Meuphoria(System.in);
				analisadorlexico.Main();
				System.out.println("Analisado com sucesso!");
			}
			catch(ParseException e)
			{
				System.out.println(e.getMessage());
	   			System.out.println("Ocorreu uma excecao!");
			}
			catch(TokenMgrError e)
			{
		   		System.out.println(e.getMessage());
				System.out.println("Existem erros no codigo! Por favor, verifica-los.");
			}
		}
	}
PARSER_END(Meuphoria)

/************************
        SKIP
************************/
SKIP : { " " | "\t" | "\n" | "\r" }

/************************
        TOKENS
************************/
TOKEN : { <ALPHA: ["a"-"z","A"-"Z"]> } 	// 1 - ALPHA
TOKEN : { <DIGIT: (["0"-"9"])+ > } 		// 2 - DIGIT
TOKEN : { <USCORE: "_"> } 				// 3 - USCORE
TOKEN : { <EOL: "\n"> } 				// 4 - EOL
TOKEN : { <NAME : (<ALPHA>|<USCORE>) {ALPHA|DIGIT|USCORE}> } 		// 5 - NAME
TOKEN : { <SPACENAME = NAME":"> } 		// 6 - SPACENAME
TOKEN : { <IDENTIFIER = [SPACENAME] NAME> }			 		// 7 - IDENTIFIER
TOKEN : { <ATOM = ATOM_INTEGER_LIT | ATOM_REAL_LIT> } 		// 8 - ATOM
TOKEN : { <ATOM_INTEGER_LIT = "-253"-"+253" | "-9.007e15"-"+9.007e15"> } 					// 9 - ATOM_INTEGER_INT - acho que está certo
TOKEN : { <ATOM_REAL_LIT = "-21024+1"-"+21024-1" | "-1.798e308+1"-"+1.798e308-1"> } 		// 10 - ATOM_REAL_LIT - acho que está certo
TOKEN : { <INTEGER = INTEGER_LIT> } 		// 11
TOKEN : { <INTEGER_LIT = "-230"-"+230-1" | "-1_073_741_824"-"+1_073_741_823"> } 		// 12
TOKEN : { <SEQUENCE = "{"{HEADITEM}(ITEM|LASTITEM) )"}"> } 		// 13
TOKEN : { <object = atom8 | integer11 | sequence13> } 		// 14
TOKEN : { <expression = atomexpr16 | intexpr17 | strexpr18 | seqexpr19 | boolexpr21> } 		// 15
TOKEN : { <atomexpr = atom8> } 		// 16
TOKEN : { <intexpr = integer11> } 		// 17
TOKEN : { <strexpr = "an_expression_that_evaluates_to_a_string"> } 		// 18
TOKEN : { <seqexpr = sequence13> } 		// 19
TOKEN : { <bool_lit = "0" | "1" | "0" | "!0"> } 		// 20

TOKEN : { <boolexpr = "atom_zero_represents_falsehood_and_non-zero_represents_truth"> } 	// 21 - 
TOKEN : { <relationop = "<" | ">" | "<=" | ">=" | "=" | "!="> } 	// 22 - 
TOKEN : { <binaryexpr = { expression15 binop24 expression15 }> } 	// 23 - 
TOKEN : { <binop = "and" | "or" | "xor" | "+" | "-" | "*" | "/" | "&"> } 	// 24 - 
TOKEN : { <unaryexpr = { unaryop26 expression15 }> } 	// 25 - 
TOKEN : { <unaryop = "not" | "-" | "+"> } 	// 26 - 
// 27 - RETIRADO DA GRAMATICA
TOKEN : { <headitem = object14 "," > } 	// 28 - 
TOKEN : { <item = object14> } 	// 29 - 
TOKEN : { <lastitem = "$"> } 	// 30 - 
TOKEN : { <statement = "complete_unit_of_code_executed_by_the_interpreter"> } 	// 31 - 
TOKEN : { <stmblk = statement31 { statement31 }> } 	// 32 - 
TOKEN : { <label = "label" stringlit35> } 	// 33 - 
TOKEN : { <listdelim = ","> } 	// 34 - 
TOKEN : { <stringlit = simplestringlit36 | rawstringlit42> } 	// 35 - 
TOKEN : { <simplestringlit = sslitstart37 { char39 | escchar40 } sslitend38> } 	// 36 - 
TOKEN : { <sslitstart = "\""> } 	// 37 - 
TOKEN : { <sslitend = "\""> } 	// 38 - 
TOKEN : { <char = "any_byte_value"> } 	// 39 - 
TOKEN : { <escchar = esclead41 ( "t" | "n" | "r" | " " )> } 	// 40 - 
TOKEN : { <esclead = ""> } 	// 41 - 
TOKEN : { <rawstringlit = dqrawstring43 | bqrawstring44> } 	// 42 - 
TOKEN : { <dqrawstring = "\"\"\"" [ marginstr45 ] { char39 } "\"\"\""> } 	// 43 - 
TOKEN : { <bqrawstring = "`" [ marginstr45 ] { char39 } "`"> } 	// 44 -
TOKEN : { <marginstr = "_"> } 	// 45 -  
TOKEN : { <scopemodifier = "global" | "public" | "export" | "override"> } 	// 46 - 
TOKEN : { <datatype = "atom" | "integer" | "sequence" | "object" | identifier7> } 	// 47 - 
TOKEN : { <includestmt = "include" fileref49 [ "as" namespaceid50 ] eol4> } 	// 48 - 
TOKEN : { <fileref = "file_path_that_may_be_enclosed_in_double-quotes"> } 	// 49 -
TOKEN : { <namespaceid = identifier7> } 	// 50 -

TOKEN : { <slice = slicestart52 intexpr17 slicedelim53 ( intexpr17 | "$" ) sliceend54> } 	// 51 -  
TOKEN : { <slicestart = "["> } 	// 52 -  
TOKEN : { <slicedelim = ".."> } 	// 53 -  
TOKEN : { <sliceend = "]"> } 	// 54 -  
TOKEN : { <ifstmt = iftest56 { elsif57 } [ else58 ] endif59> } 	// 55 -  
TOKEN : { <iftest = "if" atomexpr16 [ label33 ] "then" [ stmblk32 ]> } 	// 56 -    
TOKEN : { <elsif = "elsif" atomexpr16 "then" [ stmblk32 ]> } 	// 57 -  
TOKEN : { <else = "else" [ stmblk32 ]> } 	// 58 -  
TOKEN : { <endif = "end" "if"> } 	// 59 -  
TOKEN : { <ifdefstmt = ifdeftest61 [ elsdefif62 { char39 } ] [ elsedef63 ] enddefif64> } 	// 60 -  
TOKEN : { <ifdeftest = "ifdef" defexpr65 "then" [ stmblk32 ]> } 	// 61 -  
TOKEN : { <elsdefif = "elsifedf" defexpr65 "then" [ stmblk32 ]> } 	// 62 -    
TOKEN : { <elsedef = "elsede" [stmblk]"> } 	// 63 -  
TOKEN : { <enddefif = "end" "ifdef"> } 	// 64 -  
TOKEN : { <defexpr = defterm66 [ defop67 defterm66 ]> } 	// 65 -  
TOKEN : { <defterm = [ "not" identifier7 ]> } 	// 66 -  
TOKEN : { <defop = "and" | "or"> } 	// 67 -  
TOKEN : { <switchstmt = switchtest69 case71 { case71 } [ caseelse73 ] [ endswitch74 ]> } 	// 68 -    
TOKEN : { <switchtest = "switch" expression15 [ withfall70 ] [ label33 ] "do"> } 	// 69 -  
TOKEN : { <withfall = ( "with" | "without" ) "fallthru"> } 	// 70 -  
TOKEN : { <case = "case" caselist72 "then" [ stmblk32 ]> } 	// 71 -  
TOKEN : { <caselist = expression15 { listdelim34 expression15 }> } 	// 72 -  
TOKEN : { <caseelse = "case" "else"> } 	// 73 -  
TOKEN : { <endswitch = "end" "switch"> } 	// 74 -    
TOKEN : { <breakstmt = "break" [ stringlit35 ]> } 	// 75 -  
TOKEN : { <continuestmt = "continue" [ stringlit35 ]> } 	// 76 -  
TOKEN : { <retrystmt = "retry" [ stringlit35 ]> } 	// 77 -  
TOKEN : { <exitstmt = "exit" [ stringlit35 ]> } 	// 78 -  
TOKEN : { <fallthrustmt = "fallthru"> } 	// 79 -  
TOKEN : { <forstmt = "for" foridx81 [ label33 ] "do" [ stmblk32 ] "end" "for"> } 	// 80 -    
TOKEN : { <foridx = identifier7 "=" atomexpr16 "to" atomexpr16 [ "by" atomexpr16 ]> } 	// 81 -  
TOKEN : { <whilestmt = "while" boolexpr21 [ withentry83 ] [ label33 ] "do" stmblk32 [ entry84 ] "end" "while"> } 	// 82 -  
TOKEN : { <withentry = "with" "entry"> } 	// 83 -  
TOKEN : { <entry = "entry" [ stmblk32 ]> } 	// 84 -  
TOKEN : { <loopstmt = "loop" [ withentry83 ] [ label33 ] "do" stmblk32 [ entry84 ] "until" boolexpr21 "end" "loop"> } 	// 85 -  
TOKEN : { <gotostmt = "goto" label33> } 	// 86 -
TOKEN : { <vardeclare = [ scopemodifier46 ] datatype47 identlist88> } 	// 87 -        
TOKEN : { <identlist = ident89 [ "," identlist88 ]> } 	// 88 -        
TOKEN : { <ident = identifier7 [ "=" expression15 ]> } 	// 89 -
TOKEN : { <constdeclare = [ scopemodifier46 ] "constant" identlist88> } 	// 90 -                
TOKEN : { <enumdeclare = [ scopemodifier46 ] [ enumval92 | enumtype94 ]> } 	// 91 -                
TOKEN : { <enumval = "enum" [ "by" enumdelta93 ] identlist88> } 	// 92 -                
TOKEN : { <enumdelta = [ "+" | "-" | "*" | "/" ] atomexpr16> } 	// 93 -                
TOKEN : { <enumtype = "enum" "type" [ "by" enumdelta93 ] identlist88 "end" "type"> } 	// 94 -                
TOKEN : { <call = identifier7 "(" [ arglist96 ] ")"> } 	// 95 -                
TOKEN : { <arglist = argument97 [ "," arglist96 ]> } 	// 96 -                
TOKEN : { <argument = expression15> } 	// 97 -                
TOKEN : { <procdeclare = [ scopemodifier46 ] "procedure" identifier7 "(" [ paramlist99 ] ")" [ stmblk32 ] "end" "procedure"> } 	// 98 -                
TOKEN : { <paramlist = parameter100 [ "," paramlist99 ]> } 	// 99 -
TOKEN : { <parameter = datatype47 identifier7> } 	// 100 -

TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -
TOKEN : { <> } 	// 101 -








  
  
  
}




/************************

Não comecei esssa parte aindaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, é só para ter a ideia, é beeeem de boa, só crtl+c, ctrl+v no token, e mudar o sysout blz?




/************************
        MAIN
************************/
void Main():
{
	Token t;
}
{
	(
    /************ GERAIS ************/
      t = <EOL>         { System.out.println("@("+t.beginLine+","+t.beginColumn+") EOL:\t"+t.toString());}

    /************ COMANDOS ************/

	| t = <WARRANTY>    { System.out.println("@("+t.beginLine+","+t.beginColumn+") WARRANTY:\t"+t.toString());}
    | t = <LIMITS>      { System.out.println("@("+t.beginLine+","+t.beginColumn+") LIMITS:\t"+t.toString());}
    | t = <BREAK>       { System.out.println("@("+t.beginLine+","+t.beginColumn+") BREAK:\t"+t.toString());}
    | t = <CONTINUE>    { System.out.println("@("+t.beginLine+","+t.beginColumn+") CONTINUE:\t"+t.toString());}
    | t = <QUIT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") QUIT:\t"+t.toString());}
    | t = <HALT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") HALT:\t"+t.toString());}
    | t = <RETURN>      { System.out.println("@("+t.beginLine+","+t.beginColumn+") RETURN:\t"+t.toString());}
    | t = <FOR>         { System.out.println("@("+t.beginLine+","+t.beginColumn+") FOR:\t"+t.toString());}
    | t = <IF>          { System.out.println("@("+t.beginLine+","+t.beginColumn+") IF:\t"+t.toString());}
    | t = <WHILE>       { System.out.println("@("+t.beginLine+","+t.beginColumn+") WHILE:\t"+t.toString());}
    | t = <PRINT>       { System.out.println("@("+t.beginLine+","+t.beginColumn+") PRINT:\t"+t.toString());}
    | t = <ELSE>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ELSE:\t"+t.toString());}

/***********
DEFINICAO DE FUNCAO
***********/
    | t = <DEFINE>      { System.out.println("@("+t.beginLine+","+t.beginColumn+") DEFINE:\t"+t.toString());}

/***********
EXPRESSOES GERAIS
***********/
    | t = <VIRGULA>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") VIRGULA:\t"+t.toString());}
    | t = <PARENTESESESQ>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") PARENTESESESQ:\t"+t.toString());}
    | t = <PARENTESESDIR>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") PARENTESESDIR:\t"+t.toString());}
    | t = <COLCHETESESQ>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") COLCHETESESQ:\t"+t.toString());}
    | t = <COLCHETESDIR>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") COLCHETESDIR:\t"+t.toString());}
    | t = <CHAVESESQ>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") CHAVESESQ:\t"+t.toString());}
    | t = <CHAVESDIR>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") CHAVESDIR:\t"+t.toString());}
    | t = <PONTOEVIRGULA>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") PONTOEVIRGULA:\t"+t.toString());}
    | t = <PONTO>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") PONTO:\t"+t.toString());}
    | t = <UNDERLINE>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") UNDERLINE:\t"+t.toString());}

/*********** Palavras reservadas ***********/
//unary_exp
    | t = <LENGHT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") LENGHT:\t"+t.toString());}
    | t = <SQRT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") SQRT:\t"+t.toString());}
    | t = <SCALE>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") SCALE:\t"+t.toString());}
    | t = <READ>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") READ:\t"+t.toString());}

//named_expression
    | t = <IBASE>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") IBASE:\t"+t.toString());}
    | t = <OBASE>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") OBASE:\t"+t.toString());}
    | t = <LAST>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") LAST:\t"+t.toString());}

//opt_auto_define_list
    | t = <AUTO>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") AUTO:\t"+t.toString());}

/*********** OPERADORES ***********/
// expression, and_exp, not_exp, 
    | t = <OU>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") OU:\t"+t.toString());}
    | t = <E>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") E:\t"+t.toString());}
    | t = <NOT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") NOT:\t"+t.toString());}

// rel_op
    | t = <MAIOR>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") MAIOR:\t"+t.toString());}
    | t = <MAIORIGUAL>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") MAIORIGUAL:\t"+t.toString());}
    | t = <MENOR>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") MENOR:\t"+t.toString());}
    | t = <MENORIGUAL>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") MENORIGUAL:\t"+t.toString());}
    | t = <COMPARACAO>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") COMPARACAO:\t"+t.toString());}
    | t = <DIFERENTE>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") DIFERENTE:\t"+t.toString());}


// assign_op
    | t = <ATRIBUICAO>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAO:\t"+t.toString());}
    | t = <ATRIBUICAOSOMA>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOSOMA:\t"+t.toString());}
    | t = <ATRIBUICAOSUB>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOSUB:\t"+t.toString());}
    | t = <ATRIBUICAOMULT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOMULT:\t"+t.toString());}
    | t = <ATRIBUICAODIV>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAODIV:\t"+t.toString());}
    | t = <ATRIBUICAOMOD>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOMOD:\t"+t.toString());}
    | t = <ATRIBUICAOPOT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOPOT:\t"+t.toString());}

// add_op
    | t = <ADD>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ADD:\t"+t.toString());}
    | t = <SUB>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") SUB:\t"+t.toString());}

// mul_op
    | t = <MULT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") MULT:\t"+t.toString());}
    | t = <DIV>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") DIV:\t"+t.toString());}
    | t = <RESTO>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") RESTO:\t"+t.toString());}

// incr_decr_op
    | t = <INCREMENTO>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") INCREMENTO:\t"+t.toString());}
    | t = <DECREMENTO>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") DECREMENTO:\t"+t.toString());}

// power_exp
    | t = <POTENCIA>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") POTENCIA:\t"+t.toString());}

/**** NOMES GERAIS ****/
    | t = <LETRAS>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") LETRAS:\t"+t.toString());}
    | t = <DIGITOS>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") DIGITOS:\t"+t.toString());}
    | t = <CARACTERES>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") CARACTERES:\t"+t.toString());}
    | t = <STRING>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") STRING:\t"+t.toString());}
    | t = <IDENTIFICADOR>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") IDENTIFICADOR:\t"+t.toString());}

    /************ TERMINAL ************/
	| t = <EOF>{return;}
)*
}
}
