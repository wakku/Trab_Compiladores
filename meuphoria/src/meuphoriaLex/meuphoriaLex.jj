/* ***********************************************
ANALISADOR LEXICO
********************************

Integrantes: 
Caio Gomes                      7239072
Diego Gomes                     7656467
Fernando Cury Gorodscy			    7152354
Roberty Manzini Bertolo         7573399
Vanessa Apolinário Lima         7239256

Documento:
Codigo fonte

Nome:
MeuPhoria

/************************
Options
************************/
options {
  STATIC = false;
}

/************************
Inicialização do AnalisadorLexico
************************/
PARSER_BEGIN(Meuphoria)

/* MeuPhoria Parser */
class Meuphoria {

  public void processa()  {
    Token t;
    while (true) {
      try {
        t = getNextToken();
        String nomeToken = tokenImage[t.kind];
        System.out.println( " Line: " + t.beginLine + "  Column: " + t.beginColumn + "   " + nomeToken + " " + t.image );
        if(nomeToken.equals("<EOF>"))break;
      } 
      catch (Exception e) {
        System.out.print("Erro: ");
        System.out.println(e.getMessage());
                  
      }
    }
  }


  /** Main entry point. */
  public static void main(String args[]) throws /*ParseException,*/ TokenMgrError {
    try
    {
      Meuphoria analisadorlexico = new Meuphoria(System.in);
      //analisadorlexico.Main();
      analisadorlexico.processa();
      System.out.println("Analisado com sucesso!");
    }
    /*catch(ParseException e)
    {
        System.out.println(e.getMessage());
        System.out.println("Ocorreu uma excecao!");
    }*/
    catch(TokenMgrError e)
    {
        System.out.println(e.getMessage());
        System.out.println("Existem erros no codigo! Por favor, verifica-los.");
    }
  }
}
PARSER_END(Meuphoria)

/************************
SKIP
************************/
SKIP : { " " | "\t" | "\r" | "\n" }

/************************
        TOKENS
************************/

/* Skip Comentários de bloco */

SKIP :
{
  "/*" : WithinComment
  | <COMENTARIO_INICIAL : "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <COMENTARIO_LINHA: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}

/* Palavras Reservadas */
TOKEN : {
    <AND : "and">
  | <CASE : "case">
  | <DO : "do">
  | <END : "end">
  | <EXPORT : "export">
  | <GLOBAL : "global">
  | <INCLUDE : "include">
  | <NOT : "not">
  | <PUBLIC : "public">
  | <SWITCH : "switch">
  | <UNTIL : "until">
  | <XOR : "xor">
  | <AS : "as">
  | <CONSTANT : "constant">
  | <ELSE : "else">
  | <ENTRY : "entry">
  | <FALLTHRU : "fallthru">
  | <GOTO : "goto">
  | <LABEL : "label">
  | <OR : "or">
  | <RETRY : "retry">
  | <THEN : "then">
  | <WHILE : "while">
  | <BREAK : "break">
  | <CONTINUE : "continue">
  | <ELSEDEF : "elsedef">
  | <ENUM : "enum">
  | <IF : "if">
  | <LOOP : "loop">
  | <OVERRIDE : "override">
  | <RETURN : "return">
  | <TO : "to">
  | <WITH : "with">
  | <BY : "by">
  | <DEPRECATE : "deprecate">
  | <ELSIF : "elsif">
  | <EXIT : "exit">
  | <FUNCTION : "function">
  | <IFDEF : "ifdef">
  | <NAMESPACE : "namespace">
  | <PROCEDURE : "procedure">
  | <ROUTINE : "routine">
  | <TYPE : "type">
  | <WITHOUT : "without">
}

/* Separadores */
TOKEN : { 
    <LPAREN: "(" >
  | <RPAREN: ")" >
  | <LBRACE: "{" >
  | <RBRACE: "}" >
  | <LBRACKET: "[" >
  | <RBRACKET: "]" >
  | <SEMICOLON: ";" >
  | <COMMA: "," >
  | <DOT: "." >
  | <QUOTE: "\"">
}

/* Operadores */
// ESTA COPIADO DO JAVA, PRECISA COLOCAR DE ACORDO COM O EUPHORIA
TOKEN : {
    <ASSIGN: "=" >
  | <GT: ">" >
  | <LT: "<" >
  | <BANG: "!" >
  | <TILDE: "~" >
  | <HOOK: "?" >
  | <COLON: ":" >
  | <EQ: "==" >
  | <LE: "<=" >
  | <GE: ">=" >
  | <NE: "!=" >
  | <SC_OR: "||" >
  | <SC_AND: "&&" >
  | <INCR: "++" >
  | <DECR: "--" >
  | <PLUS: "+" >
  | <MINUS: "-" >
  | <STAR: "*" >
  | <SLASH: "/" >
  | <BIT_AND: "&" >
  | <BIT_OR: "|" >
  | <XOR_OP: "^" >
  | <REM: "%" >
  | <LSHIFT: "<<" >
  | <RSIGNEDSHIFT: ">>" >
  | <RUNSIGNEDSHIFT: ">>>" >
  | <PLUSASSIGN: "+=" >
  | <MINUSASSIGN: "-=" >
  | <STARASSIGN: "*=" >
  | <SLASHASSIGN: "/=" >
  | <ANDASSIGN: "&=" >
  | <ORASSIGN: "|=" >
  | <XORASSIGN: "^=" >
  | <REMASSIGN: "%=" >
  | <LSHIFTASSIGN: "<<=" >
  | <RSIGNEDSHIFTASSIGN: ">>=" >
  | <RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


TOKEN : { <USCORE: "_"> }
TOKEN : { <ALPHA: ["a"-"z","A"-"Z"]> }
//TOKEN : { <DIGITO: ["0"-"9"] > }

/* Identificador */
TOKEN : { <ID : (<ALPHA>|<USCORE>)(<ALPHA>|<USCORE>|["0"-"9"])* > }

/* Inteiro */
TOKEN : { <INT : (["0"-"9"])+ > }

/* Float */
TOKEN : { <FLOAT : (["0"-"9"])+ <DOT> (["0"-"9"])+ > }

/* String */
TOKEN : { <STRING : <QUOTE>(~["\n","\r"])* <QUOTE> > }



// Fim de linha
// TOKEN : { <EOL: "\n"> } // Skipped


//TOKEN : { <SCOPEMODIFIER : <GLOBAL> | <PUBLIC> | <EXPORT> | <OVERRIDE> > }   
TOKEN : { <DATATYPE : "atom" | "integer" | "sequence" | "object" > }



TOKEN : { <NAME : (<ALPHA>|<USCORE>) (<ALPHA>|["0"-"9"]|<USCORE>)+ > }        // 5 - NAME
TOKEN : { <SPACENAME : <NAME>":"> }       // 6 - SPACENAME
TOKEN : { <IDENTIFIER : <SPACENAME> <NAME> > }                 // 7 - IDENTIFIER


/* THE CODE HAS TO BE CHANGED FROM THIS POINT ON */


/************************
          MAIN
************************/
void Main():
{
  Token t;
}
{
  (
    /************ GERAIS ************/
    //t = <EOL>         { System.out.println("@ EOL:\t"+t.toString());}

    /************ VARIAVEIS ************/

      t = <ID>                    { System.out.println("@("+t.beginLine+","+t.beginColumn+") ID:\t"+t.toString());}
    | t = <INT>                   { System.out.println("@("+t.beginLine+","+t.beginColumn+") INT:\t"+t.toString());}
    | t = <FLOAT>                 { System.out.println("@("+t.beginLine+","+t.beginColumn+") FLOAT:\t"+t.toString());}
    | t = <STRING>                { System.out.println("@("+t.beginLine+","+t.beginColumn+") STRING:\t"+t.toString());}

    /************ PALAVRAS RESERVADAS ************/
    | t = <CONSTANT>      { System.out.println("@("+t.beginLine+","+t.beginColumn+") CONSTANT:\t"+t.toString());}
    | t = <ENUM>          { System.out.println("@("+t.beginLine+","+t.beginColumn+") ENUM:\t"+t.toString());}

    /************ SEPARADORES ************/
    | t = <COMMA>       { System.out.println("@("+t.beginLine+","+t.beginColumn+") COMMA:\t"+t.toString());}
    | t = <LPAREN>      { System.out.println("@("+t.beginLine+","+t.beginColumn+") LPAREN:\t"+t.toString());}
    | t = <RPAREN>      { System.out.println("@("+t.beginLine+","+t.beginColumn+") RPAREN:\t"+t.toString());}

    /************ OPERADORES ************/
    | t = <ASSIGN>                { System.out.println("@("+t.beginLine+","+t.beginColumn+") ASSIGN:\t"+t.toString());}


    | t = <RETURN>                { System.out.println("@("+t.beginLine+","+t.beginColumn+") RETURN:\t"+t.toString());}

    /*
    | t = <LIMITS>      { System.out.println("@("+t.beginLine+","+t.beginColumn+") LIMITS:\t"+t.toString());}
    | t = <BREAK>       { System.out.println("@("+t.beginLine+","+t.beginColumn+") BREAK:\t"+t.toString());}
    | t = <CONTINUE>    { System.out.println("@("+t.beginLine+","+t.beginColumn+") CONTINUE:\t"+t.toString());}
    | t = <QUIT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") QUIT:\t"+t.toString());}
    | t = <HALT>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") HALT:\t"+t.toString());}
    | t = <FOR>         { System.out.println("@("+t.beginLine+","+t.beginColumn+") FOR:\t"+t.toString());}
    | t = <IF>          { System.out.println("@("+t.beginLine+","+t.beginColumn+") IF:\t"+t.toString());}
    | t = <WHILE>       { System.out.println("@("+t.beginLine+","+t.beginColumn+") WHILE:\t"+t.toString());}
    | t = <PRINT>       { System.out.println("@("+t.beginLine+","+t.beginColumn+") PRINT:\t"+t.toString());}
    | t = <ELSE>        { System.out.println("@("+t.beginLine+","+t.beginColumn+") ELSE:\t"+t.toString());}

    */

    )*
}
