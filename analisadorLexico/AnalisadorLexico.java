/* Generated By:JavaCC: Do not edit this line. AnalisadorLexico.java */
class AnalisadorLexico implements AnalisadorLexicoConstants {
     public static void main(String[] args) throws ParseException, TokenMgrError
     {
                try
                {
                        AnalisadorLexico analisadorlexico = new AnalisadorLexico(System.in);
                        analisadorlexico.Main();
                        System.out.println("Analisado com sucesso!");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Ocorreu uma excecao!");
                }
                catch(TokenMgrError e)
                {
                System.out.println(e.getMessage());
                        System.out.println("Existem erros no codigo! Por favor, verifica-los.");
                }
         }

  final public void Main() throws ParseException {
        Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case EOL:
      case WARRANTY:
      case LIMITS:
      case BREAK:
      case CONTINUE:
      case QUIT:
      case HALT:
      case RETURN:
      case FOR:
      case IF:
      case WHILE:
      case PRINT:
      case ELSE:
      case DEFINE:
      case VIRGULA:
      case PARENTESESESQ:
      case PARENTESESDIR:
      case COLCHETESESQ:
      case COLCHETESDIR:
      case CHAVESESQ:
      case CHAVESDIR:
      case PONTOEVIRGULA:
      case PONTO:
      case UNDERLINE:
      case LENGHT:
      case SQRT:
      case SCALE:
      case READ:
      case IBASE:
      case OBASE:
      case LAST:
      case AUTO:
      case OU:
      case E:
      case NOT:
      case MAIOR:
      case MAIORIGUAL:
      case MENOR:
      case MENORIGUAL:
      case COMPARACAO:
      case DIFERENTE:
      case ATRIBUICAO:
      case ATRIBUICAOSOMA:
      case ATRIBUICAOSUB:
      case ATRIBUICAOMULT:
      case ATRIBUICAODIV:
      case ATRIBUICAOMOD:
      case ATRIBUICAOPOT:
      case ADD:
      case SUB:
      case MULT:
      case DIV:
      case RESTO:
      case INCREMENTO:
      case DECREMENTO:
      case POTENCIA:
      case LETRAS:
      case DIGITOS:
      case CARACTERES:
      case STRING:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        /************ GERAIS ************/
              t = jj_consume_token(EOL);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") EOL:\u005ct"+t.toString());
        break;
      case WARRANTY:
        t = jj_consume_token(WARRANTY);
                              System.out.println("@("+t.beginLine+","+t.beginColumn+") WARRANTY:\u005ct"+t.toString());
        break;
      case LIMITS:
        t = jj_consume_token(LIMITS);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") LIMITS:\u005ct"+t.toString());
        break;
      case BREAK:
        t = jj_consume_token(BREAK);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") BREAK:\u005ct"+t.toString());
        break;
      case CONTINUE:
        t = jj_consume_token(CONTINUE);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") CONTINUE:\u005ct"+t.toString());
        break;
      case QUIT:
        t = jj_consume_token(QUIT);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") QUIT:\u005ct"+t.toString());
        break;
      case HALT:
        t = jj_consume_token(HALT);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") HALT:\u005ct"+t.toString());
        break;
      case RETURN:
        t = jj_consume_token(RETURN);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") RETURN:\u005ct"+t.toString());
        break;
      case FOR:
        t = jj_consume_token(FOR);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") FOR:\u005ct"+t.toString());
        break;
      case IF:
        t = jj_consume_token(IF);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") IF:\u005ct"+t.toString());
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") WHILE:\u005ct"+t.toString());
        break;
      case PRINT:
        t = jj_consume_token(PRINT);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") PRINT:\u005ct"+t.toString());
        break;
      case ELSE:
        t = jj_consume_token(ELSE);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") ELSE:\u005ct"+t.toString());
        break;
      case DEFINE:
        t = jj_consume_token(DEFINE);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") DEFINE:\u005ct"+t.toString());
        break;
      case VIRGULA:
        t = jj_consume_token(VIRGULA);
                             System.out.println("@("+t.beginLine+","+t.beginColumn+") VIRGULA:\u005ct"+t.toString());
        break;
      case PARENTESESESQ:
        t = jj_consume_token(PARENTESESESQ);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") PARENTESESESQ:\u005ct"+t.toString());
        break;
      case PARENTESESDIR:
        t = jj_consume_token(PARENTESESDIR);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") PARENTESESDIR:\u005ct"+t.toString());
        break;
      case COLCHETESESQ:
        t = jj_consume_token(COLCHETESESQ);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") COLCHETESESQ:\u005ct"+t.toString());
        break;
      case COLCHETESDIR:
        t = jj_consume_token(COLCHETESDIR);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") COLCHETESDIR:\u005ct"+t.toString());
        break;
      case CHAVESESQ:
        t = jj_consume_token(CHAVESESQ);
                               System.out.println("@("+t.beginLine+","+t.beginColumn+") CHAVESESQ:\u005ct"+t.toString());
        break;
      case CHAVESDIR:
        t = jj_consume_token(CHAVESDIR);
                               System.out.println("@("+t.beginLine+","+t.beginColumn+") CHAVESDIR:\u005ct"+t.toString());
        break;
      case PONTOEVIRGULA:
        t = jj_consume_token(PONTOEVIRGULA);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") PONTOEVIRGULA:\u005ct"+t.toString());
        break;
      case PONTO:
        t = jj_consume_token(PONTO);
                           System.out.println("@("+t.beginLine+","+t.beginColumn+") PONTO:\u005ct"+t.toString());
        break;
      case UNDERLINE:
        t = jj_consume_token(UNDERLINE);
                               System.out.println("@("+t.beginLine+","+t.beginColumn+") UNDERLINE:\u005ct"+t.toString());
        break;
      case LENGHT:
        t = jj_consume_token(LENGHT);
                            System.out.println("@("+t.beginLine+","+t.beginColumn+") LENGHT:\u005ct"+t.toString());
        break;
      case SQRT:
        t = jj_consume_token(SQRT);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") SQRT:\u005ct"+t.toString());
        break;
      case SCALE:
        t = jj_consume_token(SCALE);
                           System.out.println("@("+t.beginLine+","+t.beginColumn+") SCALE:\u005ct"+t.toString());
        break;
      case READ:
        t = jj_consume_token(READ);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") READ:\u005ct"+t.toString());
        break;
      case IBASE:
        t = jj_consume_token(IBASE);
                           System.out.println("@("+t.beginLine+","+t.beginColumn+") IBASE:\u005ct"+t.toString());
        break;
      case OBASE:
        t = jj_consume_token(OBASE);
                           System.out.println("@("+t.beginLine+","+t.beginColumn+") OBASE:\u005ct"+t.toString());
        break;
      case LAST:
        t = jj_consume_token(LAST);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") LAST:\u005ct"+t.toString());
        break;
      case AUTO:
        t = jj_consume_token(AUTO);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") AUTO:\u005ct"+t.toString());
        break;
      case OU:
        t = jj_consume_token(OU);
                        System.out.println("@("+t.beginLine+","+t.beginColumn+") OU:\u005ct"+t.toString());
        break;
      case E:
        t = jj_consume_token(E);
                       System.out.println("@("+t.beginLine+","+t.beginColumn+") E:\u005ct"+t.toString());
        break;
      case NOT:
        t = jj_consume_token(NOT);
                         System.out.println("@("+t.beginLine+","+t.beginColumn+") NOT:\u005ct"+t.toString());
        break;
      case MAIOR:
        t = jj_consume_token(MAIOR);
                           System.out.println("@("+t.beginLine+","+t.beginColumn+") MAIOR:\u005ct"+t.toString());
        break;
      case MAIORIGUAL:
        t = jj_consume_token(MAIORIGUAL);
                                System.out.println("@("+t.beginLine+","+t.beginColumn+") MAIORIGUAL:\u005ct"+t.toString());
        break;
      case MENOR:
        t = jj_consume_token(MENOR);
                           System.out.println("@("+t.beginLine+","+t.beginColumn+") MENOR:\u005ct"+t.toString());
        break;
      case MENORIGUAL:
        t = jj_consume_token(MENORIGUAL);
                                System.out.println("@("+t.beginLine+","+t.beginColumn+") MENORIGUAL:\u005ct"+t.toString());
        break;
      case COMPARACAO:
        t = jj_consume_token(COMPARACAO);
                                System.out.println("@("+t.beginLine+","+t.beginColumn+") COMPARACAO:\u005ct"+t.toString());
        break;
      case DIFERENTE:
        t = jj_consume_token(DIFERENTE);
                               System.out.println("@("+t.beginLine+","+t.beginColumn+") DIFERENTE:\u005ct"+t.toString());
        break;
      case ATRIBUICAO:
        t = jj_consume_token(ATRIBUICAO);
                                System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAO:\u005ct"+t.toString());
        break;
      case ATRIBUICAOSOMA:
        t = jj_consume_token(ATRIBUICAOSOMA);
                                    System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOSOMA:\u005ct"+t.toString());
        break;
      case ATRIBUICAOSUB:
        t = jj_consume_token(ATRIBUICAOSUB);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOSUB:\u005ct"+t.toString());
        break;
      case ATRIBUICAOMULT:
        t = jj_consume_token(ATRIBUICAOMULT);
                                    System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOMULT:\u005ct"+t.toString());
        break;
      case ATRIBUICAODIV:
        t = jj_consume_token(ATRIBUICAODIV);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAODIV:\u005ct"+t.toString());
        break;
      case ATRIBUICAOMOD:
        t = jj_consume_token(ATRIBUICAOMOD);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOMOD:\u005ct"+t.toString());
        break;
      case ATRIBUICAOPOT:
        t = jj_consume_token(ATRIBUICAOPOT);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") ATRIBUICAOPOT:\u005ct"+t.toString());
        break;
      case ADD:
        t = jj_consume_token(ADD);
                         System.out.println("@("+t.beginLine+","+t.beginColumn+") ADD:\u005ct"+t.toString());
        break;
      case SUB:
        t = jj_consume_token(SUB);
                         System.out.println("@("+t.beginLine+","+t.beginColumn+") SUB:\u005ct"+t.toString());
        break;
      case MULT:
        t = jj_consume_token(MULT);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") MULT:\u005ct"+t.toString());
        break;
      case DIV:
        t = jj_consume_token(DIV);
                         System.out.println("@("+t.beginLine+","+t.beginColumn+") DIV:\u005ct"+t.toString());
        break;
      case RESTO:
        t = jj_consume_token(RESTO);
                           System.out.println("@("+t.beginLine+","+t.beginColumn+") RESTO:\u005ct"+t.toString());
        break;
      case INCREMENTO:
        t = jj_consume_token(INCREMENTO);
                                System.out.println("@("+t.beginLine+","+t.beginColumn+") INCREMENTO:\u005ct"+t.toString());
        break;
      case DECREMENTO:
        t = jj_consume_token(DECREMENTO);
                                System.out.println("@("+t.beginLine+","+t.beginColumn+") DECREMENTO:\u005ct"+t.toString());
        break;
      case POTENCIA:
        t = jj_consume_token(POTENCIA);
                              System.out.println("@("+t.beginLine+","+t.beginColumn+") POTENCIA:\u005ct"+t.toString());
        break;
      case LETRAS:
        t = jj_consume_token(LETRAS);
                            System.out.println("@("+t.beginLine+","+t.beginColumn+") LETRAS:\u005ct"+t.toString());
        break;
      case DIGITOS:
        t = jj_consume_token(DIGITOS);
                             System.out.println("@("+t.beginLine+","+t.beginColumn+") DIGITOS:\u005ct"+t.toString());
        break;
      case CARACTERES:
        t = jj_consume_token(CARACTERES);
                                System.out.println("@("+t.beginLine+","+t.beginColumn+") CARACTERES:\u005ct"+t.toString());
        break;
      case STRING:
        t = jj_consume_token(STRING);
                            System.out.println("@("+t.beginLine+","+t.beginColumn+") STRING:\u005ct"+t.toString());
        break;
      case IDENTIFICADOR:
        t = jj_consume_token(IDENTIFICADOR);
                                   System.out.println("@("+t.beginLine+","+t.beginColumn+") IDENTIFICADOR:\u005ct"+t.toString());
        break;
      case 0:
        t = jj_consume_token(0);
                    {if (true) return;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public AnalisadorLexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe1,0xffffffe1,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x3,0x3,};
   }

  /** Constructor with InputStream. */
  public AnalisadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalisadorLexico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalisadorLexico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalisadorLexico(AnalisadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
