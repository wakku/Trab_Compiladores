Call:   javacc_input
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"integer" at line 1 column 1>; Expected token: <<BREAKSTMT>>
        Visited token: <"integer" at line 1 column 1>; Expected token: <<CONTINUESTMT>>
        Visited token: <"integer" at line 1 column 1>; Expected token: <<RETRYSTMT>>
        Visited token: <"integer" at line 1 column 1>; Expected token: <<EXITSTMT>>
        Visited token: <"integer" at line 1 column 1>; Expected token: <<FALLTHRUSTMT>>
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"integer" at line 1 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"integer" at line 1 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"integer" at line 1 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"integer" at line 1 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"integer" at line 1 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"integer" at line 1 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"integer" at line 1 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"integer" at line 1 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"integer" at line 1 column 1>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"integer" at line 1 column 1>; Expected token: <"global">
        Visited token: <"integer" at line 1 column 1>; Expected token: <"public">
        Visited token: <"integer" at line 1 column 1>; Expected token: <"export">
        Visited token: <"integer" at line 1 column 1>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"integer" at line 1 column 1>; Expected token: <"atom">
          Visited token: <"integer" at line 1 column 1>; Expected token: <"integer">
        Return: DataType(LOOKAHEAD SUCCEEDED)
        Call:   IdentList(LOOKING AHEAD...)
          Call:   Ident(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 1 column 9>; Expected token: <<IDENTIFIER>>
            Call:   stmblk
              Call:   statement
                Visited token: <"integer" at line 1 column 1>; Expected token: <<IDENTIFIER>>
                Call:   VarDeclare
                  Call:   DataType
                    Consumed token: <"integer" at line 1 column 1>
                  Return: DataType
                  Call:   IdentList
                    Call:   Ident
                      Consumed token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 1 column 9>
                    Return: Ident
                  Return: IdentList
                Return: VarDeclare
              Return: statement
            Return: stmblk
            Call:   stmblk(LOOKING AHEAD...)
              Call:   statement(LOOKING AHEAD...)
                Call:   Flow(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <<BREAKSTMT>>
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <<CONTINUESTMT>>
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <<RETRYSTMT>>
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <<EXITSTMT>>
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <<FALLTHRUSTMT>>
                Return: Flow(LOOKAHEAD FAILED)
                Call:   Loop(LOOKING AHEAD...)
                  Call:   ForStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"for">
                  Return: ForStatement(LOOKAHEAD FAILED)
                  Call:   WhileStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"while">
                  Return: WhileStatement(LOOKAHEAD FAILED)
                  Call:   LoopStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"loop">
                  Return: LoopStatement(LOOKAHEAD FAILED)
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"goto">
                Return: Loop(LOOKAHEAD FAILED)
                Call:   Branch(LOOKING AHEAD...)
                  Call:   IfStatement(LOOKING AHEAD...)
                    Call:   IfTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"if">
                    Return: IfTest(LOOKAHEAD FAILED)
                  Return: IfStatement(LOOKAHEAD FAILED)
                  Call:   SwitchStatement(LOOKING AHEAD...)
                    Call:   SwitchTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"switch">
                    Return: SwitchTest(LOOKAHEAD FAILED)
                  Return: SwitchStatement(LOOKAHEAD FAILED)
                  Call:   IfDefStatement(LOOKING AHEAD...)
                    Call:   IfDefTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"ifdef">
                    Return: IfDefTest(LOOKAHEAD FAILED)
                  Return: IfDefStatement(LOOKAHEAD FAILED)
                Return: Branch(LOOKAHEAD FAILED)
                Call:   Return(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"return">
                Return: Return(LOOKAHEAD FAILED)
                Visited token: <"\n": "
" at line 1 column 46>; Expected token: <<IDENTIFIER>>
                Call:   ScopeModifier(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"global">
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"public">
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"export">
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"override">
                Return: ScopeModifier(LOOKAHEAD FAILED)
                Call:   VarDeclare(LOOKING AHEAD...)
                  Call:   DataType(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"atom">
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"integer">
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"sequence">
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"object">
                    Visited token: <"\n": "
" at line 1 column 46>; Expected token: <<IDENTIFIER>>
                  Return: DataType(LOOKAHEAD FAILED)
                Return: VarDeclare(LOOKAHEAD FAILED)
                Call:   TypeDeclare(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"type">
                Return: TypeDeclare(LOOKAHEAD FAILED)
              Return: statement(LOOKAHEAD FAILED)
              Visited token: <"\n": "
" at line 1 column 46>; Expected token: <"\n">
            Return: stmblk(LOOKAHEAD SUCCEEDED)
            Call:   stmblk
              Consumed token: <"\n": "
" at line 1 column 46>
            Return: stmblk
            Call:   stmblk(LOOKING AHEAD...)
              Call:   statement(LOOKING AHEAD...)
                Call:   Flow(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <<BREAKSTMT>>
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <<CONTINUESTMT>>
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <<RETRYSTMT>>
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <<EXITSTMT>>
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <<FALLTHRUSTMT>>
                Return: Flow(LOOKAHEAD FAILED)
                Call:   Loop(LOOKING AHEAD...)
                  Call:   ForStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"for">
                  Return: ForStatement(LOOKAHEAD FAILED)
                  Call:   WhileStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"while">
                  Return: WhileStatement(LOOKAHEAD FAILED)
                  Call:   LoopStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"loop">
                  Return: LoopStatement(LOOKAHEAD FAILED)
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"goto">
                Return: Loop(LOOKAHEAD FAILED)
                Call:   Branch(LOOKING AHEAD...)
                  Call:   IfStatement(LOOKING AHEAD...)
                    Call:   IfTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"if">
                    Return: IfTest(LOOKAHEAD FAILED)
                  Return: IfStatement(LOOKAHEAD FAILED)
                  Call:   SwitchStatement(LOOKING AHEAD...)
                    Call:   SwitchTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"switch">
                    Return: SwitchTest(LOOKAHEAD FAILED)
                  Return: SwitchStatement(LOOKAHEAD FAILED)
                  Call:   IfDefStatement(LOOKING AHEAD...)
                    Call:   IfDefTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"ifdef">
                    Return: IfDefTest(LOOKAHEAD FAILED)
                  Return: IfDefStatement(LOOKAHEAD FAILED)
                Return: Branch(LOOKAHEAD FAILED)
                Call:   Return(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"return">
                Return: Return(LOOKAHEAD FAILED)
                Visited token: <"\n": "
" at line 2 column 1>; Expected token: <<IDENTIFIER>>
                Call:   ScopeModifier(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"global">
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"public">
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"export">
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"override">
                Return: ScopeModifier(LOOKAHEAD FAILED)
                Call:   VarDeclare(LOOKING AHEAD...)
                  Call:   DataType(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"atom">
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"integer">
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"sequence">
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"object">
                    Visited token: <"\n": "
" at line 2 column 1>; Expected token: <<IDENTIFIER>>
                  Return: DataType(LOOKAHEAD FAILED)
                Return: VarDeclare(LOOKAHEAD FAILED)
                Call:   TypeDeclare(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"type">
                Return: TypeDeclare(LOOKAHEAD FAILED)
              Return: statement(LOOKAHEAD FAILED)
              Visited token: <"\n": "
" at line 2 column 1>; Expected token: <"\n">
            Return: stmblk(LOOKAHEAD SUCCEEDED)
            Call:   stmblk
              Consumed token: <"\n": "
" at line 2 column 1>
            Return: stmblk
            Call:   stmblk(LOOKING AHEAD...)
              Call:   statement(LOOKING AHEAD...)
                Call:   Flow(LOOKING AHEAD...)
                  Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <<BREAKSTMT>>
                  Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <<CONTINUESTMT>>
                  Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <<RETRYSTMT>>
                  Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <<EXITSTMT>>
                  Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <<FALLTHRUSTMT>>
                Return: Flow(LOOKAHEAD FAILED)
                Call:   Loop(LOOKING AHEAD...)
                  Call:   ForStatement(LOOKING AHEAD...)
                    Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"for">
                  Return: ForStatement(LOOKAHEAD FAILED)
                  Call:   WhileStatement(LOOKING AHEAD...)
                    Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"while">
                  Return: WhileStatement(LOOKAHEAD FAILED)
                  Call:   LoopStatement(LOOKING AHEAD...)
                    Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"loop">
                  Return: LoopStatement(LOOKAHEAD FAILED)
                  Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"goto">
                Return: Loop(LOOKAHEAD FAILED)
                Call:   Branch(LOOKING AHEAD...)
                  Call:   IfStatement(LOOKING AHEAD...)
                    Call:   IfTest(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"if">
                    Return: IfTest(LOOKAHEAD FAILED)
                  Return: IfStatement(LOOKAHEAD FAILED)
                  Call:   SwitchStatement(LOOKING AHEAD...)
                    Call:   SwitchTest(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"switch">
                    Return: SwitchTest(LOOKAHEAD FAILED)
                  Return: SwitchStatement(LOOKAHEAD FAILED)
                  Call:   IfDefStatement(LOOKING AHEAD...)
                    Call:   IfDefTest(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"ifdef">
                    Return: IfDefTest(LOOKAHEAD FAILED)
                  Return: IfDefStatement(LOOKAHEAD FAILED)
                Return: Branch(LOOKAHEAD FAILED)
                Call:   Return(LOOKING AHEAD...)
                  Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <"return">
                Return: Return(LOOKAHEAD FAILED)
                Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                Call:   Assignment(LOOKING AHEAD...)
                  Call:   AssignmentMulti(LOOKING AHEAD...)
                    Call:   Variable(LOOKING AHEAD...)
                      Visited token: <"=" at line 3 column 39>; Expected token: <"[">
                    Return: Variable(LOOKAHEAD FAILED)
                    Visited token: <"=" at line 3 column 39>; Expected token: <",">
                    Visited token: <"=" at line 3 column 39>; Expected token: <"=">
                    Call:   stmblk
                      Call:   statement
                        Visited token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                        Call:   Assignment(LOOKING AHEAD...)
                          Call:   AssignmentMulti(LOOKING AHEAD...)
                            Call:   Variable(LOOKING AHEAD...)
                              Visited token: <"=" at line 3 column 39>; Expected token: <"[">
                            Return: Variable(LOOKAHEAD FAILED)
                            Visited token: <"=" at line 3 column 39>; Expected token: <",">
                            Visited token: <"=" at line 3 column 39>; Expected token: <"=">
                            Consumed token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 3 column 1>
                            Call:   Assignment
                              Call:   AssignmentMulti
                                Consumed token: <"=" at line 3 column 39>
                                Call:   Expression
                                  Call:   Expression00
                                    Call:   Expression01
                                      Call:   Expression02
                                        Call:   Expression03
                                          Call:   Expression04
                                            Call:   Expression05
                                              Call:   Expression06
                                                Call:   Atom
                                                  Consumed token: <<INTEGER>: "1000" at line 3 column 41>
                                                Return: Atom
                                              Return: Expression06
                                            Return: Expression05
                                          Return: Expression04
                                        Return: Expression03
                                      Return: Expression02
                                    Return: Expression01
                                  Return: Expression00
                                Return: Expression
                              Return: AssignmentMulti
                            Return: Assignment
                          Return: statement
                        Return: stmblk
                        Call:   stmblk(LOOKING AHEAD...)
                          Call:   statement(LOOKING AHEAD...)
                            Call:   Flow(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <<BREAKSTMT>>
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <<CONTINUESTMT>>
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <<RETRYSTMT>>
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <<EXITSTMT>>
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <<FALLTHRUSTMT>>
                            Return: Flow(LOOKAHEAD FAILED)
                            Call:   Loop(LOOKING AHEAD...)
                              Call:   ForStatement(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"for">
                              Return: ForStatement(LOOKAHEAD FAILED)
                              Call:   WhileStatement(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"while">
                              Return: WhileStatement(LOOKAHEAD FAILED)
                              Call:   LoopStatement(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"loop">
                              Return: LoopStatement(LOOKAHEAD FAILED)
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"goto">
                            Return: Loop(LOOKAHEAD FAILED)
                            Call:   Branch(LOOKING AHEAD...)
                              Call:   IfStatement(LOOKING AHEAD...)
                                Call:   IfTest(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"if">
                                Return: IfTest(LOOKAHEAD FAILED)
                              Return: IfStatement(LOOKAHEAD FAILED)
                              Call:   SwitchStatement(LOOKING AHEAD...)
                                Call:   SwitchTest(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"switch">
                                Return: SwitchTest(LOOKAHEAD FAILED)
                              Return: SwitchStatement(LOOKAHEAD FAILED)
                              Call:   IfDefStatement(LOOKING AHEAD...)
                                Call:   IfDefTest(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"ifdef">
                                Return: IfDefTest(LOOKAHEAD FAILED)
                              Return: IfDefStatement(LOOKAHEAD FAILED)
                            Return: Branch(LOOKAHEAD FAILED)
                            Call:   Return(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"return">
                            Return: Return(LOOKAHEAD FAILED)
                            Visited token: <"\n": "
" at line 3 column 45>; Expected token: <<IDENTIFIER>>
                            Call:   ScopeModifier(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"global">
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"public">
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"export">
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"override">
                            Return: ScopeModifier(LOOKAHEAD FAILED)
                            Call:   VarDeclare(LOOKING AHEAD...)
                              Call:   DataType(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"atom">
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"integer">
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"sequence">
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"object">
                                Visited token: <"\n": "
" at line 3 column 45>; Expected token: <<IDENTIFIER>>
                              Return: DataType(LOOKAHEAD FAILED)
                            Return: VarDeclare(LOOKAHEAD FAILED)
                            Call:   TypeDeclare(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"type">
                            Return: TypeDeclare(LOOKAHEAD FAILED)
                          Return: statement(LOOKAHEAD FAILED)
                          Visited token: <"\n": "
" at line 3 column 45>; Expected token: <"\n">
                        Return: stmblk(LOOKAHEAD SUCCEEDED)
                        Call:   stmblk
                          Consumed token: <"\n": "
" at line 3 column 45>
                        Return: stmblk
                        Call:   stmblk(LOOKING AHEAD...)
                          Call:   statement(LOOKING AHEAD...)
                            Call:   Flow(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<BREAKSTMT>>
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<CONTINUESTMT>>
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<RETRYSTMT>>
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<EXITSTMT>>
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<FALLTHRUSTMT>>
                            Return: Flow(LOOKAHEAD FAILED)
                            Call:   Loop(LOOKING AHEAD...)
                              Call:   ForStatement(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"for">
                              Return: ForStatement(LOOKAHEAD FAILED)
                              Call:   WhileStatement(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"while">
                              Return: WhileStatement(LOOKAHEAD FAILED)
                              Call:   LoopStatement(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"loop">
                              Return: LoopStatement(LOOKAHEAD FAILED)
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"goto">
                            Return: Loop(LOOKAHEAD FAILED)
                            Call:   Branch(LOOKING AHEAD...)
                              Call:   IfStatement(LOOKING AHEAD...)
                                Call:   IfTest(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"if">
                                Return: IfTest(LOOKAHEAD FAILED)
                              Return: IfStatement(LOOKAHEAD FAILED)
                              Call:   SwitchStatement(LOOKING AHEAD...)
                                Call:   SwitchTest(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"switch">
                                Return: SwitchTest(LOOKAHEAD FAILED)
                              Return: SwitchStatement(LOOKAHEAD FAILED)
                              Call:   IfDefStatement(LOOKING AHEAD...)
                                Call:   IfDefTest(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"ifdef">
                                Return: IfDefTest(LOOKAHEAD FAILED)
                              Return: IfDefStatement(LOOKAHEAD FAILED)
                            Return: Branch(LOOKAHEAD FAILED)
                            Call:   Return(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"return">
                            Return: Return(LOOKAHEAD FAILED)
                            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<IDENTIFIER>>
                            Call:   ScopeModifier(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"global">
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"public">
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"export">
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"override">
                            Return: ScopeModifier(LOOKAHEAD FAILED)
                            Call:   VarDeclare(LOOKING AHEAD...)
                              Call:   DataType(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"atom">
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"integer">
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"sequence">
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"object">
                                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<IDENTIFIER>>
                              Return: DataType(LOOKAHEAD FAILED)
                            Return: VarDeclare(LOOKAHEAD FAILED)
                            Call:   TypeDeclare(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"type">
                            Return: TypeDeclare(LOOKAHEAD FAILED)
                          Return: statement(LOOKAHEAD FAILED)
                          Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"\n">
                        Return: stmblk(LOOKAHEAD SUCCEEDED)
                        Call:   stmblk
                          Consumed token: <"\n": "
" at line 4 column 1>
                        Return: stmblk
                        Call:   stmblk(LOOKING AHEAD...)
                          Call:   statement(LOOKING AHEAD...)
                            Call:   Flow(LOOKING AHEAD...)
                              Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<BREAKSTMT>>
                              Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<CONTINUESTMT>>
                              Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<RETRYSTMT>>
                              Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<EXITSTMT>>
                              Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<FALLTHRUSTMT>>
                            Return: Flow(LOOKAHEAD FAILED)
                            Call:   Loop(LOOKING AHEAD...)
                              Call:   ForStatement(LOOKING AHEAD...)
                                Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"for">
                              Return: ForStatement(LOOKAHEAD FAILED)
                              Call:   WhileStatement(LOOKING AHEAD...)
                                Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"while">
                              Return: WhileStatement(LOOKAHEAD FAILED)
                              Call:   LoopStatement(LOOKING AHEAD...)
                                Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"loop">
                              Return: LoopStatement(LOOKAHEAD FAILED)
                              Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"goto">
                            Return: Loop(LOOKAHEAD FAILED)
                            Call:   Branch(LOOKING AHEAD...)
                              Call:   IfStatement(LOOKING AHEAD...)
                                Call:   IfTest(LOOKING AHEAD...)
                                  Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"if">
                                Return: IfTest(LOOKAHEAD FAILED)
                              Return: IfStatement(LOOKAHEAD FAILED)
                              Call:   SwitchStatement(LOOKING AHEAD...)
                                Call:   SwitchTest(LOOKING AHEAD...)
                                  Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"switch">
                                Return: SwitchTest(LOOKAHEAD FAILED)
                              Return: SwitchStatement(LOOKAHEAD FAILED)
                              Call:   IfDefStatement(LOOKING AHEAD...)
                                Call:   IfDefTest(LOOKING AHEAD...)
                                  Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"ifdef">
                                Return: IfDefTest(LOOKAHEAD FAILED)
                              Return: IfDefStatement(LOOKAHEAD FAILED)
                            Return: Branch(LOOKAHEAD FAILED)
                            Call:   Return(LOOKING AHEAD...)
                              Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"return">
                            Return: Return(LOOKAHEAD FAILED)
                            Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<IDENTIFIER>>
                            Call:   Assignment(LOOKING AHEAD...)
                              Call:   AssignmentMulti(LOOKING AHEAD...)
                                Call:   Variable(LOOKING AHEAD...)
                                  Visited token: <"(" at line 5 column 7>; Expected token: <"[">
                                Return: Variable(LOOKAHEAD FAILED)
                                Visited token: <"(" at line 5 column 7>; Expected token: <",">
                                Visited token: <"(" at line 5 column 7>; Expected token: <"=">
                              Return: AssignmentMulti(LOOKAHEAD FAILED)
                              Call:   AssignmentWihOp(LOOKING AHEAD...)
                                Visited token: <"(" at line 5 column 7>; Expected token: <"+">
                                Visited token: <"(" at line 5 column 7>; Expected token: <"-">
                                Visited token: <"(" at line 5 column 7>; Expected token: <"/">
                                Visited token: <"(" at line 5 column 7>; Expected token: <"*">
                                Visited token: <"(" at line 5 column 7>; Expected token: <"&">
                              Return: AssignmentWihOp(LOOKAHEAD FAILED)
                            Return: Assignment(LOOKAHEAD FAILED)
                            Call:   Call(LOOKING AHEAD...)
                              Visited token: <"(" at line 5 column 7>; Expected token: <"(">
                              Call:   stmblk
                                Call:   statement
                                  Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<IDENTIFIER>>
                                  Call:   Assignment(LOOKING AHEAD...)
                                    Call:   AssignmentMulti(LOOKING AHEAD...)
                                      Call:   Variable(LOOKING AHEAD...)
                                        Visited token: <"(" at line 5 column 7>; Expected token: <"[">
                                      Return: Variable(LOOKAHEAD FAILED)
                                      Visited token: <"(" at line 5 column 7>; Expected token: <",">
                                      Visited token: <"(" at line 5 column 7>; Expected token: <"=">
                                    Return: AssignmentMulti(LOOKAHEAD FAILED)
                                    Call:   AssignmentWihOp(LOOKING AHEAD...)
                                      Visited token: <"(" at line 5 column 7>; Expected token: <"+">
                                      Visited token: <"(" at line 5 column 7>; Expected token: <"-">
                                      Visited token: <"(" at line 5 column 7>; Expected token: <"/">
                                      Visited token: <"(" at line 5 column 7>; Expected token: <"*">
                                      Visited token: <"(" at line 5 column 7>; Expected token: <"&">
                                    Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                  Return: Assignment(LOOKAHEAD FAILED)
                                  Call:   Call(LOOKING AHEAD...)
                                    Visited token: <"(" at line 5 column 7>; Expected token: <"(">
                                    Consumed token: <<IDENTIFIER>: "printf" at line 5 column 1>
                                    Call:   Call
                                      Consumed token: <"(" at line 5 column 7>
                                      Call:   ArgList
                                        Call:   Expression
                                          Call:   Expression00
                                            Call:   Expression01
                                              Call:   Expression02
                                                Call:   Expression03
                                                  Call:   Expression04
                                                    Call:   Expression05
                                                      Call:   Expression06
                                                        Call:   Atom
                                                          Consumed token: <<INTEGER>: "1" at line 5 column 8>
                                                        Return: Atom
                                                      Return: Expression06
                                                    Return: Expression05
                                                  Return: Expression04
                                                Return: Expression03
                                              Return: Expression02
                                            Return: Expression01
                                          Return: Expression00
                                        Return: Expression
                                        Consumed token: <"," at line 5 column 9>
                                        Call:   Expression
                                          Call:   Expression00
                                            Call:   Expression01
                                              Call:   Expression02
                                                Call:   Expression03
                                                  Call:   Expression04
                                                    Call:   Expression05
                                                      Call:   Expression06
                                                        Consumed token: <<STRINGLIT>: ""Valor de variavel %f\n"" at line 5 column 11>
                                                      Return: Expression06
                                                    Return: Expression05
                                                  Return: Expression04
                                                Return: Expression03
                                              Return: Expression02
                                            Return: Expression01
                                          Return: Expression00
                                        Return: Expression
                                        Consumed token: <"," at line 5 column 35>
                                        Call:   Expression
                                          Call:   Expression00
                                            Call:   Expression01
                                              Call:   Expression02
                                                Call:   Expression03
                                                  Call:   Expression04
                                                    Call:   Expression05
                                                      Call:   Expression06
                                                        Consumed token: <<IDENTIFIER>: "EssaVariavelTemMaisDeTrintaCaracteres" at line 5 column 37>
                                                      Return: Expression06
                                                    Return: Expression05
                                                  Return: Expression04
                                                Return: Expression03
                                              Return: Expression02
                                            Return: Expression01
                                          Return: Expression00
                                        Return: Expression
                                      Return: ArgList
                                      Consumed token: <")" at line 5 column 74>
                                    Return: Call
                                  Return: statement
                                Return: stmblk
                                Call:   stmblk(LOOKING AHEAD...)
                                  Call:   statement(LOOKING AHEAD...)
                                    Call:   Flow(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <<BREAKSTMT>>
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <<CONTINUESTMT>>
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <<RETRYSTMT>>
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <<EXITSTMT>>
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <<FALLTHRUSTMT>>
                                    Return: Flow(LOOKAHEAD FAILED)
                                    Call:   Loop(LOOKING AHEAD...)
                                      Call:   ForStatement(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"for">
                                      Return: ForStatement(LOOKAHEAD FAILED)
                                      Call:   WhileStatement(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"while">
                                      Return: WhileStatement(LOOKAHEAD FAILED)
                                      Call:   LoopStatement(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"loop">
                                      Return: LoopStatement(LOOKAHEAD FAILED)
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"goto">
                                    Return: Loop(LOOKAHEAD FAILED)
                                    Call:   Branch(LOOKING AHEAD...)
                                      Call:   IfStatement(LOOKING AHEAD...)
                                        Call:   IfTest(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"if">
                                        Return: IfTest(LOOKAHEAD FAILED)
                                      Return: IfStatement(LOOKAHEAD FAILED)
                                      Call:   SwitchStatement(LOOKING AHEAD...)
                                        Call:   SwitchTest(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"switch">
                                        Return: SwitchTest(LOOKAHEAD FAILED)
                                      Return: SwitchStatement(LOOKAHEAD FAILED)
                                      Call:   IfDefStatement(LOOKING AHEAD...)
                                        Call:   IfDefTest(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"ifdef">
                                        Return: IfDefTest(LOOKAHEAD FAILED)
                                      Return: IfDefStatement(LOOKAHEAD FAILED)
                                    Return: Branch(LOOKAHEAD FAILED)
                                    Call:   Return(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"return">
                                    Return: Return(LOOKAHEAD FAILED)
                                    Visited token: <"\n": "
" at line 5 column 75>; Expected token: <<IDENTIFIER>>
                                    Call:   ScopeModifier(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"global">
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"public">
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"export">
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"override">
                                    Return: ScopeModifier(LOOKAHEAD FAILED)
                                    Call:   VarDeclare(LOOKING AHEAD...)
                                      Call:   DataType(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"atom">
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"integer">
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"sequence">
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"object">
                                        Visited token: <"\n": "
" at line 5 column 75>; Expected token: <<IDENTIFIER>>
                                      Return: DataType(LOOKAHEAD FAILED)
                                    Return: VarDeclare(LOOKAHEAD FAILED)
                                    Call:   TypeDeclare(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"type">
                                    Return: TypeDeclare(LOOKAHEAD FAILED)
                                  Return: statement(LOOKAHEAD FAILED)
                                  Visited token: <"\n": "
" at line 5 column 75>; Expected token: <"\n">
                                Return: stmblk(LOOKAHEAD SUCCEEDED)
                                Call:   stmblk
                                  Consumed token: <"\n": "
" at line 5 column 75>
                                Return: stmblk
                                Consumed token: <<EOF> at line 5 column 75>
                              Return: javacc_input
input... 
