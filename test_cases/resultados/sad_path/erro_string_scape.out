Call:   javacc_input
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<BREAKSTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<CONTINUESTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<RETRYSTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<EXITSTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<FALLTHRUSTMT>>
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 1 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 1 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 1 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"sequence" at line 1 column 1>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"global">
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"public">
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"export">
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"atom">
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"integer">
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"sequence">
        Return: DataType(LOOKAHEAD SUCCEEDED)
        Call:   IdentList(LOOKING AHEAD...)
          Call:   Ident(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "v1" at line 1 column 10>; Expected token: <<IDENTIFIER>>
            Call:   stmblk
              Call:   statement
                Visited token: <"sequence" at line 1 column 1>; Expected token: <<IDENTIFIER>>
                Call:   VarDeclare
                  Call:   DataType
                    Consumed token: <"sequence" at line 1 column 1>
                  Return: DataType
                  Call:   IdentList
                    Call:   Ident
                      Consumed token: <<IDENTIFIER>: "v1" at line 1 column 10>
                      Consumed token: <"=" at line 1 column 13>
                      Call:   Expression
                        Call:   Expression00
                          Call:   Expression01
                            Call:   Expression02
                              Call:   Expression03
                                Call:   Expression04
                                  Call:   Expression05
                                    Call:   Expression06
                                      Consumed token: <<STRINGLIT>: ""ola \xA"" at line 1 column 15>
                                    Return: Expression06
                                  Return: Expression05
                                Return: Expression04
                              Return: Expression03
                            Return: Expression02
                          Return: Expression01
                        Return: Expression00
                      Return: Expression
                    Return: Ident
                  Return: IdentList
                Return: VarDeclare
              Return: statement
            Return: stmblk
            Consumed token: <"\n": "
" at line 1 column 24>
            Consumed token: <<EOF> at line 1 column 24>
          Return: javacc_input
input... 
