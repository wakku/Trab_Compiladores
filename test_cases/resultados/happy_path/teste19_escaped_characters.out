Call:   javacc_input
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"break">
        Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"continue">
        Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"retry">
        Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"exit">
        Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"fallthru">
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <<IDENTIFIER>>
      Call:   Assignment(LOOKING AHEAD...)
        Call:   AssignmentMulti(LOOKING AHEAD...)
          Call:   Variable(LOOKING AHEAD...)
            Visited token: <"(" at line 1 column 7>; Expected token: <"[">
          Return: Variable(LOOKAHEAD FAILED)
          Visited token: <"(" at line 1 column 7>; Expected token: <",">
          Visited token: <"(" at line 1 column 7>; Expected token: <"=">
        Return: AssignmentMulti(LOOKAHEAD FAILED)
        Call:   AssignmentWihOp(LOOKING AHEAD...)
          Visited token: <"(" at line 1 column 7>; Expected token: <"+">
          Visited token: <"(" at line 1 column 7>; Expected token: <"-">
          Visited token: <"(" at line 1 column 7>; Expected token: <"/">
          Visited token: <"(" at line 1 column 7>; Expected token: <"*">
          Visited token: <"(" at line 1 column 7>; Expected token: <"&">
        Return: AssignmentWihOp(LOOKAHEAD FAILED)
      Return: Assignment(LOOKAHEAD FAILED)
      Call:   Call(LOOKING AHEAD...)
        Visited token: <"(" at line 1 column 7>; Expected token: <"(">
        Call:   stmblk
          Call:   statement
            Visited token: <<IDENTIFIER>: "printf" at line 1 column 1>; Expected token: <<IDENTIFIER>>
            Call:   Assignment(LOOKING AHEAD...)
              Call:   AssignmentMulti(LOOKING AHEAD...)
                Call:   Variable(LOOKING AHEAD...)
                  Visited token: <"(" at line 1 column 7>; Expected token: <"[">
                Return: Variable(LOOKAHEAD FAILED)
                Visited token: <"(" at line 1 column 7>; Expected token: <",">
                Visited token: <"(" at line 1 column 7>; Expected token: <"=">
              Return: AssignmentMulti(LOOKAHEAD FAILED)
              Call:   AssignmentWihOp(LOOKING AHEAD...)
                Visited token: <"(" at line 1 column 7>; Expected token: <"+">
                Visited token: <"(" at line 1 column 7>; Expected token: <"-">
                Visited token: <"(" at line 1 column 7>; Expected token: <"/">
                Visited token: <"(" at line 1 column 7>; Expected token: <"*">
                Visited token: <"(" at line 1 column 7>; Expected token: <"&">
              Return: AssignmentWihOp(LOOKAHEAD FAILED)
            Return: Assignment(LOOKAHEAD FAILED)
            Call:   Call(LOOKING AHEAD...)
              Visited token: <"(" at line 1 column 7>; Expected token: <"(">
              Consumed token: <<IDENTIFIER>: "printf" at line 1 column 1>
              Call:   Call
                Consumed token: <"(" at line 1 column 7>
                Call:   ArgList
                  Call:   Expression
                    Call:   Expression00
                      Call:   Expression01
                        Call:   Expression02
                          Call:   Expression03
                            Call:   Expression04
                              Call:   Expression05
                                Call:   Expression06
                                  Call:   Atom
                                    Consumed token: <<INTEGER>: "1" at line 1 column 8>
                                  Return: Atom
                                Return: Expression06
                              Return: Expression05
                            Return: Expression04
                          Return: Expression03
                        Return: Expression02
                      Return: Expression01
                    Return: Expression00
                  Return: Expression
                  Consumed token: <"," at line 1 column 9>
                  Call:   Expression
                    Call:   Expression00
                      Call:   Expression01
                        Call:   Expression02
                          Call:   Expression03
                            Call:   Expression04
                              Call:   Expression05
                                Call:   Expression06
                                  Consumed token: <<STRINGLIT>: ""Valor de 1 \n"" at line 1 column 11>
                                Return: Expression06
                              Return: Expression05
                            Return: Expression04
                          Return: Expression03
                        Return: Expression02
                      Return: Expression01
                    Return: Expression00
                  Return: Expression
                Return: ArgList
                Consumed token: <")" at line 1 column 26>
              Return: Call
            Return: statement
          Return: stmblk
          Call:   stmblk(LOOKING AHEAD...)
            Call:   statement(LOOKING AHEAD...)
              Call:   Flow(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"break">
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"continue">
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"retry">
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"exit">
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"fallthru">
              Return: Flow(LOOKAHEAD FAILED)
              Call:   Loop(LOOKING AHEAD...)
                Call:   ForStatement(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"for">
                Return: ForStatement(LOOKAHEAD FAILED)
                Call:   WhileStatement(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"while">
                Return: WhileStatement(LOOKAHEAD FAILED)
                Call:   LoopStatement(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"loop">
                Return: LoopStatement(LOOKAHEAD FAILED)
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"goto">
              Return: Loop(LOOKAHEAD FAILED)
              Call:   Branch(LOOKING AHEAD...)
                Call:   IfStatement(LOOKING AHEAD...)
                  Call:   IfTest(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"if">
                  Return: IfTest(LOOKAHEAD FAILED)
                Return: IfStatement(LOOKAHEAD FAILED)
                Call:   SwitchStatement(LOOKING AHEAD...)
                  Call:   SwitchTest(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"switch">
                  Return: SwitchTest(LOOKAHEAD FAILED)
                Return: SwitchStatement(LOOKAHEAD FAILED)
                Call:   IfDefStatement(LOOKING AHEAD...)
                  Call:   IfDefTest(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"ifdef">
                  Return: IfDefTest(LOOKAHEAD FAILED)
                Return: IfDefStatement(LOOKAHEAD FAILED)
              Return: Branch(LOOKAHEAD FAILED)
              Call:   Return(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"return">
              Return: Return(LOOKAHEAD FAILED)
              Visited token: <"\n": "
" at line 1 column 28>; Expected token: <<IDENTIFIER>>
              Call:   ScopeModifier(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"global">
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"public">
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"export">
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"override">
              Return: ScopeModifier(LOOKAHEAD FAILED)
              Call:   VarDeclare(LOOKING AHEAD...)
                Call:   DataType(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"atom">
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"integer">
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"sequence">
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"object">
                  Visited token: <"\n": "
" at line 1 column 28>; Expected token: <<IDENTIFIER>>
                Return: DataType(LOOKAHEAD FAILED)
              Return: VarDeclare(LOOKAHEAD FAILED)
              Call:   TypeDeclare(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"type">
              Return: TypeDeclare(LOOKAHEAD FAILED)
            Return: statement(LOOKAHEAD FAILED)
            Visited token: <"\n": "
" at line 1 column 28>; Expected token: <"\n">
          Return: stmblk(LOOKAHEAD SUCCEEDED)
          Call:   stmblk
            Consumed token: <"\n": "
" at line 1 column 28>
          Return: stmblk
          Call:   stmblk(LOOKING AHEAD...)
            Call:   statement(LOOKING AHEAD...)
              Call:   Flow(LOOKING AHEAD...)
                Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"break">
                Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"continue">
                Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"retry">
                Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"exit">
                Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"fallthru">
              Return: Flow(LOOKAHEAD FAILED)
              Call:   Loop(LOOKING AHEAD...)
                Call:   ForStatement(LOOKING AHEAD...)
                  Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"for">
                Return: ForStatement(LOOKAHEAD FAILED)
                Call:   WhileStatement(LOOKING AHEAD...)
                  Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"while">
                Return: WhileStatement(LOOKAHEAD FAILED)
                Call:   LoopStatement(LOOKING AHEAD...)
                  Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"loop">
                Return: LoopStatement(LOOKAHEAD FAILED)
                Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"goto">
              Return: Loop(LOOKAHEAD FAILED)
              Call:   Branch(LOOKING AHEAD...)
                Call:   IfStatement(LOOKING AHEAD...)
                  Call:   IfTest(LOOKING AHEAD...)
                    Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"if">
                  Return: IfTest(LOOKAHEAD FAILED)
                Return: IfStatement(LOOKAHEAD FAILED)
                Call:   SwitchStatement(LOOKING AHEAD...)
                  Call:   SwitchTest(LOOKING AHEAD...)
                    Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"switch">
                  Return: SwitchTest(LOOKAHEAD FAILED)
                Return: SwitchStatement(LOOKAHEAD FAILED)
                Call:   IfDefStatement(LOOKING AHEAD...)
                  Call:   IfDefTest(LOOKING AHEAD...)
                    Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"ifdef">
                  Return: IfDefTest(LOOKAHEAD FAILED)
                Return: IfDefStatement(LOOKAHEAD FAILED)
              Return: Branch(LOOKAHEAD FAILED)
              Call:   Return(LOOKING AHEAD...)
                Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <"return">
              Return: Return(LOOKAHEAD FAILED)
              Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <<IDENTIFIER>>
              Call:   Assignment(LOOKING AHEAD...)
                Call:   AssignmentMulti(LOOKING AHEAD...)
                  Call:   Variable(LOOKING AHEAD...)
                    Visited token: <"(" at line 2 column 7>; Expected token: <"[">
                  Return: Variable(LOOKAHEAD FAILED)
                  Visited token: <"(" at line 2 column 7>; Expected token: <",">
                  Visited token: <"(" at line 2 column 7>; Expected token: <"=">
                Return: AssignmentMulti(LOOKAHEAD FAILED)
                Call:   AssignmentWihOp(LOOKING AHEAD...)
                  Visited token: <"(" at line 2 column 7>; Expected token: <"+">
                  Visited token: <"(" at line 2 column 7>; Expected token: <"-">
                  Visited token: <"(" at line 2 column 7>; Expected token: <"/">
                  Visited token: <"(" at line 2 column 7>; Expected token: <"*">
                  Visited token: <"(" at line 2 column 7>; Expected token: <"&">
                Return: AssignmentWihOp(LOOKAHEAD FAILED)
              Return: Assignment(LOOKAHEAD FAILED)
              Call:   Call(LOOKING AHEAD...)
                Visited token: <"(" at line 2 column 7>; Expected token: <"(">
                Call:   stmblk
                  Call:   statement
                    Visited token: <<IDENTIFIER>: "printf" at line 2 column 1>; Expected token: <<IDENTIFIER>>
                    Call:   Assignment(LOOKING AHEAD...)
                      Call:   AssignmentMulti(LOOKING AHEAD...)
                        Call:   Variable(LOOKING AHEAD...)
                          Visited token: <"(" at line 2 column 7>; Expected token: <"[">
                        Return: Variable(LOOKAHEAD FAILED)
                        Visited token: <"(" at line 2 column 7>; Expected token: <",">
                        Visited token: <"(" at line 2 column 7>; Expected token: <"=">
                      Return: AssignmentMulti(LOOKAHEAD FAILED)
                      Call:   AssignmentWihOp(LOOKING AHEAD...)
                        Visited token: <"(" at line 2 column 7>; Expected token: <"+">
                        Visited token: <"(" at line 2 column 7>; Expected token: <"-">
                        Visited token: <"(" at line 2 column 7>; Expected token: <"/">
                        Visited token: <"(" at line 2 column 7>; Expected token: <"*">
                        Visited token: <"(" at line 2 column 7>; Expected token: <"&">
                      Return: AssignmentWihOp(LOOKAHEAD FAILED)
                    Return: Assignment(LOOKAHEAD FAILED)
                    Call:   Call(LOOKING AHEAD...)
                      Visited token: <"(" at line 2 column 7>; Expected token: <"(">
                      Consumed token: <<IDENTIFIER>: "printf" at line 2 column 1>
                      Call:   Call
                        Consumed token: <"(" at line 2 column 7>
                        Call:   ArgList
                          Call:   Expression
                            Call:   Expression00
                              Call:   Expression01
                                Call:   Expression02
                                  Call:   Expression03
                                    Call:   Expression04
                                      Call:   Expression05
                                        Call:   Expression06
                                          Call:   Atom
                                            Consumed token: <<INTEGER>: "1" at line 2 column 8>
                                          Return: Atom
                                        Return: Expression06
                                      Return: Expression05
                                    Return: Expression04
                                  Return: Expression03
                                Return: Expression02
                              Return: Expression01
                            Return: Expression00
                          Return: Expression
                          Consumed token: <"," at line 2 column 9>
                          Call:   Expression
                            Call:   Expression00
                              Call:   Expression01
                                Call:   Expression02
                                  Call:   Expression03
                                    Call:   Expression04
                                      Call:   Expression05
                                        Call:   Expression06
                                          Consumed token: <<STRINGLIT>: ""Valor de 2 \r"" at line 2 column 11>
                                        Return: Expression06
                                      Return: Expression05
                                    Return: Expression04
                                  Return: Expression03
                                Return: Expression02
                              Return: Expression01
                            Return: Expression00
                          Return: Expression
                        Return: ArgList
                        Consumed token: <")" at line 2 column 26>
                      Return: Call
                    Return: statement
                  Return: stmblk
                  Call:   stmblk(LOOKING AHEAD...)
                    Call:   statement(LOOKING AHEAD...)
                      Call:   Flow(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"break">
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"continue">
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"retry">
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"exit">
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"fallthru">
                      Return: Flow(LOOKAHEAD FAILED)
                      Call:   Loop(LOOKING AHEAD...)
                        Call:   ForStatement(LOOKING AHEAD...)
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"for">
                        Return: ForStatement(LOOKAHEAD FAILED)
                        Call:   WhileStatement(LOOKING AHEAD...)
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"while">
                        Return: WhileStatement(LOOKAHEAD FAILED)
                        Call:   LoopStatement(LOOKING AHEAD...)
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"loop">
                        Return: LoopStatement(LOOKAHEAD FAILED)
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"goto">
                      Return: Loop(LOOKAHEAD FAILED)
                      Call:   Branch(LOOKING AHEAD...)
                        Call:   IfStatement(LOOKING AHEAD...)
                          Call:   IfTest(LOOKING AHEAD...)
                            Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"if">
                          Return: IfTest(LOOKAHEAD FAILED)
                        Return: IfStatement(LOOKAHEAD FAILED)
                        Call:   SwitchStatement(LOOKING AHEAD...)
                          Call:   SwitchTest(LOOKING AHEAD...)
                            Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"switch">
                          Return: SwitchTest(LOOKAHEAD FAILED)
                        Return: SwitchStatement(LOOKAHEAD FAILED)
                        Call:   IfDefStatement(LOOKING AHEAD...)
                          Call:   IfDefTest(LOOKING AHEAD...)
                            Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"ifdef">
                          Return: IfDefTest(LOOKAHEAD FAILED)
                        Return: IfDefStatement(LOOKAHEAD FAILED)
                      Return: Branch(LOOKAHEAD FAILED)
                      Call:   Return(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"return">
                      Return: Return(LOOKAHEAD FAILED)
                      Visited token: <"\n": "
" at line 2 column 28>; Expected token: <<IDENTIFIER>>
                      Call:   ScopeModifier(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"global">
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"public">
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"export">
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"override">
                      Return: ScopeModifier(LOOKAHEAD FAILED)
                      Call:   VarDeclare(LOOKING AHEAD...)
                        Call:   DataType(LOOKING AHEAD...)
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"atom">
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"integer">
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"sequence">
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"object">
                          Visited token: <"\n": "
" at line 2 column 28>; Expected token: <<IDENTIFIER>>
                        Return: DataType(LOOKAHEAD FAILED)
                      Return: VarDeclare(LOOKAHEAD FAILED)
                      Call:   TypeDeclare(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"type">
                      Return: TypeDeclare(LOOKAHEAD FAILED)
                    Return: statement(LOOKAHEAD FAILED)
                    Visited token: <"\n": "
" at line 2 column 28>; Expected token: <"\n">
                  Return: stmblk(LOOKAHEAD SUCCEEDED)
                  Call:   stmblk
                    Consumed token: <"\n": "
" at line 2 column 28>
                  Return: stmblk
                  Call:   stmblk(LOOKING AHEAD...)
                    Call:   statement(LOOKING AHEAD...)
                      Call:   Flow(LOOKING AHEAD...)
                        Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"break">
                        Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"continue">
                        Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"retry">
                        Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"exit">
                        Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"fallthru">
                      Return: Flow(LOOKAHEAD FAILED)
                      Call:   Loop(LOOKING AHEAD...)
                        Call:   ForStatement(LOOKING AHEAD...)
                          Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"for">
                        Return: ForStatement(LOOKAHEAD FAILED)
                        Call:   WhileStatement(LOOKING AHEAD...)
                          Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"while">
                        Return: WhileStatement(LOOKAHEAD FAILED)
                        Call:   LoopStatement(LOOKING AHEAD...)
                          Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"loop">
                        Return: LoopStatement(LOOKAHEAD FAILED)
                        Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"goto">
                      Return: Loop(LOOKAHEAD FAILED)
                      Call:   Branch(LOOKING AHEAD...)
                        Call:   IfStatement(LOOKING AHEAD...)
                          Call:   IfTest(LOOKING AHEAD...)
                            Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"if">
                          Return: IfTest(LOOKAHEAD FAILED)
                        Return: IfStatement(LOOKAHEAD FAILED)
                        Call:   SwitchStatement(LOOKING AHEAD...)
                          Call:   SwitchTest(LOOKING AHEAD...)
                            Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"switch">
                          Return: SwitchTest(LOOKAHEAD FAILED)
                        Return: SwitchStatement(LOOKAHEAD FAILED)
                        Call:   IfDefStatement(LOOKING AHEAD...)
                          Call:   IfDefTest(LOOKING AHEAD...)
                            Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"ifdef">
                          Return: IfDefTest(LOOKAHEAD FAILED)
                        Return: IfDefStatement(LOOKAHEAD FAILED)
                      Return: Branch(LOOKAHEAD FAILED)
                      Call:   Return(LOOKING AHEAD...)
                        Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <"return">
                      Return: Return(LOOKAHEAD FAILED)
                      Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                      Call:   Assignment(LOOKING AHEAD...)
                        Call:   AssignmentMulti(LOOKING AHEAD...)
                          Call:   Variable(LOOKING AHEAD...)
                            Visited token: <"(" at line 3 column 7>; Expected token: <"[">
                          Return: Variable(LOOKAHEAD FAILED)
                          Visited token: <"(" at line 3 column 7>; Expected token: <",">
                          Visited token: <"(" at line 3 column 7>; Expected token: <"=">
                        Return: AssignmentMulti(LOOKAHEAD FAILED)
                        Call:   AssignmentWihOp(LOOKING AHEAD...)
                          Visited token: <"(" at line 3 column 7>; Expected token: <"+">
                          Visited token: <"(" at line 3 column 7>; Expected token: <"-">
                          Visited token: <"(" at line 3 column 7>; Expected token: <"/">
                          Visited token: <"(" at line 3 column 7>; Expected token: <"*">
                          Visited token: <"(" at line 3 column 7>; Expected token: <"&">
                        Return: AssignmentWihOp(LOOKAHEAD FAILED)
                      Return: Assignment(LOOKAHEAD FAILED)
                      Call:   Call(LOOKING AHEAD...)
                        Visited token: <"(" at line 3 column 7>; Expected token: <"(">
                        Call:   stmblk
                          Call:   statement
                            Visited token: <<IDENTIFIER>: "printf" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                            Call:   Assignment(LOOKING AHEAD...)
                              Call:   AssignmentMulti(LOOKING AHEAD...)
                                Call:   Variable(LOOKING AHEAD...)
                                  Visited token: <"(" at line 3 column 7>; Expected token: <"[">
                                Return: Variable(LOOKAHEAD FAILED)
                                Visited token: <"(" at line 3 column 7>; Expected token: <",">
                                Visited token: <"(" at line 3 column 7>; Expected token: <"=">
                              Return: AssignmentMulti(LOOKAHEAD FAILED)
                              Call:   AssignmentWihOp(LOOKING AHEAD...)
                                Visited token: <"(" at line 3 column 7>; Expected token: <"+">
                                Visited token: <"(" at line 3 column 7>; Expected token: <"-">
                                Visited token: <"(" at line 3 column 7>; Expected token: <"/">
                                Visited token: <"(" at line 3 column 7>; Expected token: <"*">
                                Visited token: <"(" at line 3 column 7>; Expected token: <"&">
                              Return: AssignmentWihOp(LOOKAHEAD FAILED)
                            Return: Assignment(LOOKAHEAD FAILED)
                            Call:   Call(LOOKING AHEAD...)
                              Visited token: <"(" at line 3 column 7>; Expected token: <"(">
                              Consumed token: <<IDENTIFIER>: "printf" at line 3 column 1>
                              Call:   Call
                                Consumed token: <"(" at line 3 column 7>
                                Call:   ArgList
                                  Call:   Expression
                                    Call:   Expression00
                                      Call:   Expression01
                                        Call:   Expression02
                                          Call:   Expression03
                                            Call:   Expression04
                                              Call:   Expression05
                                                Call:   Expression06
                                                  Call:   Atom
                                                    Consumed token: <<INTEGER>: "1" at line 3 column 8>
                                                  Return: Atom
                                                Return: Expression06
                                              Return: Expression05
                                            Return: Expression04
                                          Return: Expression03
                                        Return: Expression02
                                      Return: Expression01
                                    Return: Expression00
                                  Return: Expression
                                  Consumed token: <"," at line 3 column 9>
                                  Call:   Expression
                                    Call:   Expression00
                                      Call:   Expression01
                                        Call:   Expression02
                                          Call:   Expression03
                                            Call:   Expression04
                                              Call:   Expression05
                                                Call:   Expression06
                                                  Consumed token: <<STRINGLIT>: ""Valor de 3 \t"" at line 3 column 11>
                                                Return: Expression06
                                              Return: Expression05
                                            Return: Expression04
                                          Return: Expression03
                                        Return: Expression02
                                      Return: Expression01
                                    Return: Expression00
                                  Return: Expression
                                Return: ArgList
                                Consumed token: <")" at line 3 column 26>
                              Return: Call
                            Return: statement
                          Return: stmblk
                          Call:   stmblk(LOOKING AHEAD...)
                            Call:   statement(LOOKING AHEAD...)
                              Call:   Flow(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"break">
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"continue">
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"retry">
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"exit">
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"fallthru">
                              Return: Flow(LOOKAHEAD FAILED)
                              Call:   Loop(LOOKING AHEAD...)
                                Call:   ForStatement(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"for">
                                Return: ForStatement(LOOKAHEAD FAILED)
                                Call:   WhileStatement(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"while">
                                Return: WhileStatement(LOOKAHEAD FAILED)
                                Call:   LoopStatement(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"loop">
                                Return: LoopStatement(LOOKAHEAD FAILED)
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"goto">
                              Return: Loop(LOOKAHEAD FAILED)
                              Call:   Branch(LOOKING AHEAD...)
                                Call:   IfStatement(LOOKING AHEAD...)
                                  Call:   IfTest(LOOKING AHEAD...)
                                    Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"if">
                                  Return: IfTest(LOOKAHEAD FAILED)
                                Return: IfStatement(LOOKAHEAD FAILED)
                                Call:   SwitchStatement(LOOKING AHEAD...)
                                  Call:   SwitchTest(LOOKING AHEAD...)
                                    Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"switch">
                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                Call:   IfDefStatement(LOOKING AHEAD...)
                                  Call:   IfDefTest(LOOKING AHEAD...)
                                    Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"ifdef">
                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                Return: IfDefStatement(LOOKAHEAD FAILED)
                              Return: Branch(LOOKAHEAD FAILED)
                              Call:   Return(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"return">
                              Return: Return(LOOKAHEAD FAILED)
                              Visited token: <"\n": "
" at line 3 column 28>; Expected token: <<IDENTIFIER>>
                              Call:   ScopeModifier(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"global">
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"public">
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"export">
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"override">
                              Return: ScopeModifier(LOOKAHEAD FAILED)
                              Call:   VarDeclare(LOOKING AHEAD...)
                                Call:   DataType(LOOKING AHEAD...)
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"atom">
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"integer">
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"sequence">
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"object">
                                  Visited token: <"\n": "
" at line 3 column 28>; Expected token: <<IDENTIFIER>>
                                Return: DataType(LOOKAHEAD FAILED)
                              Return: VarDeclare(LOOKAHEAD FAILED)
                              Call:   TypeDeclare(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"type">
                              Return: TypeDeclare(LOOKAHEAD FAILED)
                            Return: statement(LOOKAHEAD FAILED)
                            Visited token: <"\n": "
" at line 3 column 28>; Expected token: <"\n">
                          Return: stmblk(LOOKAHEAD SUCCEEDED)
                          Call:   stmblk
                            Consumed token: <"\n": "
" at line 3 column 28>
                          Return: stmblk
                          Call:   stmblk(LOOKING AHEAD...)
                            Call:   statement(LOOKING AHEAD...)
                              Call:   Flow(LOOKING AHEAD...)
                                Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"break">
                                Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"continue">
                                Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"retry">
                                Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"exit">
                                Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"fallthru">
                              Return: Flow(LOOKAHEAD FAILED)
                              Call:   Loop(LOOKING AHEAD...)
                                Call:   ForStatement(LOOKING AHEAD...)
                                  Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"for">
                                Return: ForStatement(LOOKAHEAD FAILED)
                                Call:   WhileStatement(LOOKING AHEAD...)
                                  Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"while">
                                Return: WhileStatement(LOOKAHEAD FAILED)
                                Call:   LoopStatement(LOOKING AHEAD...)
                                  Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"loop">
                                Return: LoopStatement(LOOKAHEAD FAILED)
                                Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"goto">
                              Return: Loop(LOOKAHEAD FAILED)
                              Call:   Branch(LOOKING AHEAD...)
                                Call:   IfStatement(LOOKING AHEAD...)
                                  Call:   IfTest(LOOKING AHEAD...)
                                    Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"if">
                                  Return: IfTest(LOOKAHEAD FAILED)
                                Return: IfStatement(LOOKAHEAD FAILED)
                                Call:   SwitchStatement(LOOKING AHEAD...)
                                  Call:   SwitchTest(LOOKING AHEAD...)
                                    Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"switch">
                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                Call:   IfDefStatement(LOOKING AHEAD...)
                                  Call:   IfDefTest(LOOKING AHEAD...)
                                    Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"ifdef">
                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                Return: IfDefStatement(LOOKAHEAD FAILED)
                              Return: Branch(LOOKAHEAD FAILED)
                              Call:   Return(LOOKING AHEAD...)
                                Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <"return">
                              Return: Return(LOOKAHEAD FAILED)
                              Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <<IDENTIFIER>>
                              Call:   Assignment(LOOKING AHEAD...)
                                Call:   AssignmentMulti(LOOKING AHEAD...)
                                  Call:   Variable(LOOKING AHEAD...)
                                    Visited token: <"(" at line 4 column 7>; Expected token: <"[">
                                  Return: Variable(LOOKAHEAD FAILED)
                                  Visited token: <"(" at line 4 column 7>; Expected token: <",">
                                  Visited token: <"(" at line 4 column 7>; Expected token: <"=">
                                Return: AssignmentMulti(LOOKAHEAD FAILED)
                                Call:   AssignmentWihOp(LOOKING AHEAD...)
                                  Visited token: <"(" at line 4 column 7>; Expected token: <"+">
                                  Visited token: <"(" at line 4 column 7>; Expected token: <"-">
                                  Visited token: <"(" at line 4 column 7>; Expected token: <"/">
                                  Visited token: <"(" at line 4 column 7>; Expected token: <"*">
                                  Visited token: <"(" at line 4 column 7>; Expected token: <"&">
                                Return: AssignmentWihOp(LOOKAHEAD FAILED)
                              Return: Assignment(LOOKAHEAD FAILED)
                              Call:   Call(LOOKING AHEAD...)
                                Visited token: <"(" at line 4 column 7>; Expected token: <"(">
                                Call:   stmblk
                                  Call:   statement
                                    Visited token: <<IDENTIFIER>: "printf" at line 4 column 1>; Expected token: <<IDENTIFIER>>
                                    Call:   Assignment(LOOKING AHEAD...)
                                      Call:   AssignmentMulti(LOOKING AHEAD...)
                                        Call:   Variable(LOOKING AHEAD...)
                                          Visited token: <"(" at line 4 column 7>; Expected token: <"[">
                                        Return: Variable(LOOKAHEAD FAILED)
                                        Visited token: <"(" at line 4 column 7>; Expected token: <",">
                                        Visited token: <"(" at line 4 column 7>; Expected token: <"=">
                                      Return: AssignmentMulti(LOOKAHEAD FAILED)
                                      Call:   AssignmentWihOp(LOOKING AHEAD...)
                                        Visited token: <"(" at line 4 column 7>; Expected token: <"+">
                                        Visited token: <"(" at line 4 column 7>; Expected token: <"-">
                                        Visited token: <"(" at line 4 column 7>; Expected token: <"/">
                                        Visited token: <"(" at line 4 column 7>; Expected token: <"*">
                                        Visited token: <"(" at line 4 column 7>; Expected token: <"&">
                                      Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                    Return: Assignment(LOOKAHEAD FAILED)
                                    Call:   Call(LOOKING AHEAD...)
                                      Visited token: <"(" at line 4 column 7>; Expected token: <"(">
                                      Consumed token: <<IDENTIFIER>: "printf" at line 4 column 1>
                                      Call:   Call
                                        Consumed token: <"(" at line 4 column 7>
                                        Call:   ArgList
                                          Call:   Expression
                                            Call:   Expression00
                                              Call:   Expression01
                                                Call:   Expression02
                                                  Call:   Expression03
                                                    Call:   Expression04
                                                      Call:   Expression05
                                                        Call:   Expression06
                                                          Call:   Atom
                                                            Consumed token: <<INTEGER>: "1" at line 4 column 8>
                                                          Return: Atom
                                                        Return: Expression06
                                                      Return: Expression05
                                                    Return: Expression04
                                                  Return: Expression03
                                                Return: Expression02
                                              Return: Expression01
                                            Return: Expression00
                                          Return: Expression
                                          Consumed token: <"," at line 4 column 9>
                                          Call:   Expression
                                            Call:   Expression00
                                              Call:   Expression01
                                                Call:   Expression02
                                                  Call:   Expression03
                                                    Call:   Expression04
                                                      Call:   Expression05
                                                        Call:   Expression06
                                                          Consumed token: <<STRINGLIT>: ""Valor de 4 \\"" at line 4 column 11>
                                                        Return: Expression06
                                                      Return: Expression05
                                                    Return: Expression04
                                                  Return: Expression03
                                                Return: Expression02
                                              Return: Expression01
                                            Return: Expression00
                                          Return: Expression
                                        Return: ArgList
                                        Consumed token: <")" at line 4 column 26>
                                      Return: Call
                                    Return: statement
                                  Return: stmblk
                                  Call:   stmblk(LOOKING AHEAD...)
                                    Call:   statement(LOOKING AHEAD...)
                                      Call:   Flow(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"break">
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"continue">
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"retry">
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"exit">
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"fallthru">
                                      Return: Flow(LOOKAHEAD FAILED)
                                      Call:   Loop(LOOKING AHEAD...)
                                        Call:   ForStatement(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"for">
                                        Return: ForStatement(LOOKAHEAD FAILED)
                                        Call:   WhileStatement(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"while">
                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                        Call:   LoopStatement(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"loop">
                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"goto">
                                      Return: Loop(LOOKAHEAD FAILED)
                                      Call:   Branch(LOOKING AHEAD...)
                                        Call:   IfStatement(LOOKING AHEAD...)
                                          Call:   IfTest(LOOKING AHEAD...)
                                            Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"if">
                                          Return: IfTest(LOOKAHEAD FAILED)
                                        Return: IfStatement(LOOKAHEAD FAILED)
                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                          Call:   SwitchTest(LOOKING AHEAD...)
                                            Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"switch">
                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                          Call:   IfDefTest(LOOKING AHEAD...)
                                            Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"ifdef">
                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                      Return: Branch(LOOKAHEAD FAILED)
                                      Call:   Return(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"return">
                                      Return: Return(LOOKAHEAD FAILED)
                                      Visited token: <"\n": "
" at line 4 column 28>; Expected token: <<IDENTIFIER>>
                                      Call:   ScopeModifier(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"global">
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"public">
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"export">
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"override">
                                      Return: ScopeModifier(LOOKAHEAD FAILED)
                                      Call:   VarDeclare(LOOKING AHEAD...)
                                        Call:   DataType(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"atom">
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"integer">
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"sequence">
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"object">
                                          Visited token: <"\n": "
" at line 4 column 28>; Expected token: <<IDENTIFIER>>
                                        Return: DataType(LOOKAHEAD FAILED)
                                      Return: VarDeclare(LOOKAHEAD FAILED)
                                      Call:   TypeDeclare(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"type">
                                      Return: TypeDeclare(LOOKAHEAD FAILED)
                                    Return: statement(LOOKAHEAD FAILED)
                                    Visited token: <"\n": "
" at line 4 column 28>; Expected token: <"\n">
                                  Return: stmblk(LOOKAHEAD SUCCEEDED)
                                  Call:   stmblk
                                    Consumed token: <"\n": "
" at line 4 column 28>
                                  Return: stmblk
                                  Call:   stmblk(LOOKING AHEAD...)
                                    Call:   statement(LOOKING AHEAD...)
                                      Call:   Flow(LOOKING AHEAD...)
                                        Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"break">
                                        Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"continue">
                                        Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"retry">
                                        Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"exit">
                                        Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"fallthru">
                                      Return: Flow(LOOKAHEAD FAILED)
                                      Call:   Loop(LOOKING AHEAD...)
                                        Call:   ForStatement(LOOKING AHEAD...)
                                          Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"for">
                                        Return: ForStatement(LOOKAHEAD FAILED)
                                        Call:   WhileStatement(LOOKING AHEAD...)
                                          Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"while">
                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                        Call:   LoopStatement(LOOKING AHEAD...)
                                          Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"loop">
                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                        Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"goto">
                                      Return: Loop(LOOKAHEAD FAILED)
                                      Call:   Branch(LOOKING AHEAD...)
                                        Call:   IfStatement(LOOKING AHEAD...)
                                          Call:   IfTest(LOOKING AHEAD...)
                                            Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"if">
                                          Return: IfTest(LOOKAHEAD FAILED)
                                        Return: IfStatement(LOOKAHEAD FAILED)
                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                          Call:   SwitchTest(LOOKING AHEAD...)
                                            Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"switch">
                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                          Call:   IfDefTest(LOOKING AHEAD...)
                                            Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"ifdef">
                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                      Return: Branch(LOOKAHEAD FAILED)
                                      Call:   Return(LOOKING AHEAD...)
                                        Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <"return">
                                      Return: Return(LOOKAHEAD FAILED)
                                      Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<IDENTIFIER>>
                                      Call:   Assignment(LOOKING AHEAD...)
                                        Call:   AssignmentMulti(LOOKING AHEAD...)
                                          Call:   Variable(LOOKING AHEAD...)
                                            Visited token: <"(" at line 5 column 7>; Expected token: <"[">
                                          Return: Variable(LOOKAHEAD FAILED)
                                          Visited token: <"(" at line 5 column 7>; Expected token: <",">
                                          Visited token: <"(" at line 5 column 7>; Expected token: <"=">
                                        Return: AssignmentMulti(LOOKAHEAD FAILED)
                                        Call:   AssignmentWihOp(LOOKING AHEAD...)
                                          Visited token: <"(" at line 5 column 7>; Expected token: <"+">
                                          Visited token: <"(" at line 5 column 7>; Expected token: <"-">
                                          Visited token: <"(" at line 5 column 7>; Expected token: <"/">
                                          Visited token: <"(" at line 5 column 7>; Expected token: <"*">
                                          Visited token: <"(" at line 5 column 7>; Expected token: <"&">
                                        Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                      Return: Assignment(LOOKAHEAD FAILED)
                                      Call:   Call(LOOKING AHEAD...)
                                        Visited token: <"(" at line 5 column 7>; Expected token: <"(">
                                        Call:   stmblk
                                          Call:   statement
                                            Visited token: <<IDENTIFIER>: "printf" at line 5 column 1>; Expected token: <<IDENTIFIER>>
                                            Call:   Assignment(LOOKING AHEAD...)
                                              Call:   AssignmentMulti(LOOKING AHEAD...)
                                                Call:   Variable(LOOKING AHEAD...)
                                                  Visited token: <"(" at line 5 column 7>; Expected token: <"[">
                                                Return: Variable(LOOKAHEAD FAILED)
                                                Visited token: <"(" at line 5 column 7>; Expected token: <",">
                                                Visited token: <"(" at line 5 column 7>; Expected token: <"=">
                                              Return: AssignmentMulti(LOOKAHEAD FAILED)
                                              Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                Visited token: <"(" at line 5 column 7>; Expected token: <"+">
                                                Visited token: <"(" at line 5 column 7>; Expected token: <"-">
                                                Visited token: <"(" at line 5 column 7>; Expected token: <"/">
                                                Visited token: <"(" at line 5 column 7>; Expected token: <"*">
                                                Visited token: <"(" at line 5 column 7>; Expected token: <"&">
                                              Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                            Return: Assignment(LOOKAHEAD FAILED)
                                            Call:   Call(LOOKING AHEAD...)
                                              Visited token: <"(" at line 5 column 7>; Expected token: <"(">
                                              Consumed token: <<IDENTIFIER>: "printf" at line 5 column 1>
                                              Call:   Call
                                                Consumed token: <"(" at line 5 column 7>
                                                Call:   ArgList
                                                  Call:   Expression
                                                    Call:   Expression00
                                                      Call:   Expression01
                                                        Call:   Expression02
                                                          Call:   Expression03
                                                            Call:   Expression04
                                                              Call:   Expression05
                                                                Call:   Expression06
                                                                  Call:   Atom
                                                                    Consumed token: <<INTEGER>: "1" at line 5 column 8>
                                                                  Return: Atom
                                                                Return: Expression06
                                                              Return: Expression05
                                                            Return: Expression04
                                                          Return: Expression03
                                                        Return: Expression02
                                                      Return: Expression01
                                                    Return: Expression00
                                                  Return: Expression
                                                  Consumed token: <"," at line 5 column 9>
                                                  Call:   Expression
                                                    Call:   Expression00
                                                      Call:   Expression01
                                                        Call:   Expression02
                                                          Call:   Expression03
                                                            Call:   Expression04
                                                              Call:   Expression05
                                                                Call:   Expression06
                                                                  Consumed token: <<STRINGLIT>: ""Valor de 5 \""" at line 5 column 11>
                                                                Return: Expression06
                                                              Return: Expression05
                                                            Return: Expression04
                                                          Return: Expression03
                                                        Return: Expression02
                                                      Return: Expression01
                                                    Return: Expression00
                                                  Return: Expression
                                                Return: ArgList
                                                Consumed token: <")" at line 5 column 26>
                                              Return: Call
                                            Return: statement
                                          Return: stmblk
                                          Call:   stmblk(LOOKING AHEAD...)
                                            Call:   statement(LOOKING AHEAD...)
                                              Call:   Flow(LOOKING AHEAD...)
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"break">
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"continue">
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"retry">
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"exit">
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"fallthru">
                                              Return: Flow(LOOKAHEAD FAILED)
                                              Call:   Loop(LOOKING AHEAD...)
                                                Call:   ForStatement(LOOKING AHEAD...)
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"for">
                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"while">
                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"loop">
                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"goto">
                                              Return: Loop(LOOKAHEAD FAILED)
                                              Call:   Branch(LOOKING AHEAD...)
                                                Call:   IfStatement(LOOKING AHEAD...)
                                                  Call:   IfTest(LOOKING AHEAD...)
                                                    Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"if">
                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                    Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"switch">
                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                    Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"ifdef">
                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                              Return: Branch(LOOKAHEAD FAILED)
                                              Call:   Return(LOOKING AHEAD...)
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"return">
                                              Return: Return(LOOKAHEAD FAILED)
                                              Visited token: <"\n": "
" at line 5 column 28>; Expected token: <<IDENTIFIER>>
                                              Call:   ScopeModifier(LOOKING AHEAD...)
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"global">
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"public">
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"export">
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"override">
                                              Return: ScopeModifier(LOOKAHEAD FAILED)
                                              Call:   VarDeclare(LOOKING AHEAD...)
                                                Call:   DataType(LOOKING AHEAD...)
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"atom">
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"integer">
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"sequence">
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"object">
                                                  Visited token: <"\n": "
" at line 5 column 28>; Expected token: <<IDENTIFIER>>
                                                Return: DataType(LOOKAHEAD FAILED)
                                              Return: VarDeclare(LOOKAHEAD FAILED)
                                              Call:   TypeDeclare(LOOKING AHEAD...)
                                                Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"type">
                                              Return: TypeDeclare(LOOKAHEAD FAILED)
                                            Return: statement(LOOKAHEAD FAILED)
                                            Visited token: <"\n": "
" at line 5 column 28>; Expected token: <"\n">
                                          Return: stmblk(LOOKAHEAD SUCCEEDED)
                                          Call:   stmblk
                                            Consumed token: <"\n": "
" at line 5 column 28>
                                          Return: stmblk
                                          Call:   stmblk(LOOKING AHEAD...)
                                            Call:   statement(LOOKING AHEAD...)
                                              Call:   Flow(LOOKING AHEAD...)
                                                Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"break">
                                                Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"continue">
                                                Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"retry">
                                                Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"exit">
                                                Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"fallthru">
                                              Return: Flow(LOOKAHEAD FAILED)
                                              Call:   Loop(LOOKING AHEAD...)
                                                Call:   ForStatement(LOOKING AHEAD...)
                                                  Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"for">
                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                  Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"while">
                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                  Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"loop">
                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"goto">
                                              Return: Loop(LOOKAHEAD FAILED)
                                              Call:   Branch(LOOKING AHEAD...)
                                                Call:   IfStatement(LOOKING AHEAD...)
                                                  Call:   IfTest(LOOKING AHEAD...)
                                                    Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"if">
                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                    Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"switch">
                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                    Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"ifdef">
                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                              Return: Branch(LOOKAHEAD FAILED)
                                              Call:   Return(LOOKING AHEAD...)
                                                Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"return">
                                              Return: Return(LOOKAHEAD FAILED)
                                              Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<IDENTIFIER>>
                                              Call:   Assignment(LOOKING AHEAD...)
                                                Call:   AssignmentMulti(LOOKING AHEAD...)
                                                  Call:   Variable(LOOKING AHEAD...)
                                                    Visited token: <"(" at line 6 column 7>; Expected token: <"[">
                                                  Return: Variable(LOOKAHEAD FAILED)
                                                  Visited token: <"(" at line 6 column 7>; Expected token: <",">
                                                  Visited token: <"(" at line 6 column 7>; Expected token: <"=">
                                                Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                  Visited token: <"(" at line 6 column 7>; Expected token: <"+">
                                                  Visited token: <"(" at line 6 column 7>; Expected token: <"-">
                                                  Visited token: <"(" at line 6 column 7>; Expected token: <"/">
                                                  Visited token: <"(" at line 6 column 7>; Expected token: <"*">
                                                  Visited token: <"(" at line 6 column 7>; Expected token: <"&">
                                                Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                              Return: Assignment(LOOKAHEAD FAILED)
                                              Call:   Call(LOOKING AHEAD...)
                                                Visited token: <"(" at line 6 column 7>; Expected token: <"(">
                                                Call:   stmblk
                                                  Call:   statement
                                                    Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<IDENTIFIER>>
                                                    Call:   Assignment(LOOKING AHEAD...)
                                                      Call:   AssignmentMulti(LOOKING AHEAD...)
                                                        Call:   Variable(LOOKING AHEAD...)
                                                          Visited token: <"(" at line 6 column 7>; Expected token: <"[">
                                                        Return: Variable(LOOKAHEAD FAILED)
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <",">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"=">
                                                      Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                      Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"+">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"-">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"/">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"*">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"&">
                                                      Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                    Return: Assignment(LOOKAHEAD FAILED)
                                                    Call:   Call(LOOKING AHEAD...)
                                                      Visited token: <"(" at line 6 column 7>; Expected token: <"(">
                                                      Consumed token: <<IDENTIFIER>: "printf" at line 6 column 1>
                                                      Call:   Call
                                                        Consumed token: <"(" at line 6 column 7>
                                                        Call:   ArgList
                                                          Call:   Expression
                                                            Call:   Expression00
                                                              Call:   Expression01
                                                                Call:   Expression02
                                                                  Call:   Expression03
                                                                    Call:   Expression04
                                                                      Call:   Expression05
                                                                        Call:   Expression06
                                                                          Call:   Atom
                                                                            Consumed token: <<INTEGER>: "1" at line 6 column 8>
                                                                          Return: Atom
                                                                        Return: Expression06
                                                                      Return: Expression05
                                                                    Return: Expression04
                                                                  Return: Expression03
                                                                Return: Expression02
                                                              Return: Expression01
                                                            Return: Expression00
                                                          Return: Expression
                                                          Consumed token: <"," at line 6 column 9>
                                                          Call:   Expression
                                                            Call:   Expression00
                                                              Call:   Expression01
                                                                Call:   Expression02
                                                                  Call:   Expression03
                                                                    Call:   Expression04
                                                                      Call:   Expression05
                                                                        Call:   Expression06
                                                                          Consumed token: <<STRINGLIT>: ""Valor de 6 \'"" at line 6 column 11>
                                                                        Return: Expression06
                                                                      Return: Expression05
                                                                    Return: Expression04
                                                                  Return: Expression03
                                                                Return: Expression02
                                                              Return: Expression01
                                                            Return: Expression00
                                                          Return: Expression
                                                        Return: ArgList
                                                        Consumed token: <")" at line 6 column 26>
                                                      Return: Call
                                                    Return: statement
                                                  Return: stmblk
                                                  Call:   stmblk(LOOKING AHEAD...)
                                                    Call:   statement(LOOKING AHEAD...)
                                                      Call:   Flow(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"break">
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"continue">
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"retry">
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"exit">
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"fallthru">
                                                      Return: Flow(LOOKAHEAD FAILED)
                                                      Call:   Loop(LOOKING AHEAD...)
                                                        Call:   ForStatement(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"for">
                                                        Return: ForStatement(LOOKAHEAD FAILED)
                                                        Call:   WhileStatement(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"while">
                                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                                        Call:   LoopStatement(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"loop">
                                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"goto">
                                                      Return: Loop(LOOKAHEAD FAILED)
                                                      Call:   Branch(LOOKING AHEAD...)
                                                        Call:   IfStatement(LOOKING AHEAD...)
                                                          Call:   IfTest(LOOKING AHEAD...)
                                                            Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"if">
                                                          Return: IfTest(LOOKAHEAD FAILED)
                                                        Return: IfStatement(LOOKAHEAD FAILED)
                                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                                          Call:   SwitchTest(LOOKING AHEAD...)
                                                            Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"switch">
                                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                                          Call:   IfDefTest(LOOKING AHEAD...)
                                                            Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"ifdef">
                                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                                      Return: Branch(LOOKAHEAD FAILED)
                                                      Call:   Return(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"return">
                                                      Return: Return(LOOKAHEAD FAILED)
                                                      Visited token: <"\n": "
" at line 6 column 28>; Expected token: <<IDENTIFIER>>
                                                      Call:   ScopeModifier(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"global">
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"public">
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"export">
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"override">
                                                      Return: ScopeModifier(LOOKAHEAD FAILED)
                                                      Call:   VarDeclare(LOOKING AHEAD...)
                                                        Call:   DataType(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"atom">
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"integer">
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"sequence">
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"object">
                                                          Visited token: <"\n": "
" at line 6 column 28>; Expected token: <<IDENTIFIER>>
                                                        Return: DataType(LOOKAHEAD FAILED)
                                                      Return: VarDeclare(LOOKAHEAD FAILED)
                                                      Call:   TypeDeclare(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"type">
                                                      Return: TypeDeclare(LOOKAHEAD FAILED)
                                                    Return: statement(LOOKAHEAD FAILED)
                                                    Visited token: <"\n": "
" at line 6 column 28>; Expected token: <"\n">
                                                  Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                  Call:   stmblk
                                                    Consumed token: <"\n": "
" at line 6 column 28>
                                                  Return: stmblk
                                                  Call:   stmblk(LOOKING AHEAD...)
                                                    Call:   statement(LOOKING AHEAD...)
                                                      Call:   Flow(LOOKING AHEAD...)
                                                        Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"break">
                                                        Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"continue">
                                                        Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"retry">
                                                        Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"exit">
                                                        Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"fallthru">
                                                      Return: Flow(LOOKAHEAD FAILED)
                                                      Call:   Loop(LOOKING AHEAD...)
                                                        Call:   ForStatement(LOOKING AHEAD...)
                                                          Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"for">
                                                        Return: ForStatement(LOOKAHEAD FAILED)
                                                        Call:   WhileStatement(LOOKING AHEAD...)
                                                          Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"while">
                                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                                        Call:   LoopStatement(LOOKING AHEAD...)
                                                          Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"loop">
                                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                                        Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"goto">
                                                      Return: Loop(LOOKAHEAD FAILED)
                                                      Call:   Branch(LOOKING AHEAD...)
                                                        Call:   IfStatement(LOOKING AHEAD...)
                                                          Call:   IfTest(LOOKING AHEAD...)
                                                            Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"if">
                                                          Return: IfTest(LOOKAHEAD FAILED)
                                                        Return: IfStatement(LOOKAHEAD FAILED)
                                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                                          Call:   SwitchTest(LOOKING AHEAD...)
                                                            Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"switch">
                                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                                          Call:   IfDefTest(LOOKING AHEAD...)
                                                            Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"ifdef">
                                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                                      Return: Branch(LOOKAHEAD FAILED)
                                                      Call:   Return(LOOKING AHEAD...)
                                                        Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <"return">
                                                      Return: Return(LOOKAHEAD FAILED)
                                                      Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <<IDENTIFIER>>
                                                      Call:   Assignment(LOOKING AHEAD...)
                                                        Call:   AssignmentMulti(LOOKING AHEAD...)
                                                          Call:   Variable(LOOKING AHEAD...)
                                                            Visited token: <"(" at line 7 column 7>; Expected token: <"[">
                                                          Return: Variable(LOOKAHEAD FAILED)
                                                          Visited token: <"(" at line 7 column 7>; Expected token: <",">
                                                          Visited token: <"(" at line 7 column 7>; Expected token: <"=">
                                                        Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                        Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                          Visited token: <"(" at line 7 column 7>; Expected token: <"+">
                                                          Visited token: <"(" at line 7 column 7>; Expected token: <"-">
                                                          Visited token: <"(" at line 7 column 7>; Expected token: <"/">
                                                          Visited token: <"(" at line 7 column 7>; Expected token: <"*">
                                                          Visited token: <"(" at line 7 column 7>; Expected token: <"&">
                                                        Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                      Return: Assignment(LOOKAHEAD FAILED)
                                                      Call:   Call(LOOKING AHEAD...)
                                                        Visited token: <"(" at line 7 column 7>; Expected token: <"(">
                                                        Call:   stmblk
                                                          Call:   statement
                                                            Visited token: <<IDENTIFIER>: "printf" at line 7 column 1>; Expected token: <<IDENTIFIER>>
                                                            Call:   Assignment(LOOKING AHEAD...)
                                                              Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                Call:   Variable(LOOKING AHEAD...)
                                                                  Visited token: <"(" at line 7 column 7>; Expected token: <"[">
                                                                Return: Variable(LOOKAHEAD FAILED)
                                                                Visited token: <"(" at line 7 column 7>; Expected token: <",">
                                                                Visited token: <"(" at line 7 column 7>; Expected token: <"=">
                                                              Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                              Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                Visited token: <"(" at line 7 column 7>; Expected token: <"+">
                                                                Visited token: <"(" at line 7 column 7>; Expected token: <"-">
                                                                Visited token: <"(" at line 7 column 7>; Expected token: <"/">
                                                                Visited token: <"(" at line 7 column 7>; Expected token: <"*">
                                                                Visited token: <"(" at line 7 column 7>; Expected token: <"&">
                                                              Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                            Return: Assignment(LOOKAHEAD FAILED)
                                                            Call:   Call(LOOKING AHEAD...)
                                                              Visited token: <"(" at line 7 column 7>; Expected token: <"(">
                                                              Consumed token: <<IDENTIFIER>: "printf" at line 7 column 1>
                                                              Call:   Call
                                                                Consumed token: <"(" at line 7 column 7>
                                                                Call:   ArgList
                                                                  Call:   Expression
                                                                    Call:   Expression00
                                                                      Call:   Expression01
                                                                        Call:   Expression02
                                                                          Call:   Expression03
                                                                            Call:   Expression04
                                                                              Call:   Expression05
                                                                                Call:   Expression06
                                                                                  Call:   Atom
                                                                                    Consumed token: <<INTEGER>: "1" at line 7 column 8>
                                                                                  Return: Atom
                                                                                Return: Expression06
                                                                              Return: Expression05
                                                                            Return: Expression04
                                                                          Return: Expression03
                                                                        Return: Expression02
                                                                      Return: Expression01
                                                                    Return: Expression00
                                                                  Return: Expression
                                                                  Consumed token: <"," at line 7 column 9>
                                                                  Call:   Expression
                                                                    Call:   Expression00
                                                                      Call:   Expression01
                                                                        Call:   Expression02
                                                                          Call:   Expression03
                                                                            Call:   Expression04
                                                                              Call:   Expression05
                                                                                Call:   Expression06
                                                                                  Consumed token: <<STRINGLIT>: ""Valor de 7 \0"" at line 7 column 11>
                                                                                Return: Expression06
                                                                              Return: Expression05
                                                                            Return: Expression04
                                                                          Return: Expression03
                                                                        Return: Expression02
                                                                      Return: Expression01
                                                                    Return: Expression00
                                                                  Return: Expression
                                                                Return: ArgList
                                                                Consumed token: <")" at line 7 column 26>
                                                              Return: Call
                                                            Return: statement
                                                          Return: stmblk
                                                          Call:   stmblk(LOOKING AHEAD...)
                                                            Call:   statement(LOOKING AHEAD...)
                                                              Call:   Flow(LOOKING AHEAD...)
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"break">
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"continue">
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"retry">
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"exit">
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"fallthru">
                                                              Return: Flow(LOOKAHEAD FAILED)
                                                              Call:   Loop(LOOKING AHEAD...)
                                                                Call:   ForStatement(LOOKING AHEAD...)
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"for">
                                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"while">
                                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"loop">
                                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"goto">
                                                              Return: Loop(LOOKAHEAD FAILED)
                                                              Call:   Branch(LOOKING AHEAD...)
                                                                Call:   IfStatement(LOOKING AHEAD...)
                                                                  Call:   IfTest(LOOKING AHEAD...)
                                                                    Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"if">
                                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                                    Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"switch">
                                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                                    Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"ifdef">
                                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                                              Return: Branch(LOOKAHEAD FAILED)
                                                              Call:   Return(LOOKING AHEAD...)
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"return">
                                                              Return: Return(LOOKAHEAD FAILED)
                                                              Visited token: <"\n": "
" at line 7 column 28>; Expected token: <<IDENTIFIER>>
                                                              Call:   ScopeModifier(LOOKING AHEAD...)
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"global">
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"public">
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"export">
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"override">
                                                              Return: ScopeModifier(LOOKAHEAD FAILED)
                                                              Call:   VarDeclare(LOOKING AHEAD...)
                                                                Call:   DataType(LOOKING AHEAD...)
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"atom">
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"integer">
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"sequence">
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"object">
                                                                  Visited token: <"\n": "
" at line 7 column 28>; Expected token: <<IDENTIFIER>>
                                                                Return: DataType(LOOKAHEAD FAILED)
                                                              Return: VarDeclare(LOOKAHEAD FAILED)
                                                              Call:   TypeDeclare(LOOKING AHEAD...)
                                                                Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"type">
                                                              Return: TypeDeclare(LOOKAHEAD FAILED)
                                                            Return: statement(LOOKAHEAD FAILED)
                                                            Visited token: <"\n": "
" at line 7 column 28>; Expected token: <"\n">
                                                          Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                          Call:   stmblk
                                                            Consumed token: <"\n": "
" at line 7 column 28>
                                                          Return: stmblk
                                                          Call:   stmblk(LOOKING AHEAD...)
                                                            Call:   statement(LOOKING AHEAD...)
                                                              Call:   Flow(LOOKING AHEAD...)
                                                                Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"break">
                                                                Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"continue">
                                                                Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"retry">
                                                                Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"exit">
                                                                Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"fallthru">
                                                              Return: Flow(LOOKAHEAD FAILED)
                                                              Call:   Loop(LOOKING AHEAD...)
                                                                Call:   ForStatement(LOOKING AHEAD...)
                                                                  Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"for">
                                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                                  Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"while">
                                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                                  Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"loop">
                                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                                Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"goto">
                                                              Return: Loop(LOOKAHEAD FAILED)
                                                              Call:   Branch(LOOKING AHEAD...)
                                                                Call:   IfStatement(LOOKING AHEAD...)
                                                                  Call:   IfTest(LOOKING AHEAD...)
                                                                    Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"if">
                                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                                    Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"switch">
                                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                                    Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"ifdef">
                                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                                              Return: Branch(LOOKAHEAD FAILED)
                                                              Call:   Return(LOOKING AHEAD...)
                                                                Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <"return">
                                                              Return: Return(LOOKAHEAD FAILED)
                                                              Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <<IDENTIFIER>>
                                                              Call:   Assignment(LOOKING AHEAD...)
                                                                Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                  Call:   Variable(LOOKING AHEAD...)
                                                                    Visited token: <"(" at line 8 column 7>; Expected token: <"[">
                                                                  Return: Variable(LOOKAHEAD FAILED)
                                                                  Visited token: <"(" at line 8 column 7>; Expected token: <",">
                                                                  Visited token: <"(" at line 8 column 7>; Expected token: <"=">
                                                                Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                  Visited token: <"(" at line 8 column 7>; Expected token: <"+">
                                                                  Visited token: <"(" at line 8 column 7>; Expected token: <"-">
                                                                  Visited token: <"(" at line 8 column 7>; Expected token: <"/">
                                                                  Visited token: <"(" at line 8 column 7>; Expected token: <"*">
                                                                  Visited token: <"(" at line 8 column 7>; Expected token: <"&">
                                                                Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                              Return: Assignment(LOOKAHEAD FAILED)
                                                              Call:   Call(LOOKING AHEAD...)
                                                                Visited token: <"(" at line 8 column 7>; Expected token: <"(">
                                                                Call:   stmblk
                                                                  Call:   statement
                                                                    Visited token: <<IDENTIFIER>: "printf" at line 8 column 1>; Expected token: <<IDENTIFIER>>
                                                                    Call:   Assignment(LOOKING AHEAD...)
                                                                      Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                        Call:   Variable(LOOKING AHEAD...)
                                                                          Visited token: <"(" at line 8 column 7>; Expected token: <"[">
                                                                        Return: Variable(LOOKAHEAD FAILED)
                                                                        Visited token: <"(" at line 8 column 7>; Expected token: <",">
                                                                        Visited token: <"(" at line 8 column 7>; Expected token: <"=">
                                                                      Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                      Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                        Visited token: <"(" at line 8 column 7>; Expected token: <"+">
                                                                        Visited token: <"(" at line 8 column 7>; Expected token: <"-">
                                                                        Visited token: <"(" at line 8 column 7>; Expected token: <"/">
                                                                        Visited token: <"(" at line 8 column 7>; Expected token: <"*">
                                                                        Visited token: <"(" at line 8 column 7>; Expected token: <"&">
                                                                      Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                    Return: Assignment(LOOKAHEAD FAILED)
                                                                    Call:   Call(LOOKING AHEAD...)
                                                                      Visited token: <"(" at line 8 column 7>; Expected token: <"(">
                                                                      Consumed token: <<IDENTIFIER>: "printf" at line 8 column 1>
                                                                      Call:   Call
                                                                        Consumed token: <"(" at line 8 column 7>
                                                                        Call:   ArgList
                                                                          Call:   Expression
                                                                            Call:   Expression00
                                                                              Call:   Expression01
                                                                                Call:   Expression02
                                                                                  Call:   Expression03
                                                                                    Call:   Expression04
                                                                                      Call:   Expression05
                                                                                        Call:   Expression06
                                                                                          Call:   Atom
                                                                                            Consumed token: <<INTEGER>: "1" at line 8 column 8>
                                                                                          Return: Atom
                                                                                        Return: Expression06
                                                                                      Return: Expression05
                                                                                    Return: Expression04
                                                                                  Return: Expression03
                                                                                Return: Expression02
                                                                              Return: Expression01
                                                                            Return: Expression00
                                                                          Return: Expression
                                                                          Consumed token: <"," at line 8 column 9>
                                                                          Call:   Expression
                                                                            Call:   Expression00
                                                                              Call:   Expression01
                                                                                Call:   Expression02
                                                                                  Call:   Expression03
                                                                                    Call:   Expression04
                                                                                      Call:   Expression05
                                                                                        Call:   Expression06
                                                                                          Consumed token: <<STRINGLIT>: ""Valor de 8 \e"" at line 8 column 11>
                                                                                        Return: Expression06
                                                                                      Return: Expression05
                                                                                    Return: Expression04
                                                                                  Return: Expression03
                                                                                Return: Expression02
                                                                              Return: Expression01
                                                                            Return: Expression00
                                                                          Return: Expression
                                                                        Return: ArgList
                                                                        Consumed token: <")" at line 8 column 26>
                                                                      Return: Call
                                                                    Return: statement
                                                                  Return: stmblk
                                                                  Call:   stmblk(LOOKING AHEAD...)
                                                                    Call:   statement(LOOKING AHEAD...)
                                                                      Call:   Flow(LOOKING AHEAD...)
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"break">
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"continue">
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"retry">
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"exit">
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"fallthru">
                                                                      Return: Flow(LOOKAHEAD FAILED)
                                                                      Call:   Loop(LOOKING AHEAD...)
                                                                        Call:   ForStatement(LOOKING AHEAD...)
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"for">
                                                                        Return: ForStatement(LOOKAHEAD FAILED)
                                                                        Call:   WhileStatement(LOOKING AHEAD...)
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"while">
                                                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                                                        Call:   LoopStatement(LOOKING AHEAD...)
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"loop">
                                                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"goto">
                                                                      Return: Loop(LOOKAHEAD FAILED)
                                                                      Call:   Branch(LOOKING AHEAD...)
                                                                        Call:   IfStatement(LOOKING AHEAD...)
                                                                          Call:   IfTest(LOOKING AHEAD...)
                                                                            Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"if">
                                                                          Return: IfTest(LOOKAHEAD FAILED)
                                                                        Return: IfStatement(LOOKAHEAD FAILED)
                                                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                                                          Call:   SwitchTest(LOOKING AHEAD...)
                                                                            Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"switch">
                                                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                                                          Call:   IfDefTest(LOOKING AHEAD...)
                                                                            Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"ifdef">
                                                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                      Return: Branch(LOOKAHEAD FAILED)
                                                                      Call:   Return(LOOKING AHEAD...)
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"return">
                                                                      Return: Return(LOOKAHEAD FAILED)
                                                                      Visited token: <"\n": "
" at line 8 column 28>; Expected token: <<IDENTIFIER>>
                                                                      Call:   ScopeModifier(LOOKING AHEAD...)
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"global">
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"public">
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"export">
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"override">
                                                                      Return: ScopeModifier(LOOKAHEAD FAILED)
                                                                      Call:   VarDeclare(LOOKING AHEAD...)
                                                                        Call:   DataType(LOOKING AHEAD...)
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"atom">
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"integer">
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"sequence">
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"object">
                                                                          Visited token: <"\n": "
" at line 8 column 28>; Expected token: <<IDENTIFIER>>
                                                                        Return: DataType(LOOKAHEAD FAILED)
                                                                      Return: VarDeclare(LOOKAHEAD FAILED)
                                                                      Call:   TypeDeclare(LOOKING AHEAD...)
                                                                        Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"type">
                                                                      Return: TypeDeclare(LOOKAHEAD FAILED)
                                                                    Return: statement(LOOKAHEAD FAILED)
                                                                    Visited token: <"\n": "
" at line 8 column 28>; Expected token: <"\n">
                                                                  Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                                  Call:   stmblk
                                                                    Consumed token: <"\n": "
" at line 8 column 28>
                                                                  Return: stmblk
                                                                  Call:   stmblk(LOOKING AHEAD...)
                                                                    Call:   statement(LOOKING AHEAD...)
                                                                      Call:   Flow(LOOKING AHEAD...)
                                                                        Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"break">
                                                                        Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"continue">
                                                                        Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"retry">
                                                                        Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"exit">
                                                                        Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"fallthru">
                                                                      Return: Flow(LOOKAHEAD FAILED)
                                                                      Call:   Loop(LOOKING AHEAD...)
                                                                        Call:   ForStatement(LOOKING AHEAD...)
                                                                          Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"for">
                                                                        Return: ForStatement(LOOKAHEAD FAILED)
                                                                        Call:   WhileStatement(LOOKING AHEAD...)
                                                                          Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"while">
                                                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                                                        Call:   LoopStatement(LOOKING AHEAD...)
                                                                          Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"loop">
                                                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                                                        Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"goto">
                                                                      Return: Loop(LOOKAHEAD FAILED)
                                                                      Call:   Branch(LOOKING AHEAD...)
                                                                        Call:   IfStatement(LOOKING AHEAD...)
                                                                          Call:   IfTest(LOOKING AHEAD...)
                                                                            Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"if">
                                                                          Return: IfTest(LOOKAHEAD FAILED)
                                                                        Return: IfStatement(LOOKAHEAD FAILED)
                                                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                                                          Call:   SwitchTest(LOOKING AHEAD...)
                                                                            Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"switch">
                                                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                                                          Call:   IfDefTest(LOOKING AHEAD...)
                                                                            Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"ifdef">
                                                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                      Return: Branch(LOOKAHEAD FAILED)
                                                                      Call:   Return(LOOKING AHEAD...)
                                                                        Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <"return">
                                                                      Return: Return(LOOKAHEAD FAILED)
                                                                      Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <<IDENTIFIER>>
                                                                      Call:   Assignment(LOOKING AHEAD...)
                                                                        Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                          Call:   Variable(LOOKING AHEAD...)
                                                                            Visited token: <"(" at line 9 column 7>; Expected token: <"[">
                                                                          Return: Variable(LOOKAHEAD FAILED)
                                                                          Visited token: <"(" at line 9 column 7>; Expected token: <",">
                                                                          Visited token: <"(" at line 9 column 7>; Expected token: <"=">
                                                                        Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                        Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                          Visited token: <"(" at line 9 column 7>; Expected token: <"+">
                                                                          Visited token: <"(" at line 9 column 7>; Expected token: <"-">
                                                                          Visited token: <"(" at line 9 column 7>; Expected token: <"/">
                                                                          Visited token: <"(" at line 9 column 7>; Expected token: <"*">
                                                                          Visited token: <"(" at line 9 column 7>; Expected token: <"&">
                                                                        Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                      Return: Assignment(LOOKAHEAD FAILED)
                                                                      Call:   Call(LOOKING AHEAD...)
                                                                        Visited token: <"(" at line 9 column 7>; Expected token: <"(">
                                                                        Call:   stmblk
                                                                          Call:   statement
                                                                            Visited token: <<IDENTIFIER>: "printf" at line 9 column 1>; Expected token: <<IDENTIFIER>>
                                                                            Call:   Assignment(LOOKING AHEAD...)
                                                                              Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                                Call:   Variable(LOOKING AHEAD...)
                                                                                  Visited token: <"(" at line 9 column 7>; Expected token: <"[">
                                                                                Return: Variable(LOOKAHEAD FAILED)
                                                                                Visited token: <"(" at line 9 column 7>; Expected token: <",">
                                                                                Visited token: <"(" at line 9 column 7>; Expected token: <"=">
                                                                              Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                              Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                                Visited token: <"(" at line 9 column 7>; Expected token: <"+">
                                                                                Visited token: <"(" at line 9 column 7>; Expected token: <"-">
                                                                                Visited token: <"(" at line 9 column 7>; Expected token: <"/">
                                                                                Visited token: <"(" at line 9 column 7>; Expected token: <"*">
                                                                                Visited token: <"(" at line 9 column 7>; Expected token: <"&">
                                                                              Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                            Return: Assignment(LOOKAHEAD FAILED)
                                                                            Call:   Call(LOOKING AHEAD...)
                                                                              Visited token: <"(" at line 9 column 7>; Expected token: <"(">
                                                                              Consumed token: <<IDENTIFIER>: "printf" at line 9 column 1>
                                                                              Call:   Call
                                                                                Consumed token: <"(" at line 9 column 7>
                                                                                Call:   ArgList
                                                                                  Call:   Expression
                                                                                    Call:   Expression00
                                                                                      Call:   Expression01
                                                                                        Call:   Expression02
                                                                                          Call:   Expression03
                                                                                            Call:   Expression04
                                                                                              Call:   Expression05
                                                                                                Call:   Expression06
                                                                                                  Call:   Atom
                                                                                                    Consumed token: <<INTEGER>: "1" at line 9 column 8>
                                                                                                  Return: Atom
                                                                                                Return: Expression06
                                                                                              Return: Expression05
                                                                                            Return: Expression04
                                                                                          Return: Expression03
                                                                                        Return: Expression02
                                                                                      Return: Expression01
                                                                                    Return: Expression00
                                                                                  Return: Expression
                                                                                  Consumed token: <"," at line 9 column 9>
                                                                                  Call:   Expression
                                                                                    Call:   Expression00
                                                                                      Call:   Expression01
                                                                                        Call:   Expression02
                                                                                          Call:   Expression03
                                                                                            Call:   Expression04
                                                                                              Call:   Expression05
                                                                                                Call:   Expression06
                                                                                                  Consumed token: <<STRINGLIT>: ""Valor de 9 \E"" at line 9 column 11>
                                                                                                Return: Expression06
                                                                                              Return: Expression05
                                                                                            Return: Expression04
                                                                                          Return: Expression03
                                                                                        Return: Expression02
                                                                                      Return: Expression01
                                                                                    Return: Expression00
                                                                                  Return: Expression
                                                                                Return: ArgList
                                                                                Consumed token: <")" at line 9 column 26>
                                                                              Return: Call
                                                                            Return: statement
                                                                          Return: stmblk
                                                                          Call:   stmblk(LOOKING AHEAD...)
                                                                            Call:   statement(LOOKING AHEAD...)
                                                                              Call:   Flow(LOOKING AHEAD...)
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"break">
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"continue">
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"retry">
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"exit">
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"fallthru">
                                                                              Return: Flow(LOOKAHEAD FAILED)
                                                                              Call:   Loop(LOOKING AHEAD...)
                                                                                Call:   ForStatement(LOOKING AHEAD...)
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"for">
                                                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"while">
                                                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"loop">
                                                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"goto">
                                                                              Return: Loop(LOOKAHEAD FAILED)
                                                                              Call:   Branch(LOOKING AHEAD...)
                                                                                Call:   IfStatement(LOOKING AHEAD...)
                                                                                  Call:   IfTest(LOOKING AHEAD...)
                                                                                    Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"if">
                                                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                                                    Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"switch">
                                                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                                                    Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"ifdef">
                                                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                              Return: Branch(LOOKAHEAD FAILED)
                                                                              Call:   Return(LOOKING AHEAD...)
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"return">
                                                                              Return: Return(LOOKAHEAD FAILED)
                                                                              Visited token: <"\n": "
" at line 9 column 28>; Expected token: <<IDENTIFIER>>
                                                                              Call:   ScopeModifier(LOOKING AHEAD...)
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"global">
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"public">
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"export">
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"override">
                                                                              Return: ScopeModifier(LOOKAHEAD FAILED)
                                                                              Call:   VarDeclare(LOOKING AHEAD...)
                                                                                Call:   DataType(LOOKING AHEAD...)
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"atom">
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"integer">
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"sequence">
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"object">
                                                                                  Visited token: <"\n": "
" at line 9 column 28>; Expected token: <<IDENTIFIER>>
                                                                                Return: DataType(LOOKAHEAD FAILED)
                                                                              Return: VarDeclare(LOOKAHEAD FAILED)
                                                                              Call:   TypeDeclare(LOOKING AHEAD...)
                                                                                Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"type">
                                                                              Return: TypeDeclare(LOOKAHEAD FAILED)
                                                                            Return: statement(LOOKAHEAD FAILED)
                                                                            Visited token: <"\n": "
" at line 9 column 28>; Expected token: <"\n">
                                                                          Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                                          Call:   stmblk
                                                                            Consumed token: <"\n": "
" at line 9 column 28>
                                                                          Return: stmblk
                                                                          Call:   stmblk(LOOKING AHEAD...)
                                                                            Call:   statement(LOOKING AHEAD...)
                                                                              Call:   Flow(LOOKING AHEAD...)
                                                                                Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"break">
                                                                                Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"continue">
                                                                                Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"retry">
                                                                                Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"exit">
                                                                                Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"fallthru">
                                                                              Return: Flow(LOOKAHEAD FAILED)
                                                                              Call:   Loop(LOOKING AHEAD...)
                                                                                Call:   ForStatement(LOOKING AHEAD...)
                                                                                  Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"for">
                                                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                                                  Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"while">
                                                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                                                  Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"loop">
                                                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                                                Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"goto">
                                                                              Return: Loop(LOOKAHEAD FAILED)
                                                                              Call:   Branch(LOOKING AHEAD...)
                                                                                Call:   IfStatement(LOOKING AHEAD...)
                                                                                  Call:   IfTest(LOOKING AHEAD...)
                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"if">
                                                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"switch">
                                                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"ifdef">
                                                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                              Return: Branch(LOOKAHEAD FAILED)
                                                                              Call:   Return(LOOKING AHEAD...)
                                                                                Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <"return">
                                                                              Return: Return(LOOKAHEAD FAILED)
                                                                              Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <<IDENTIFIER>>
                                                                              Call:   Assignment(LOOKING AHEAD...)
                                                                                Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                                  Call:   Variable(LOOKING AHEAD...)
                                                                                    Visited token: <"(" at line 10 column 7>; Expected token: <"[">
                                                                                  Return: Variable(LOOKAHEAD FAILED)
                                                                                  Visited token: <"(" at line 10 column 7>; Expected token: <",">
                                                                                  Visited token: <"(" at line 10 column 7>; Expected token: <"=">
                                                                                Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                                Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                                  Visited token: <"(" at line 10 column 7>; Expected token: <"+">
                                                                                  Visited token: <"(" at line 10 column 7>; Expected token: <"-">
                                                                                  Visited token: <"(" at line 10 column 7>; Expected token: <"/">
                                                                                  Visited token: <"(" at line 10 column 7>; Expected token: <"*">
                                                                                  Visited token: <"(" at line 10 column 7>; Expected token: <"&">
                                                                                Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                              Return: Assignment(LOOKAHEAD FAILED)
                                                                              Call:   Call(LOOKING AHEAD...)
                                                                                Visited token: <"(" at line 10 column 7>; Expected token: <"(">
                                                                                Call:   stmblk
                                                                                  Call:   statement
                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 10 column 1>; Expected token: <<IDENTIFIER>>
                                                                                    Call:   Assignment(LOOKING AHEAD...)
                                                                                      Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                                        Call:   Variable(LOOKING AHEAD...)
                                                                                          Visited token: <"(" at line 10 column 7>; Expected token: <"[">
                                                                                        Return: Variable(LOOKAHEAD FAILED)
                                                                                        Visited token: <"(" at line 10 column 7>; Expected token: <",">
                                                                                        Visited token: <"(" at line 10 column 7>; Expected token: <"=">
                                                                                      Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                                      Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                                        Visited token: <"(" at line 10 column 7>; Expected token: <"+">
                                                                                        Visited token: <"(" at line 10 column 7>; Expected token: <"-">
                                                                                        Visited token: <"(" at line 10 column 7>; Expected token: <"/">
                                                                                        Visited token: <"(" at line 10 column 7>; Expected token: <"*">
                                                                                        Visited token: <"(" at line 10 column 7>; Expected token: <"&">
                                                                                      Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                                    Return: Assignment(LOOKAHEAD FAILED)
                                                                                    Call:   Call(LOOKING AHEAD...)
                                                                                      Visited token: <"(" at line 10 column 7>; Expected token: <"(">
                                                                                      Consumed token: <<IDENTIFIER>: "printf" at line 10 column 1>
                                                                                      Call:   Call
                                                                                        Consumed token: <"(" at line 10 column 7>
                                                                                        Call:   ArgList
                                                                                          Call:   Expression
                                                                                            Call:   Expression00
                                                                                              Call:   Expression01
                                                                                                Call:   Expression02
                                                                                                  Call:   Expression03
                                                                                                    Call:   Expression04
                                                                                                      Call:   Expression05
                                                                                                        Call:   Expression06
                                                                                                          Call:   Atom
                                                                                                            Consumed token: <<INTEGER>: "1" at line 10 column 8>
                                                                                                          Return: Atom
                                                                                                        Return: Expression06
                                                                                                      Return: Expression05
                                                                                                    Return: Expression04
                                                                                                  Return: Expression03
                                                                                                Return: Expression02
                                                                                              Return: Expression01
                                                                                            Return: Expression00
                                                                                          Return: Expression
                                                                                          Consumed token: <"," at line 10 column 9>
                                                                                          Call:   Expression
                                                                                            Call:   Expression00
                                                                                              Call:   Expression01
                                                                                                Call:   Expression02
                                                                                                  Call:   Expression03
                                                                                                    Call:   Expression04
                                                                                                      Call:   Expression05
                                                                                                        Call:   Expression06
                                                                                                          Consumed token: <<STRINGLIT>: ""Valor de 10 \x5F"" at line 10 column 11>
                                                                                                        Return: Expression06
                                                                                                      Return: Expression05
                                                                                                    Return: Expression04
                                                                                                  Return: Expression03
                                                                                                Return: Expression02
                                                                                              Return: Expression01
                                                                                            Return: Expression00
                                                                                          Return: Expression
                                                                                        Return: ArgList
                                                                                        Consumed token: <")" at line 10 column 29>
                                                                                      Return: Call
                                                                                    Return: statement
                                                                                  Return: stmblk
                                                                                  Call:   stmblk(LOOKING AHEAD...)
                                                                                    Call:   statement(LOOKING AHEAD...)
                                                                                      Call:   Flow(LOOKING AHEAD...)
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"break">
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"continue">
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"retry">
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"exit">
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"fallthru">
                                                                                      Return: Flow(LOOKAHEAD FAILED)
                                                                                      Call:   Loop(LOOKING AHEAD...)
                                                                                        Call:   ForStatement(LOOKING AHEAD...)
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"for">
                                                                                        Return: ForStatement(LOOKAHEAD FAILED)
                                                                                        Call:   WhileStatement(LOOKING AHEAD...)
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"while">
                                                                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                                                                        Call:   LoopStatement(LOOKING AHEAD...)
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"loop">
                                                                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"goto">
                                                                                      Return: Loop(LOOKAHEAD FAILED)
                                                                                      Call:   Branch(LOOKING AHEAD...)
                                                                                        Call:   IfStatement(LOOKING AHEAD...)
                                                                                          Call:   IfTest(LOOKING AHEAD...)
                                                                                            Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"if">
                                                                                          Return: IfTest(LOOKAHEAD FAILED)
                                                                                        Return: IfStatement(LOOKAHEAD FAILED)
                                                                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                                                                          Call:   SwitchTest(LOOKING AHEAD...)
                                                                                            Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"switch">
                                                                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                                                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                                                                          Call:   IfDefTest(LOOKING AHEAD...)
                                                                                            Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"ifdef">
                                                                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                                                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                                      Return: Branch(LOOKAHEAD FAILED)
                                                                                      Call:   Return(LOOKING AHEAD...)
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"return">
                                                                                      Return: Return(LOOKAHEAD FAILED)
                                                                                      Visited token: <"\n": "
" at line 10 column 31>; Expected token: <<IDENTIFIER>>
                                                                                      Call:   ScopeModifier(LOOKING AHEAD...)
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"global">
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"public">
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"export">
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"override">
                                                                                      Return: ScopeModifier(LOOKAHEAD FAILED)
                                                                                      Call:   VarDeclare(LOOKING AHEAD...)
                                                                                        Call:   DataType(LOOKING AHEAD...)
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"atom">
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"integer">
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"sequence">
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"object">
                                                                                          Visited token: <"\n": "
" at line 10 column 31>; Expected token: <<IDENTIFIER>>
                                                                                        Return: DataType(LOOKAHEAD FAILED)
                                                                                      Return: VarDeclare(LOOKAHEAD FAILED)
                                                                                      Call:   TypeDeclare(LOOKING AHEAD...)
                                                                                        Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"type">
                                                                                      Return: TypeDeclare(LOOKAHEAD FAILED)
                                                                                    Return: statement(LOOKAHEAD FAILED)
                                                                                    Visited token: <"\n": "
" at line 10 column 31>; Expected token: <"\n">
                                                                                  Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                                                  Call:   stmblk
                                                                                    Consumed token: <"\n": "
" at line 10 column 31>
                                                                                  Return: stmblk
                                                                                  Call:   stmblk(LOOKING AHEAD...)
                                                                                    Call:   statement(LOOKING AHEAD...)
                                                                                      Call:   Flow(LOOKING AHEAD...)
                                                                                        Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"break">
                                                                                        Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"continue">
                                                                                        Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"retry">
                                                                                        Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"exit">
                                                                                        Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"fallthru">
                                                                                      Return: Flow(LOOKAHEAD FAILED)
                                                                                      Call:   Loop(LOOKING AHEAD...)
                                                                                        Call:   ForStatement(LOOKING AHEAD...)
                                                                                          Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"for">
                                                                                        Return: ForStatement(LOOKAHEAD FAILED)
                                                                                        Call:   WhileStatement(LOOKING AHEAD...)
                                                                                          Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"while">
                                                                                        Return: WhileStatement(LOOKAHEAD FAILED)
                                                                                        Call:   LoopStatement(LOOKING AHEAD...)
                                                                                          Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"loop">
                                                                                        Return: LoopStatement(LOOKAHEAD FAILED)
                                                                                        Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"goto">
                                                                                      Return: Loop(LOOKAHEAD FAILED)
                                                                                      Call:   Branch(LOOKING AHEAD...)
                                                                                        Call:   IfStatement(LOOKING AHEAD...)
                                                                                          Call:   IfTest(LOOKING AHEAD...)
                                                                                            Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"if">
                                                                                          Return: IfTest(LOOKAHEAD FAILED)
                                                                                        Return: IfStatement(LOOKAHEAD FAILED)
                                                                                        Call:   SwitchStatement(LOOKING AHEAD...)
                                                                                          Call:   SwitchTest(LOOKING AHEAD...)
                                                                                            Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"switch">
                                                                                          Return: SwitchTest(LOOKAHEAD FAILED)
                                                                                        Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                                        Call:   IfDefStatement(LOOKING AHEAD...)
                                                                                          Call:   IfDefTest(LOOKING AHEAD...)
                                                                                            Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"ifdef">
                                                                                          Return: IfDefTest(LOOKAHEAD FAILED)
                                                                                        Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                                      Return: Branch(LOOKAHEAD FAILED)
                                                                                      Call:   Return(LOOKING AHEAD...)
                                                                                        Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <"return">
                                                                                      Return: Return(LOOKAHEAD FAILED)
                                                                                      Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <<IDENTIFIER>>
                                                                                      Call:   Assignment(LOOKING AHEAD...)
                                                                                        Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                                          Call:   Variable(LOOKING AHEAD...)
                                                                                            Visited token: <"(" at line 11 column 7>; Expected token: <"[">
                                                                                          Return: Variable(LOOKAHEAD FAILED)
                                                                                          Visited token: <"(" at line 11 column 7>; Expected token: <",">
                                                                                          Visited token: <"(" at line 11 column 7>; Expected token: <"=">
                                                                                        Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                                        Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                                          Visited token: <"(" at line 11 column 7>; Expected token: <"+">
                                                                                          Visited token: <"(" at line 11 column 7>; Expected token: <"-">
                                                                                          Visited token: <"(" at line 11 column 7>; Expected token: <"/">
                                                                                          Visited token: <"(" at line 11 column 7>; Expected token: <"*">
                                                                                          Visited token: <"(" at line 11 column 7>; Expected token: <"&">
                                                                                        Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                                      Return: Assignment(LOOKAHEAD FAILED)
                                                                                      Call:   Call(LOOKING AHEAD...)
                                                                                        Visited token: <"(" at line 11 column 7>; Expected token: <"(">
                                                                                        Call:   stmblk
                                                                                          Call:   statement
                                                                                            Visited token: <<IDENTIFIER>: "printf" at line 11 column 1>; Expected token: <<IDENTIFIER>>
                                                                                            Call:   Assignment(LOOKING AHEAD...)
                                                                                              Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                                                Call:   Variable(LOOKING AHEAD...)
                                                                                                  Visited token: <"(" at line 11 column 7>; Expected token: <"[">
                                                                                                Return: Variable(LOOKAHEAD FAILED)
                                                                                                Visited token: <"(" at line 11 column 7>; Expected token: <",">
                                                                                                Visited token: <"(" at line 11 column 7>; Expected token: <"=">
                                                                                              Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                                              Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                                                Visited token: <"(" at line 11 column 7>; Expected token: <"+">
                                                                                                Visited token: <"(" at line 11 column 7>; Expected token: <"-">
                                                                                                Visited token: <"(" at line 11 column 7>; Expected token: <"/">
                                                                                                Visited token: <"(" at line 11 column 7>; Expected token: <"*">
                                                                                                Visited token: <"(" at line 11 column 7>; Expected token: <"&">
                                                                                              Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                                            Return: Assignment(LOOKAHEAD FAILED)
                                                                                            Call:   Call(LOOKING AHEAD...)
                                                                                              Visited token: <"(" at line 11 column 7>; Expected token: <"(">
                                                                                              Consumed token: <<IDENTIFIER>: "printf" at line 11 column 1>
                                                                                              Call:   Call
                                                                                                Consumed token: <"(" at line 11 column 7>
                                                                                                Call:   ArgList
                                                                                                  Call:   Expression
                                                                                                    Call:   Expression00
                                                                                                      Call:   Expression01
                                                                                                        Call:   Expression02
                                                                                                          Call:   Expression03
                                                                                                            Call:   Expression04
                                                                                                              Call:   Expression05
                                                                                                                Call:   Expression06
                                                                                                                  Call:   Atom
                                                                                                                    Consumed token: <<INTEGER>: "1" at line 11 column 8>
                                                                                                                  Return: Atom
                                                                                                                Return: Expression06
                                                                                                              Return: Expression05
                                                                                                            Return: Expression04
                                                                                                          Return: Expression03
                                                                                                        Return: Expression02
                                                                                                      Return: Expression01
                                                                                                    Return: Expression00
                                                                                                  Return: Expression
                                                                                                  Consumed token: <"," at line 11 column 9>
                                                                                                  Call:   Expression
                                                                                                    Call:   Expression00
                                                                                                      Call:   Expression01
                                                                                                        Call:   Expression02
                                                                                                          Call:   Expression03
                                                                                                            Call:   Expression04
                                                                                                              Call:   Expression05
                                                                                                                Call:   Expression06
                                                                                                                  Consumed token: <<STRINGLIT>: ""Valor de 11 \u2A7C"" at line 11 column 11>
                                                                                                                Return: Expression06
                                                                                                              Return: Expression05
                                                                                                            Return: Expression04
                                                                                                          Return: Expression03
                                                                                                        Return: Expression02
                                                                                                      Return: Expression01
                                                                                                    Return: Expression00
                                                                                                  Return: Expression
                                                                                                Return: ArgList
                                                                                                Consumed token: <")" at line 11 column 31>
                                                                                              Return: Call
                                                                                            Return: statement
                                                                                          Return: stmblk
                                                                                          Call:   stmblk(LOOKING AHEAD...)
                                                                                            Call:   statement(LOOKING AHEAD...)
                                                                                              Call:   Flow(LOOKING AHEAD...)
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"break">
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"continue">
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"retry">
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"exit">
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"fallthru">
                                                                                              Return: Flow(LOOKAHEAD FAILED)
                                                                                              Call:   Loop(LOOKING AHEAD...)
                                                                                                Call:   ForStatement(LOOKING AHEAD...)
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"for">
                                                                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"while">
                                                                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"loop">
                                                                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"goto">
                                                                                              Return: Loop(LOOKAHEAD FAILED)
                                                                                              Call:   Branch(LOOKING AHEAD...)
                                                                                                Call:   IfStatement(LOOKING AHEAD...)
                                                                                                  Call:   IfTest(LOOKING AHEAD...)
                                                                                                    Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"if">
                                                                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                                                                    Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"switch">
                                                                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                                                                    Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"ifdef">
                                                                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                                              Return: Branch(LOOKAHEAD FAILED)
                                                                                              Call:   Return(LOOKING AHEAD...)
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"return">
                                                                                              Return: Return(LOOKAHEAD FAILED)
                                                                                              Visited token: <"\n": "
" at line 11 column 33>; Expected token: <<IDENTIFIER>>
                                                                                              Call:   ScopeModifier(LOOKING AHEAD...)
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"global">
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"public">
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"export">
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"override">
                                                                                              Return: ScopeModifier(LOOKAHEAD FAILED)
                                                                                              Call:   VarDeclare(LOOKING AHEAD...)
                                                                                                Call:   DataType(LOOKING AHEAD...)
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"atom">
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"integer">
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"sequence">
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"object">
                                                                                                  Visited token: <"\n": "
" at line 11 column 33>; Expected token: <<IDENTIFIER>>
                                                                                                Return: DataType(LOOKAHEAD FAILED)
                                                                                              Return: VarDeclare(LOOKAHEAD FAILED)
                                                                                              Call:   TypeDeclare(LOOKING AHEAD...)
                                                                                                Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"type">
                                                                                              Return: TypeDeclare(LOOKAHEAD FAILED)
                                                                                            Return: statement(LOOKAHEAD FAILED)
                                                                                            Visited token: <"\n": "
" at line 11 column 33>; Expected token: <"\n">
                                                                                          Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                                                          Call:   stmblk
                                                                                            Consumed token: <"\n": "
" at line 11 column 33>
                                                                                          Return: stmblk
                                                                                          Call:   stmblk(LOOKING AHEAD...)
                                                                                            Call:   statement(LOOKING AHEAD...)
                                                                                              Call:   Flow(LOOKING AHEAD...)
                                                                                                Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"break">
                                                                                                Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"continue">
                                                                                                Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"retry">
                                                                                                Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"exit">
                                                                                                Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"fallthru">
                                                                                              Return: Flow(LOOKAHEAD FAILED)
                                                                                              Call:   Loop(LOOKING AHEAD...)
                                                                                                Call:   ForStatement(LOOKING AHEAD...)
                                                                                                  Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"for">
                                                                                                Return: ForStatement(LOOKAHEAD FAILED)
                                                                                                Call:   WhileStatement(LOOKING AHEAD...)
                                                                                                  Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"while">
                                                                                                Return: WhileStatement(LOOKAHEAD FAILED)
                                                                                                Call:   LoopStatement(LOOKING AHEAD...)
                                                                                                  Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"loop">
                                                                                                Return: LoopStatement(LOOKAHEAD FAILED)
                                                                                                Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"goto">
                                                                                              Return: Loop(LOOKAHEAD FAILED)
                                                                                              Call:   Branch(LOOKING AHEAD...)
                                                                                                Call:   IfStatement(LOOKING AHEAD...)
                                                                                                  Call:   IfTest(LOOKING AHEAD...)
                                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"if">
                                                                                                  Return: IfTest(LOOKAHEAD FAILED)
                                                                                                Return: IfStatement(LOOKAHEAD FAILED)
                                                                                                Call:   SwitchStatement(LOOKING AHEAD...)
                                                                                                  Call:   SwitchTest(LOOKING AHEAD...)
                                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"switch">
                                                                                                  Return: SwitchTest(LOOKAHEAD FAILED)
                                                                                                Return: SwitchStatement(LOOKAHEAD FAILED)
                                                                                                Call:   IfDefStatement(LOOKING AHEAD...)
                                                                                                  Call:   IfDefTest(LOOKING AHEAD...)
                                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"ifdef">
                                                                                                  Return: IfDefTest(LOOKAHEAD FAILED)
                                                                                                Return: IfDefStatement(LOOKAHEAD FAILED)
                                                                                              Return: Branch(LOOKAHEAD FAILED)
                                                                                              Call:   Return(LOOKING AHEAD...)
                                                                                                Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <"return">
                                                                                              Return: Return(LOOKAHEAD FAILED)
                                                                                              Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <<IDENTIFIER>>
                                                                                              Call:   Assignment(LOOKING AHEAD...)
                                                                                                Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                                                  Call:   Variable(LOOKING AHEAD...)
                                                                                                    Visited token: <"(" at line 12 column 7>; Expected token: <"[">
                                                                                                  Return: Variable(LOOKAHEAD FAILED)
                                                                                                  Visited token: <"(" at line 12 column 7>; Expected token: <",">
                                                                                                  Visited token: <"(" at line 12 column 7>; Expected token: <"=">
                                                                                                Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                                                Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                                                  Visited token: <"(" at line 12 column 7>; Expected token: <"+">
                                                                                                  Visited token: <"(" at line 12 column 7>; Expected token: <"-">
                                                                                                  Visited token: <"(" at line 12 column 7>; Expected token: <"/">
                                                                                                  Visited token: <"(" at line 12 column 7>; Expected token: <"*">
                                                                                                  Visited token: <"(" at line 12 column 7>; Expected token: <"&">
                                                                                                Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                                              Return: Assignment(LOOKAHEAD FAILED)
                                                                                              Call:   Call(LOOKING AHEAD...)
                                                                                                Visited token: <"(" at line 12 column 7>; Expected token: <"(">
                                                                                                Call:   stmblk
                                                                                                  Call:   statement
                                                                                                    Visited token: <<IDENTIFIER>: "printf" at line 12 column 1>; Expected token: <<IDENTIFIER>>
                                                                                                    Call:   Assignment(LOOKING AHEAD...)
                                                                                                      Call:   AssignmentMulti(LOOKING AHEAD...)
                                                                                                        Call:   Variable(LOOKING AHEAD...)
                                                                                                          Visited token: <"(" at line 12 column 7>; Expected token: <"[">
                                                                                                        Return: Variable(LOOKAHEAD FAILED)
                                                                                                        Visited token: <"(" at line 12 column 7>; Expected token: <",">
                                                                                                        Visited token: <"(" at line 12 column 7>; Expected token: <"=">
                                                                                                      Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                                                                      Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                                                                        Visited token: <"(" at line 12 column 7>; Expected token: <"+">
                                                                                                        Visited token: <"(" at line 12 column 7>; Expected token: <"-">
                                                                                                        Visited token: <"(" at line 12 column 7>; Expected token: <"/">
                                                                                                        Visited token: <"(" at line 12 column 7>; Expected token: <"*">
                                                                                                        Visited token: <"(" at line 12 column 7>; Expected token: <"&">
                                                                                                      Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                                                                    Return: Assignment(LOOKAHEAD FAILED)
                                                                                                    Call:   Call(LOOKING AHEAD...)
                                                                                                      Visited token: <"(" at line 12 column 7>; Expected token: <"(">
                                                                                                      Consumed token: <<IDENTIFIER>: "printf" at line 12 column 1>
                                                                                                      Call:   Call
                                                                                                        Consumed token: <"(" at line 12 column 7>
                                                                                                        Call:   ArgList
                                                                                                          Call:   Expression
                                                                                                            Call:   Expression00
                                                                                                              Call:   Expression01
                                                                                                                Call:   Expression02
                                                                                                                  Call:   Expression03
                                                                                                                    Call:   Expression04
                                                                                                                      Call:   Expression05
                                                                                                                        Call:   Expression06
                                                                                                                          Call:   Atom
                                                                                                                            Consumed token: <<INTEGER>: "1" at line 12 column 8>
                                                                                                                          Return: Atom
                                                                                                                        Return: Expression06
                                                                                                                      Return: Expression05
                                                                                                                    Return: Expression04
                                                                                                                  Return: Expression03
                                                                                                                Return: Expression02
                                                                                                              Return: Expression01
                                                                                                            Return: Expression00
                                                                                                          Return: Expression
                                                                                                          Consumed token: <"," at line 12 column 9>
                                                                                                          Call:   Expression
                                                                                                            Call:   Expression00
                                                                                                              Call:   Expression01
                                                                                                                Call:   Expression02
                                                                                                                  Call:   Expression03
                                                                                                                    Call:   Expression04
                                                                                                                      Call:   Expression05
                                                                                                                        Call:   Expression06
                                                                                                                          Consumed token: <<STRINGLIT>: ""Valor de 12 \U8123FEDC"" at line 12 column 11>
                                                                                                                        Return: Expression06
                                                                                                                      Return: Expression05
                                                                                                                    Return: Expression04
                                                                                                                  Return: Expression03
                                                                                                                Return: Expression02
                                                                                                              Return: Expression01
                                                                                                            Return: Expression00
                                                                                                          Return: Expression
                                                                                                        Return: ArgList
                                                                                                        Consumed token: <")" at line 12 column 35>
                                                                                                      Return: Call
                                                                                                    Return: statement
                                                                                                  Return: stmblk
                                                                                                  Consumed token: <<EOF> at line 12 column 35>
                                                                                                Return: javacc_input
input... 
