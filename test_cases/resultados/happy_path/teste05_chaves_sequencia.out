Call:   javacc_input
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"enum" at line 1 column 1>; Expected token: <<BREAKSTMT>>
        Visited token: <"enum" at line 1 column 1>; Expected token: <<CONTINUESTMT>>
        Visited token: <"enum" at line 1 column 1>; Expected token: <<RETRYSTMT>>
        Visited token: <"enum" at line 1 column 1>; Expected token: <<EXITSTMT>>
        Visited token: <"enum" at line 1 column 1>; Expected token: <<FALLTHRUSTMT>>
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"enum" at line 1 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"enum" at line 1 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"enum" at line 1 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"enum" at line 1 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"enum" at line 1 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"enum" at line 1 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"enum" at line 1 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"enum" at line 1 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"enum" at line 1 column 1>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"enum" at line 1 column 1>; Expected token: <"global">
        Visited token: <"enum" at line 1 column 1>; Expected token: <"public">
        Visited token: <"enum" at line 1 column 1>; Expected token: <"export">
        Visited token: <"enum" at line 1 column 1>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"enum" at line 1 column 1>; Expected token: <"atom">
          Visited token: <"enum" at line 1 column 1>; Expected token: <"integer">
          Visited token: <"enum" at line 1 column 1>; Expected token: <"sequence">
          Visited token: <"enum" at line 1 column 1>; Expected token: <"object">
          Visited token: <"enum" at line 1 column 1>; Expected token: <<IDENTIFIER>>
        Return: DataType(LOOKAHEAD FAILED)
      Return: VarDeclare(LOOKAHEAD FAILED)
      Call:   TypeDeclare(LOOKING AHEAD...)
        Visited token: <"enum" at line 1 column 1>; Expected token: <"type">
      Return: TypeDeclare(LOOKAHEAD FAILED)
    Return: statement(LOOKAHEAD FAILED)
    Visited token: <"enum" at line 1 column 1>; Expected token: <"\n">
  Return: stmblk(LOOKAHEAD FAILED)
  Call:   EnumDeclare
    Consumed token: <"enum" at line 1 column 1>
    Call:   EnumVal
      Call:   IdentList
        Call:   Ident
          Consumed token: <<IDENTIFIER>: "X" at line 1 column 6>
        Return: Ident
        Consumed token: <"," at line 1 column 7>
        Call:   Ident
          Consumed token: <<IDENTIFIER>: "Y" at line 1 column 9>
        Return: Ident
      Return: IdentList
    Return: EnumVal
  Return: EnumDeclare
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <<BREAKSTMT>>
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <<CONTINUESTMT>>
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <<RETRYSTMT>>
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <<EXITSTMT>>
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <<FALLTHRUSTMT>>
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"\n": "
" at line 1 column 10>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"global">
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"public">
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"export">
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"atom">
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"integer">
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"sequence">
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"object">
          Visited token: <"\n": "
" at line 1 column 10>; Expected token: <<IDENTIFIER>>
        Return: DataType(LOOKAHEAD FAILED)
      Return: VarDeclare(LOOKAHEAD FAILED)
      Call:   TypeDeclare(LOOKING AHEAD...)
        Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"type">
      Return: TypeDeclare(LOOKAHEAD FAILED)
    Return: statement(LOOKAHEAD FAILED)
    Visited token: <"\n": "
" at line 1 column 10>; Expected token: <"\n">
  Return: stmblk(LOOKAHEAD SUCCEEDED)
  Call:   stmblk
    Consumed token: <"\n": "
" at line 1 column 10>
  Return: stmblk
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"sequence" at line 2 column 1>; Expected token: <<BREAKSTMT>>
        Visited token: <"sequence" at line 2 column 1>; Expected token: <<CONTINUESTMT>>
        Visited token: <"sequence" at line 2 column 1>; Expected token: <<RETRYSTMT>>
        Visited token: <"sequence" at line 2 column 1>; Expected token: <<EXITSTMT>>
        Visited token: <"sequence" at line 2 column 1>; Expected token: <<FALLTHRUSTMT>>
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 2 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 2 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 2 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"sequence" at line 2 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 2 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 2 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 2 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"sequence" at line 2 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"sequence" at line 2 column 1>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"sequence" at line 2 column 1>; Expected token: <"global">
        Visited token: <"sequence" at line 2 column 1>; Expected token: <"public">
        Visited token: <"sequence" at line 2 column 1>; Expected token: <"export">
        Visited token: <"sequence" at line 2 column 1>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"sequence" at line 2 column 1>; Expected token: <"atom">
          Visited token: <"sequence" at line 2 column 1>; Expected token: <"integer">
          Visited token: <"sequence" at line 2 column 1>; Expected token: <"sequence">
        Return: DataType(LOOKAHEAD SUCCEEDED)
        Call:   IdentList(LOOKING AHEAD...)
          Call:   Ident(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "point" at line 2 column 10>; Expected token: <<IDENTIFIER>>
            Call:   stmblk
              Call:   statement
                Visited token: <"sequence" at line 2 column 1>; Expected token: <<IDENTIFIER>>
                Call:   VarDeclare
                  Call:   DataType
                    Consumed token: <"sequence" at line 2 column 1>
                  Return: DataType
                  Call:   IdentList
                    Call:   Ident
                      Consumed token: <<IDENTIFIER>: "point" at line 2 column 10>
                      Consumed token: <"=" at line 2 column 16>
                      Call:   Expression
                        Call:   Sequence
                          Consumed token: <"{" at line 2 column 18>
                          Visited token: <<INTEGER>: "0" at line 2 column 20>; Expected token: <"$">
                          Call:   Object
                            Call:   Atom
                              Consumed token: <<INTEGER>: "0" at line 2 column 20>
                            Return: Atom
                          Return: Object
                          Visited token: <"," at line 2 column 21>; Expected token: <",">
                          Call:   Object(LOOKING AHEAD...)
                            Call:   Sequence(LOOKING AHEAD...)
                              Visited token: <<INTEGER>: "0" at line 2 column 22>; Expected token: <"{">
                            Return: Sequence(LOOKAHEAD FAILED)
                            Call:   Atom(LOOKING AHEAD...)
                              Visited token: <<INTEGER>: "0" at line 2 column 22>; Expected token: <<INTEGER>>
                              Consumed token: <"," at line 2 column 21>
                              Call:   Object
                                Call:   Atom
                                  Consumed token: <<INTEGER>: "0" at line 2 column 22>
                                Return: Atom
                              Return: Object
                              Visited token: <"}" at line 2 column 24>; Expected token: <",">
                              Consumed token: <"}" at line 2 column 24>
                            Return: Sequence
                          Return: Expression
                        Return: Ident
                      Return: IdentList
                    Return: VarDeclare
                  Return: statement
                Return: stmblk
                Call:   stmblk(LOOKING AHEAD...)
                  Call:   statement(LOOKING AHEAD...)
                    Call:   Flow(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <<BREAKSTMT>>
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <<CONTINUESTMT>>
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <<RETRYSTMT>>
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <<EXITSTMT>>
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <<FALLTHRUSTMT>>
                    Return: Flow(LOOKAHEAD FAILED)
                    Call:   Loop(LOOKING AHEAD...)
                      Call:   ForStatement(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"for">
                      Return: ForStatement(LOOKAHEAD FAILED)
                      Call:   WhileStatement(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"while">
                      Return: WhileStatement(LOOKAHEAD FAILED)
                      Call:   LoopStatement(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"loop">
                      Return: LoopStatement(LOOKAHEAD FAILED)
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"goto">
                    Return: Loop(LOOKAHEAD FAILED)
                    Call:   Branch(LOOKING AHEAD...)
                      Call:   IfStatement(LOOKING AHEAD...)
                        Call:   IfTest(LOOKING AHEAD...)
                          Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"if">
                        Return: IfTest(LOOKAHEAD FAILED)
                      Return: IfStatement(LOOKAHEAD FAILED)
                      Call:   SwitchStatement(LOOKING AHEAD...)
                        Call:   SwitchTest(LOOKING AHEAD...)
                          Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"switch">
                        Return: SwitchTest(LOOKAHEAD FAILED)
                      Return: SwitchStatement(LOOKAHEAD FAILED)
                      Call:   IfDefStatement(LOOKING AHEAD...)
                        Call:   IfDefTest(LOOKING AHEAD...)
                          Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"ifdef">
                        Return: IfDefTest(LOOKAHEAD FAILED)
                      Return: IfDefStatement(LOOKAHEAD FAILED)
                    Return: Branch(LOOKAHEAD FAILED)
                    Call:   Return(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"return">
                    Return: Return(LOOKAHEAD FAILED)
                    Visited token: <"\n": "
" at line 2 column 25>; Expected token: <<IDENTIFIER>>
                    Call:   ScopeModifier(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"global">
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"public">
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"export">
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"override">
                    Return: ScopeModifier(LOOKAHEAD FAILED)
                    Call:   VarDeclare(LOOKING AHEAD...)
                      Call:   DataType(LOOKING AHEAD...)
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"atom">
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"integer">
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"sequence">
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"object">
                        Visited token: <"\n": "
" at line 2 column 25>; Expected token: <<IDENTIFIER>>
                      Return: DataType(LOOKAHEAD FAILED)
                    Return: VarDeclare(LOOKAHEAD FAILED)
                    Call:   TypeDeclare(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"type">
                    Return: TypeDeclare(LOOKAHEAD FAILED)
                  Return: statement(LOOKAHEAD FAILED)
                  Visited token: <"\n": "
" at line 2 column 25>; Expected token: <"\n">
                Return: stmblk(LOOKAHEAD SUCCEEDED)
                Call:   stmblk
                  Consumed token: <"\n": "
" at line 2 column 25>
                Return: stmblk
                Call:   stmblk(LOOKING AHEAD...)
                  Call:   statement(LOOKING AHEAD...)
                    Call:   Flow(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <<BREAKSTMT>>
                      Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <<CONTINUESTMT>>
                      Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <<RETRYSTMT>>
                      Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <<EXITSTMT>>
                      Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <<FALLTHRUSTMT>>
                    Return: Flow(LOOKAHEAD FAILED)
                    Call:   Loop(LOOKING AHEAD...)
                      Call:   ForStatement(LOOKING AHEAD...)
                        Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"for">
                      Return: ForStatement(LOOKAHEAD FAILED)
                      Call:   WhileStatement(LOOKING AHEAD...)
                        Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"while">
                      Return: WhileStatement(LOOKAHEAD FAILED)
                      Call:   LoopStatement(LOOKING AHEAD...)
                        Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"loop">
                      Return: LoopStatement(LOOKAHEAD FAILED)
                      Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"goto">
                    Return: Loop(LOOKAHEAD FAILED)
                    Call:   Branch(LOOKING AHEAD...)
                      Call:   IfStatement(LOOKING AHEAD...)
                        Call:   IfTest(LOOKING AHEAD...)
                          Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"if">
                        Return: IfTest(LOOKAHEAD FAILED)
                      Return: IfStatement(LOOKAHEAD FAILED)
                      Call:   SwitchStatement(LOOKING AHEAD...)
                        Call:   SwitchTest(LOOKING AHEAD...)
                          Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"switch">
                        Return: SwitchTest(LOOKAHEAD FAILED)
                      Return: SwitchStatement(LOOKAHEAD FAILED)
                      Call:   IfDefStatement(LOOKING AHEAD...)
                        Call:   IfDefTest(LOOKING AHEAD...)
                          Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"ifdef">
                        Return: IfDefTest(LOOKAHEAD FAILED)
                      Return: IfDefStatement(LOOKAHEAD FAILED)
                    Return: Branch(LOOKAHEAD FAILED)
                    Call:   Return(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <"return">
                    Return: Return(LOOKAHEAD FAILED)
                    Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                    Call:   Assignment(LOOKING AHEAD...)
                      Call:   AssignmentMulti(LOOKING AHEAD...)
                        Call:   Variable(LOOKING AHEAD...)
                          Visited token: <"[" at line 3 column 6>; Expected token: <"[">
                          Call:   stmblk
                            Call:   statement
                              Visited token: <<IDENTIFIER>: "point" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                              Call:   Assignment(LOOKING AHEAD...)
                                Call:   AssignmentMulti(LOOKING AHEAD...)
                                  Call:   Variable(LOOKING AHEAD...)
                                    Visited token: <"[" at line 3 column 6>; Expected token: <"[">
                                    Consumed token: <<IDENTIFIER>: "point" at line 3 column 1>
                                    Call:   Assignment
                                      Call:   AssignmentMulti
                                        Call:   Variable
                                          Consumed token: <"[" at line 3 column 6>
                                          Call:   Expression
                                            Call:   Expression00
                                              Call:   Expression01
                                                Call:   Expression02
                                                  Call:   Expression03
                                                    Call:   Expression04
                                                      Call:   Expression05
                                                        Call:   Expression06
                                                          Consumed token: <<IDENTIFIER>: "X" at line 3 column 7>
                                                        Return: Expression06
                                                      Return: Expression05
                                                    Return: Expression04
                                                  Return: Expression03
                                                Return: Expression02
                                              Return: Expression01
                                            Return: Expression00
                                          Return: Expression
                                          Call:   Subscripting
                                            Consumed token: <"]" at line 3 column 8>
                                          Return: Subscripting
                                        Return: Variable
                                        Consumed token: <"=" at line 3 column 10>
                                        Call:   Expression
                                          Call:   Expression00
                                            Call:   Expression01
                                              Call:   Expression02
                                                Call:   Expression03
                                                  Call:   Expression04
                                                    Call:   Expression05
                                                      Call:   Expression06
                                                        Call:   Atom
                                                          Consumed token: <<INTEGER>: "3" at line 3 column 12>
                                                        Return: Atom
                                                      Return: Expression06
                                                    Return: Expression05
                                                  Return: Expression04
                                                Return: Expression03
                                              Return: Expression02
                                            Return: Expression01
                                          Return: Expression00
                                        Return: Expression
                                      Return: AssignmentMulti
                                    Return: Assignment
                                  Return: statement
                                Return: stmblk
                                Call:   stmblk(LOOKING AHEAD...)
                                  Call:   statement(LOOKING AHEAD...)
                                    Call:   Flow(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <<BREAKSTMT>>
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <<CONTINUESTMT>>
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <<RETRYSTMT>>
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <<EXITSTMT>>
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <<FALLTHRUSTMT>>
                                    Return: Flow(LOOKAHEAD FAILED)
                                    Call:   Loop(LOOKING AHEAD...)
                                      Call:   ForStatement(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"for">
                                      Return: ForStatement(LOOKAHEAD FAILED)
                                      Call:   WhileStatement(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"while">
                                      Return: WhileStatement(LOOKAHEAD FAILED)
                                      Call:   LoopStatement(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"loop">
                                      Return: LoopStatement(LOOKAHEAD FAILED)
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"goto">
                                    Return: Loop(LOOKAHEAD FAILED)
                                    Call:   Branch(LOOKING AHEAD...)
                                      Call:   IfStatement(LOOKING AHEAD...)
                                        Call:   IfTest(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"if">
                                        Return: IfTest(LOOKAHEAD FAILED)
                                      Return: IfStatement(LOOKAHEAD FAILED)
                                      Call:   SwitchStatement(LOOKING AHEAD...)
                                        Call:   SwitchTest(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"switch">
                                        Return: SwitchTest(LOOKAHEAD FAILED)
                                      Return: SwitchStatement(LOOKAHEAD FAILED)
                                      Call:   IfDefStatement(LOOKING AHEAD...)
                                        Call:   IfDefTest(LOOKING AHEAD...)
                                          Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"ifdef">
                                        Return: IfDefTest(LOOKAHEAD FAILED)
                                      Return: IfDefStatement(LOOKAHEAD FAILED)
                                    Return: Branch(LOOKAHEAD FAILED)
                                    Call:   Return(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"return">
                                    Return: Return(LOOKAHEAD FAILED)
                                    Visited token: <"\n": "
" at line 3 column 13>; Expected token: <<IDENTIFIER>>
                                    Call:   ScopeModifier(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"global">
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"public">
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"export">
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"override">
                                    Return: ScopeModifier(LOOKAHEAD FAILED)
                                    Call:   VarDeclare(LOOKING AHEAD...)
                                      Call:   DataType(LOOKING AHEAD...)
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"atom">
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"integer">
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"sequence">
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"object">
                                        Visited token: <"\n": "
" at line 3 column 13>; Expected token: <<IDENTIFIER>>
                                      Return: DataType(LOOKAHEAD FAILED)
                                    Return: VarDeclare(LOOKAHEAD FAILED)
                                    Call:   TypeDeclare(LOOKING AHEAD...)
                                      Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"type">
                                    Return: TypeDeclare(LOOKAHEAD FAILED)
                                  Return: statement(LOOKAHEAD FAILED)
                                  Visited token: <"\n": "
" at line 3 column 13>; Expected token: <"\n">
                                Return: stmblk(LOOKAHEAD SUCCEEDED)
                                Call:   stmblk
                                  Consumed token: <"\n": "
" at line 3 column 13>
                                Return: stmblk
                                Call:   stmblk(LOOKING AHEAD...)
                                  Call:   statement(LOOKING AHEAD...)
                                    Call:   Flow(LOOKING AHEAD...)
                                      Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <<BREAKSTMT>>
                                      Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <<CONTINUESTMT>>
                                      Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <<RETRYSTMT>>
                                      Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <<EXITSTMT>>
                                      Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <<FALLTHRUSTMT>>
                                    Return: Flow(LOOKAHEAD FAILED)
                                    Call:   Loop(LOOKING AHEAD...)
                                      Call:   ForStatement(LOOKING AHEAD...)
                                        Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"for">
                                      Return: ForStatement(LOOKAHEAD FAILED)
                                      Call:   WhileStatement(LOOKING AHEAD...)
                                        Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"while">
                                      Return: WhileStatement(LOOKAHEAD FAILED)
                                      Call:   LoopStatement(LOOKING AHEAD...)
                                        Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"loop">
                                      Return: LoopStatement(LOOKAHEAD FAILED)
                                      Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"goto">
                                    Return: Loop(LOOKAHEAD FAILED)
                                    Call:   Branch(LOOKING AHEAD...)
                                      Call:   IfStatement(LOOKING AHEAD...)
                                        Call:   IfTest(LOOKING AHEAD...)
                                          Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"if">
                                        Return: IfTest(LOOKAHEAD FAILED)
                                      Return: IfStatement(LOOKAHEAD FAILED)
                                      Call:   SwitchStatement(LOOKING AHEAD...)
                                        Call:   SwitchTest(LOOKING AHEAD...)
                                          Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"switch">
                                        Return: SwitchTest(LOOKAHEAD FAILED)
                                      Return: SwitchStatement(LOOKAHEAD FAILED)
                                      Call:   IfDefStatement(LOOKING AHEAD...)
                                        Call:   IfDefTest(LOOKING AHEAD...)
                                          Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"ifdef">
                                        Return: IfDefTest(LOOKAHEAD FAILED)
                                      Return: IfDefStatement(LOOKAHEAD FAILED)
                                    Return: Branch(LOOKAHEAD FAILED)
                                    Call:   Return(LOOKING AHEAD...)
                                      Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <"return">
                                    Return: Return(LOOKAHEAD FAILED)
                                    Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <<IDENTIFIER>>
                                    Call:   Assignment(LOOKING AHEAD...)
                                      Call:   AssignmentMulti(LOOKING AHEAD...)
                                        Call:   Variable(LOOKING AHEAD...)
                                          Visited token: <"[" at line 4 column 6>; Expected token: <"[">
                                          Call:   stmblk
                                            Call:   statement
                                              Visited token: <<IDENTIFIER>: "point" at line 4 column 1>; Expected token: <<IDENTIFIER>>
                                              Call:   Assignment(LOOKING AHEAD...)
                                                Call:   AssignmentMulti(LOOKING AHEAD...)
                                                  Call:   Variable(LOOKING AHEAD...)
                                                    Visited token: <"[" at line 4 column 6>; Expected token: <"[">
                                                    Consumed token: <<IDENTIFIER>: "point" at line 4 column 1>
                                                    Call:   Assignment
                                                      Call:   AssignmentMulti
                                                        Call:   Variable
                                                          Consumed token: <"[" at line 4 column 6>
                                                          Call:   Expression
                                                            Call:   Expression00
                                                              Call:   Expression01
                                                                Call:   Expression02
                                                                  Call:   Expression03
                                                                    Call:   Expression04
                                                                      Call:   Expression05
                                                                        Call:   Expression06
                                                                          Consumed token: <<IDENTIFIER>: "Y" at line 4 column 7>
                                                                        Return: Expression06
                                                                      Return: Expression05
                                                                    Return: Expression04
                                                                  Return: Expression03
                                                                Return: Expression02
                                                              Return: Expression01
                                                            Return: Expression00
                                                          Return: Expression
                                                          Call:   Subscripting
                                                            Consumed token: <"]" at line 4 column 8>
                                                          Return: Subscripting
                                                        Return: Variable
                                                        Consumed token: <"=" at line 4 column 10>
                                                        Call:   Expression
                                                          Call:   Expression00
                                                            Call:   Expression01
                                                              Call:   Expression02
                                                                Call:   Expression03
                                                                  Call:   Expression04
                                                                    Call:   Expression05
                                                                      Call:   Expression06
                                                                        Call:   Atom
                                                                          Consumed token: <<INTEGER>: "4" at line 4 column 12>
                                                                        Return: Atom
                                                                      Return: Expression06
                                                                    Return: Expression05
                                                                  Return: Expression04
                                                                Return: Expression03
                                                              Return: Expression02
                                                            Return: Expression01
                                                          Return: Expression00
                                                        Return: Expression
                                                      Return: AssignmentMulti
                                                    Return: Assignment
                                                  Return: statement
                                                Return: stmblk
                                                Call:   stmblk(LOOKING AHEAD...)
                                                  Call:   statement(LOOKING AHEAD...)
                                                    Call:   Flow(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<BREAKSTMT>>
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<CONTINUESTMT>>
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<RETRYSTMT>>
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<EXITSTMT>>
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<FALLTHRUSTMT>>
                                                    Return: Flow(LOOKAHEAD FAILED)
                                                    Call:   Loop(LOOKING AHEAD...)
                                                      Call:   ForStatement(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"for">
                                                      Return: ForStatement(LOOKAHEAD FAILED)
                                                      Call:   WhileStatement(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"while">
                                                      Return: WhileStatement(LOOKAHEAD FAILED)
                                                      Call:   LoopStatement(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"loop">
                                                      Return: LoopStatement(LOOKAHEAD FAILED)
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"goto">
                                                    Return: Loop(LOOKAHEAD FAILED)
                                                    Call:   Branch(LOOKING AHEAD...)
                                                      Call:   IfStatement(LOOKING AHEAD...)
                                                        Call:   IfTest(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"if">
                                                        Return: IfTest(LOOKAHEAD FAILED)
                                                      Return: IfStatement(LOOKAHEAD FAILED)
                                                      Call:   SwitchStatement(LOOKING AHEAD...)
                                                        Call:   SwitchTest(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"switch">
                                                        Return: SwitchTest(LOOKAHEAD FAILED)
                                                      Return: SwitchStatement(LOOKAHEAD FAILED)
                                                      Call:   IfDefStatement(LOOKING AHEAD...)
                                                        Call:   IfDefTest(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"ifdef">
                                                        Return: IfDefTest(LOOKAHEAD FAILED)
                                                      Return: IfDefStatement(LOOKAHEAD FAILED)
                                                    Return: Branch(LOOKAHEAD FAILED)
                                                    Call:   Return(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"return">
                                                    Return: Return(LOOKAHEAD FAILED)
                                                    Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<IDENTIFIER>>
                                                    Call:   ScopeModifier(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"global">
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"public">
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"export">
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"override">
                                                    Return: ScopeModifier(LOOKAHEAD FAILED)
                                                    Call:   VarDeclare(LOOKING AHEAD...)
                                                      Call:   DataType(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"atom">
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"integer">
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"sequence">
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"object">
                                                        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<IDENTIFIER>>
                                                      Return: DataType(LOOKAHEAD FAILED)
                                                    Return: VarDeclare(LOOKAHEAD FAILED)
                                                    Call:   TypeDeclare(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"type">
                                                    Return: TypeDeclare(LOOKAHEAD FAILED)
                                                  Return: statement(LOOKAHEAD FAILED)
                                                  Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"\n">
                                                Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                Call:   stmblk
                                                  Consumed token: <"\n": "
" at line 4 column 13>
                                                Return: stmblk
                                                Call:   stmblk(LOOKING AHEAD...)
                                                  Call:   statement(LOOKING AHEAD...)
                                                    Call:   Flow(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<BREAKSTMT>>
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<CONTINUESTMT>>
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<RETRYSTMT>>
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<EXITSTMT>>
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<FALLTHRUSTMT>>
                                                    Return: Flow(LOOKAHEAD FAILED)
                                                    Call:   Loop(LOOKING AHEAD...)
                                                      Call:   ForStatement(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"for">
                                                      Return: ForStatement(LOOKAHEAD FAILED)
                                                      Call:   WhileStatement(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"while">
                                                      Return: WhileStatement(LOOKAHEAD FAILED)
                                                      Call:   LoopStatement(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"loop">
                                                      Return: LoopStatement(LOOKAHEAD FAILED)
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"goto">
                                                    Return: Loop(LOOKAHEAD FAILED)
                                                    Call:   Branch(LOOKING AHEAD...)
                                                      Call:   IfStatement(LOOKING AHEAD...)
                                                        Call:   IfTest(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"if">
                                                        Return: IfTest(LOOKAHEAD FAILED)
                                                      Return: IfStatement(LOOKAHEAD FAILED)
                                                      Call:   SwitchStatement(LOOKING AHEAD...)
                                                        Call:   SwitchTest(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"switch">
                                                        Return: SwitchTest(LOOKAHEAD FAILED)
                                                      Return: SwitchStatement(LOOKAHEAD FAILED)
                                                      Call:   IfDefStatement(LOOKING AHEAD...)
                                                        Call:   IfDefTest(LOOKING AHEAD...)
                                                          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"ifdef">
                                                        Return: IfDefTest(LOOKAHEAD FAILED)
                                                      Return: IfDefStatement(LOOKAHEAD FAILED)
                                                    Return: Branch(LOOKAHEAD FAILED)
                                                    Call:   Return(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"return">
                                                    Return: Return(LOOKAHEAD FAILED)
                                                    Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<IDENTIFIER>>
                                                    Call:   ScopeModifier(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"global">
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"public">
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"export">
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"override">
                                                    Return: ScopeModifier(LOOKAHEAD FAILED)
                                                    Call:   VarDeclare(LOOKING AHEAD...)
                                                      Call:   DataType(LOOKING AHEAD...)
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"atom">
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"integer">
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"sequence">
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"object">
                                                        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<IDENTIFIER>>
                                                      Return: DataType(LOOKAHEAD FAILED)
                                                    Return: VarDeclare(LOOKAHEAD FAILED)
                                                    Call:   TypeDeclare(LOOKING AHEAD...)
                                                      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"type">
                                                    Return: TypeDeclare(LOOKAHEAD FAILED)
                                                  Return: statement(LOOKAHEAD FAILED)
                                                  Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"\n">
                                                Return: stmblk(LOOKAHEAD SUCCEEDED)
                                                Call:   stmblk
                                                  Consumed token: <"\n": "
" at line 5 column 1>
                                                Return: stmblk
                                                Call:   stmblk(LOOKING AHEAD...)
                                                  Call:   statement(LOOKING AHEAD...)
                                                    Call:   Flow(LOOKING AHEAD...)
                                                      Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<BREAKSTMT>>
                                                      Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<CONTINUESTMT>>
                                                      Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<RETRYSTMT>>
                                                      Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<EXITSTMT>>
                                                      Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<FALLTHRUSTMT>>
                                                    Return: Flow(LOOKAHEAD FAILED)
                                                    Call:   Loop(LOOKING AHEAD...)
                                                      Call:   ForStatement(LOOKING AHEAD...)
                                                        Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"for">
                                                      Return: ForStatement(LOOKAHEAD FAILED)
                                                      Call:   WhileStatement(LOOKING AHEAD...)
                                                        Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"while">
                                                      Return: WhileStatement(LOOKAHEAD FAILED)
                                                      Call:   LoopStatement(LOOKING AHEAD...)
                                                        Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"loop">
                                                      Return: LoopStatement(LOOKAHEAD FAILED)
                                                      Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"goto">
                                                    Return: Loop(LOOKAHEAD FAILED)
                                                    Call:   Branch(LOOKING AHEAD...)
                                                      Call:   IfStatement(LOOKING AHEAD...)
                                                        Call:   IfTest(LOOKING AHEAD...)
                                                          Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"if">
                                                        Return: IfTest(LOOKAHEAD FAILED)
                                                      Return: IfStatement(LOOKAHEAD FAILED)
                                                      Call:   SwitchStatement(LOOKING AHEAD...)
                                                        Call:   SwitchTest(LOOKING AHEAD...)
                                                          Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"switch">
                                                        Return: SwitchTest(LOOKAHEAD FAILED)
                                                      Return: SwitchStatement(LOOKAHEAD FAILED)
                                                      Call:   IfDefStatement(LOOKING AHEAD...)
                                                        Call:   IfDefTest(LOOKING AHEAD...)
                                                          Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"ifdef">
                                                        Return: IfDefTest(LOOKAHEAD FAILED)
                                                      Return: IfDefStatement(LOOKAHEAD FAILED)
                                                    Return: Branch(LOOKAHEAD FAILED)
                                                    Call:   Return(LOOKING AHEAD...)
                                                      Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <"return">
                                                    Return: Return(LOOKAHEAD FAILED)
                                                    Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<IDENTIFIER>>
                                                    Call:   Assignment(LOOKING AHEAD...)
                                                      Call:   AssignmentMulti(LOOKING AHEAD...)
                                                        Call:   Variable(LOOKING AHEAD...)
                                                          Visited token: <"(" at line 6 column 7>; Expected token: <"[">
                                                        Return: Variable(LOOKAHEAD FAILED)
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <",">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"=">
                                                      Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                      Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"+">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"-">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"/">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"*">
                                                        Visited token: <"(" at line 6 column 7>; Expected token: <"&">
                                                      Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                    Return: Assignment(LOOKAHEAD FAILED)
                                                    Call:   Call(LOOKING AHEAD...)
                                                      Visited token: <"(" at line 6 column 7>; Expected token: <"(">
                                                      Call:   stmblk
                                                        Call:   statement
                                                          Visited token: <<IDENTIFIER>: "printf" at line 6 column 1>; Expected token: <<IDENTIFIER>>
                                                          Call:   Assignment(LOOKING AHEAD...)
                                                            Call:   AssignmentMulti(LOOKING AHEAD...)
                                                              Call:   Variable(LOOKING AHEAD...)
                                                                Visited token: <"(" at line 6 column 7>; Expected token: <"[">
                                                              Return: Variable(LOOKAHEAD FAILED)
                                                              Visited token: <"(" at line 6 column 7>; Expected token: <",">
                                                              Visited token: <"(" at line 6 column 7>; Expected token: <"=">
                                                            Return: AssignmentMulti(LOOKAHEAD FAILED)
                                                            Call:   AssignmentWihOp(LOOKING AHEAD...)
                                                              Visited token: <"(" at line 6 column 7>; Expected token: <"+">
                                                              Visited token: <"(" at line 6 column 7>; Expected token: <"-">
                                                              Visited token: <"(" at line 6 column 7>; Expected token: <"/">
                                                              Visited token: <"(" at line 6 column 7>; Expected token: <"*">
                                                              Visited token: <"(" at line 6 column 7>; Expected token: <"&">
                                                            Return: AssignmentWihOp(LOOKAHEAD FAILED)
                                                          Return: Assignment(LOOKAHEAD FAILED)
                                                          Call:   Call(LOOKING AHEAD...)
                                                            Visited token: <"(" at line 6 column 7>; Expected token: <"(">
                                                            Consumed token: <<IDENTIFIER>: "printf" at line 6 column 1>
                                                            Call:   Call
                                                              Consumed token: <"(" at line 6 column 7>
                                                              Call:   ArgList
                                                                Call:   Expression
                                                                  Call:   Expression00
                                                                    Call:   Expression01
                                                                      Call:   Expression02
                                                                        Call:   Expression03
                                                                          Call:   Expression04
                                                                            Call:   Expression05
                                                                              Call:   Expression06
                                                                                Call:   Atom
                                                                                  Consumed token: <<INTEGER>: "1" at line 6 column 8>
                                                                                Return: Atom
                                                                              Return: Expression06
                                                                            Return: Expression05
                                                                          Return: Expression04
                                                                        Return: Expression03
                                                                      Return: Expression02
                                                                    Return: Expression01
                                                                  Return: Expression00
                                                                Return: Expression
                                                                Consumed token: <"," at line 6 column 9>
                                                                Call:   Expression
                                                                  Call:   Expression00
                                                                    Call:   Expression01
                                                                      Call:   Expression02
                                                                        Call:   Expression03
                                                                          Call:   Expression04
                                                                            Call:   Expression05
                                                                              Call:   Expression06
                                                                                Consumed token: <<STRINGLIT>: ""Valor da Sequencia %d %d\n"" at line 6 column 11>
                                                                              Return: Expression06
                                                                            Return: Expression05
                                                                          Return: Expression04
                                                                        Return: Expression03
                                                                      Return: Expression02
                                                                    Return: Expression01
                                                                  Return: Expression00
                                                                Return: Expression
                                                                Consumed token: <"," at line 6 column 39>
                                                                Call:   Expression
                                                                  Call:   Expression00
                                                                    Call:   Expression01
                                                                      Call:   Expression02
                                                                        Call:   Expression03
                                                                          Call:   Expression04
                                                                            Call:   Expression05
                                                                              Call:   Expression06
                                                                                Consumed token: <<IDENTIFIER>: "point" at line 6 column 41>
                                                                              Return: Expression06
                                                                            Return: Expression05
                                                                          Return: Expression04
                                                                        Return: Expression03
                                                                      Return: Expression02
                                                                    Return: Expression01
                                                                  Return: Expression00
                                                                Return: Expression
                                                              Return: ArgList
                                                              Consumed token: <")" at line 6 column 46>
                                                            Return: Call
                                                          Return: statement
                                                        Return: stmblk
                                                        Consumed token: <<EOF> at line 6 column 46>
                                                      Return: javacc_input
input... 
