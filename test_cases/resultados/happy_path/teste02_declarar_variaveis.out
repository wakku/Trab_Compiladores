Call:   javacc_input
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<BREAKSTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<CONTINUESTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<RETRYSTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<EXITSTMT>>
        Visited token: <"sequence" at line 1 column 1>; Expected token: <<FALLTHRUSTMT>>
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 1 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 1 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"sequence" at line 1 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"sequence" at line 1 column 1>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"global">
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"public">
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"export">
        Visited token: <"sequence" at line 1 column 1>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"atom">
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"integer">
          Visited token: <"sequence" at line 1 column 1>; Expected token: <"sequence">
        Return: DataType(LOOKAHEAD SUCCEEDED)
        Call:   IdentList(LOOKING AHEAD...)
          Call:   Ident(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "nome" at line 1 column 10>; Expected token: <<IDENTIFIER>>
            Call:   stmblk
              Call:   statement
                Visited token: <"sequence" at line 1 column 1>; Expected token: <<IDENTIFIER>>
                Call:   VarDeclare
                  Call:   DataType
                    Consumed token: <"sequence" at line 1 column 1>
                  Return: DataType
                  Call:   IdentList
                    Call:   Ident
                      Consumed token: <<IDENTIFIER>: "nome" at line 1 column 10>
                    Return: Ident
                  Return: IdentList
                Return: VarDeclare
              Return: statement
            Return: stmblk
            Call:   stmblk(LOOKING AHEAD...)
              Call:   statement(LOOKING AHEAD...)
                Call:   Flow(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <<BREAKSTMT>>
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <<CONTINUESTMT>>
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <<RETRYSTMT>>
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <<EXITSTMT>>
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <<FALLTHRUSTMT>>
                Return: Flow(LOOKAHEAD FAILED)
                Call:   Loop(LOOKING AHEAD...)
                  Call:   ForStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"for">
                  Return: ForStatement(LOOKAHEAD FAILED)
                  Call:   WhileStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"while">
                  Return: WhileStatement(LOOKAHEAD FAILED)
                  Call:   LoopStatement(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"loop">
                  Return: LoopStatement(LOOKAHEAD FAILED)
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"goto">
                Return: Loop(LOOKAHEAD FAILED)
                Call:   Branch(LOOKING AHEAD...)
                  Call:   IfStatement(LOOKING AHEAD...)
                    Call:   IfTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"if">
                    Return: IfTest(LOOKAHEAD FAILED)
                  Return: IfStatement(LOOKAHEAD FAILED)
                  Call:   SwitchStatement(LOOKING AHEAD...)
                    Call:   SwitchTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"switch">
                    Return: SwitchTest(LOOKAHEAD FAILED)
                  Return: SwitchStatement(LOOKAHEAD FAILED)
                  Call:   IfDefStatement(LOOKING AHEAD...)
                    Call:   IfDefTest(LOOKING AHEAD...)
                      Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"ifdef">
                    Return: IfDefTest(LOOKAHEAD FAILED)
                  Return: IfDefStatement(LOOKAHEAD FAILED)
                Return: Branch(LOOKAHEAD FAILED)
                Call:   Return(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"return">
                Return: Return(LOOKAHEAD FAILED)
                Visited token: <"\n": "
" at line 1 column 14>; Expected token: <<IDENTIFIER>>
                Call:   ScopeModifier(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"global">
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"public">
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"export">
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"override">
                Return: ScopeModifier(LOOKAHEAD FAILED)
                Call:   VarDeclare(LOOKING AHEAD...)
                  Call:   DataType(LOOKING AHEAD...)
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"atom">
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"integer">
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"sequence">
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"object">
                    Visited token: <"\n": "
" at line 1 column 14>; Expected token: <<IDENTIFIER>>
                  Return: DataType(LOOKAHEAD FAILED)
                Return: VarDeclare(LOOKAHEAD FAILED)
                Call:   TypeDeclare(LOOKING AHEAD...)
                  Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"type">
                Return: TypeDeclare(LOOKAHEAD FAILED)
              Return: statement(LOOKAHEAD FAILED)
              Visited token: <"\n": "
" at line 1 column 14>; Expected token: <"\n">
            Return: stmblk(LOOKAHEAD SUCCEEDED)
            Call:   stmblk
              Consumed token: <"\n": "
" at line 1 column 14>
            Return: stmblk
            Call:   stmblk(LOOKING AHEAD...)
              Call:   statement(LOOKING AHEAD...)
                Call:   Flow(LOOKING AHEAD...)
                  Visited token: <"integer" at line 2 column 1>; Expected token: <<BREAKSTMT>>
                  Visited token: <"integer" at line 2 column 1>; Expected token: <<CONTINUESTMT>>
                  Visited token: <"integer" at line 2 column 1>; Expected token: <<RETRYSTMT>>
                  Visited token: <"integer" at line 2 column 1>; Expected token: <<EXITSTMT>>
                  Visited token: <"integer" at line 2 column 1>; Expected token: <<FALLTHRUSTMT>>
                Return: Flow(LOOKAHEAD FAILED)
                Call:   Loop(LOOKING AHEAD...)
                  Call:   ForStatement(LOOKING AHEAD...)
                    Visited token: <"integer" at line 2 column 1>; Expected token: <"for">
                  Return: ForStatement(LOOKAHEAD FAILED)
                  Call:   WhileStatement(LOOKING AHEAD...)
                    Visited token: <"integer" at line 2 column 1>; Expected token: <"while">
                  Return: WhileStatement(LOOKAHEAD FAILED)
                  Call:   LoopStatement(LOOKING AHEAD...)
                    Visited token: <"integer" at line 2 column 1>; Expected token: <"loop">
                  Return: LoopStatement(LOOKAHEAD FAILED)
                  Visited token: <"integer" at line 2 column 1>; Expected token: <"goto">
                Return: Loop(LOOKAHEAD FAILED)
                Call:   Branch(LOOKING AHEAD...)
                  Call:   IfStatement(LOOKING AHEAD...)
                    Call:   IfTest(LOOKING AHEAD...)
                      Visited token: <"integer" at line 2 column 1>; Expected token: <"if">
                    Return: IfTest(LOOKAHEAD FAILED)
                  Return: IfStatement(LOOKAHEAD FAILED)
                  Call:   SwitchStatement(LOOKING AHEAD...)
                    Call:   SwitchTest(LOOKING AHEAD...)
                      Visited token: <"integer" at line 2 column 1>; Expected token: <"switch">
                    Return: SwitchTest(LOOKAHEAD FAILED)
                  Return: SwitchStatement(LOOKAHEAD FAILED)
                  Call:   IfDefStatement(LOOKING AHEAD...)
                    Call:   IfDefTest(LOOKING AHEAD...)
                      Visited token: <"integer" at line 2 column 1>; Expected token: <"ifdef">
                    Return: IfDefTest(LOOKAHEAD FAILED)
                  Return: IfDefStatement(LOOKAHEAD FAILED)
                Return: Branch(LOOKAHEAD FAILED)
                Call:   Return(LOOKING AHEAD...)
                  Visited token: <"integer" at line 2 column 1>; Expected token: <"return">
                Return: Return(LOOKAHEAD FAILED)
                Visited token: <"integer" at line 2 column 1>; Expected token: <<IDENTIFIER>>
                Call:   ScopeModifier(LOOKING AHEAD...)
                  Visited token: <"integer" at line 2 column 1>; Expected token: <"global">
                  Visited token: <"integer" at line 2 column 1>; Expected token: <"public">
                  Visited token: <"integer" at line 2 column 1>; Expected token: <"export">
                  Visited token: <"integer" at line 2 column 1>; Expected token: <"override">
                Return: ScopeModifier(LOOKAHEAD FAILED)
                Call:   VarDeclare(LOOKING AHEAD...)
                  Call:   DataType(LOOKING AHEAD...)
                    Visited token: <"integer" at line 2 column 1>; Expected token: <"atom">
                    Visited token: <"integer" at line 2 column 1>; Expected token: <"integer">
                  Return: DataType(LOOKAHEAD SUCCEEDED)
                  Call:   IdentList(LOOKING AHEAD...)
                    Call:   Ident(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "tempo" at line 2 column 9>; Expected token: <<IDENTIFIER>>
                      Call:   stmblk
                        Call:   statement
                          Visited token: <"integer" at line 2 column 1>; Expected token: <<IDENTIFIER>>
                          Call:   VarDeclare
                            Call:   DataType
                              Consumed token: <"integer" at line 2 column 1>
                            Return: DataType
                            Call:   IdentList
                              Call:   Ident
                                Consumed token: <<IDENTIFIER>: "tempo" at line 2 column 9>
                              Return: Ident
                            Return: IdentList
                          Return: VarDeclare
                        Return: statement
                      Return: stmblk
                      Call:   stmblk(LOOKING AHEAD...)
                        Call:   statement(LOOKING AHEAD...)
                          Call:   Flow(LOOKING AHEAD...)
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <<BREAKSTMT>>
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <<CONTINUESTMT>>
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <<RETRYSTMT>>
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <<EXITSTMT>>
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <<FALLTHRUSTMT>>
                          Return: Flow(LOOKAHEAD FAILED)
                          Call:   Loop(LOOKING AHEAD...)
                            Call:   ForStatement(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"for">
                            Return: ForStatement(LOOKAHEAD FAILED)
                            Call:   WhileStatement(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"while">
                            Return: WhileStatement(LOOKAHEAD FAILED)
                            Call:   LoopStatement(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"loop">
                            Return: LoopStatement(LOOKAHEAD FAILED)
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"goto">
                          Return: Loop(LOOKAHEAD FAILED)
                          Call:   Branch(LOOKING AHEAD...)
                            Call:   IfStatement(LOOKING AHEAD...)
                              Call:   IfTest(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"if">
                              Return: IfTest(LOOKAHEAD FAILED)
                            Return: IfStatement(LOOKAHEAD FAILED)
                            Call:   SwitchStatement(LOOKING AHEAD...)
                              Call:   SwitchTest(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"switch">
                              Return: SwitchTest(LOOKAHEAD FAILED)
                            Return: SwitchStatement(LOOKAHEAD FAILED)
                            Call:   IfDefStatement(LOOKING AHEAD...)
                              Call:   IfDefTest(LOOKING AHEAD...)
                                Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"ifdef">
                              Return: IfDefTest(LOOKAHEAD FAILED)
                            Return: IfDefStatement(LOOKAHEAD FAILED)
                          Return: Branch(LOOKAHEAD FAILED)
                          Call:   Return(LOOKING AHEAD...)
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"return">
                          Return: Return(LOOKAHEAD FAILED)
                          Visited token: <"\n": "
" at line 2 column 14>; Expected token: <<IDENTIFIER>>
                          Call:   ScopeModifier(LOOKING AHEAD...)
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"global">
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"public">
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"export">
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"override">
                          Return: ScopeModifier(LOOKAHEAD FAILED)
                          Call:   VarDeclare(LOOKING AHEAD...)
                            Call:   DataType(LOOKING AHEAD...)
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"atom">
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"integer">
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"sequence">
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"object">
                              Visited token: <"\n": "
" at line 2 column 14>; Expected token: <<IDENTIFIER>>
                            Return: DataType(LOOKAHEAD FAILED)
                          Return: VarDeclare(LOOKAHEAD FAILED)
                          Call:   TypeDeclare(LOOKING AHEAD...)
                            Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"type">
                          Return: TypeDeclare(LOOKAHEAD FAILED)
                        Return: statement(LOOKAHEAD FAILED)
                        Visited token: <"\n": "
" at line 2 column 14>; Expected token: <"\n">
                      Return: stmblk(LOOKAHEAD SUCCEEDED)
                      Call:   stmblk
                        Consumed token: <"\n": "
" at line 2 column 14>
                      Return: stmblk
                      Call:   stmblk(LOOKING AHEAD...)
                        Call:   statement(LOOKING AHEAD...)
                          Call:   Flow(LOOKING AHEAD...)
                            Visited token: <"integer" at line 3 column 1>; Expected token: <<BREAKSTMT>>
                            Visited token: <"integer" at line 3 column 1>; Expected token: <<CONTINUESTMT>>
                            Visited token: <"integer" at line 3 column 1>; Expected token: <<RETRYSTMT>>
                            Visited token: <"integer" at line 3 column 1>; Expected token: <<EXITSTMT>>
                            Visited token: <"integer" at line 3 column 1>; Expected token: <<FALLTHRUSTMT>>
                          Return: Flow(LOOKAHEAD FAILED)
                          Call:   Loop(LOOKING AHEAD...)
                            Call:   ForStatement(LOOKING AHEAD...)
                              Visited token: <"integer" at line 3 column 1>; Expected token: <"for">
                            Return: ForStatement(LOOKAHEAD FAILED)
                            Call:   WhileStatement(LOOKING AHEAD...)
                              Visited token: <"integer" at line 3 column 1>; Expected token: <"while">
                            Return: WhileStatement(LOOKAHEAD FAILED)
                            Call:   LoopStatement(LOOKING AHEAD...)
                              Visited token: <"integer" at line 3 column 1>; Expected token: <"loop">
                            Return: LoopStatement(LOOKAHEAD FAILED)
                            Visited token: <"integer" at line 3 column 1>; Expected token: <"goto">
                          Return: Loop(LOOKAHEAD FAILED)
                          Call:   Branch(LOOKING AHEAD...)
                            Call:   IfStatement(LOOKING AHEAD...)
                              Call:   IfTest(LOOKING AHEAD...)
                                Visited token: <"integer" at line 3 column 1>; Expected token: <"if">
                              Return: IfTest(LOOKAHEAD FAILED)
                            Return: IfStatement(LOOKAHEAD FAILED)
                            Call:   SwitchStatement(LOOKING AHEAD...)
                              Call:   SwitchTest(LOOKING AHEAD...)
                                Visited token: <"integer" at line 3 column 1>; Expected token: <"switch">
                              Return: SwitchTest(LOOKAHEAD FAILED)
                            Return: SwitchStatement(LOOKAHEAD FAILED)
                            Call:   IfDefStatement(LOOKING AHEAD...)
                              Call:   IfDefTest(LOOKING AHEAD...)
                                Visited token: <"integer" at line 3 column 1>; Expected token: <"ifdef">
                              Return: IfDefTest(LOOKAHEAD FAILED)
                            Return: IfDefStatement(LOOKAHEAD FAILED)
                          Return: Branch(LOOKAHEAD FAILED)
                          Call:   Return(LOOKING AHEAD...)
                            Visited token: <"integer" at line 3 column 1>; Expected token: <"return">
                          Return: Return(LOOKAHEAD FAILED)
                          Visited token: <"integer" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                          Call:   ScopeModifier(LOOKING AHEAD...)
                            Visited token: <"integer" at line 3 column 1>; Expected token: <"global">
                            Visited token: <"integer" at line 3 column 1>; Expected token: <"public">
                            Visited token: <"integer" at line 3 column 1>; Expected token: <"export">
                            Visited token: <"integer" at line 3 column 1>; Expected token: <"override">
                          Return: ScopeModifier(LOOKAHEAD FAILED)
                          Call:   VarDeclare(LOOKING AHEAD...)
                            Call:   DataType(LOOKING AHEAD...)
                              Visited token: <"integer" at line 3 column 1>; Expected token: <"atom">
                              Visited token: <"integer" at line 3 column 1>; Expected token: <"integer">
                            Return: DataType(LOOKAHEAD SUCCEEDED)
                            Call:   IdentList(LOOKING AHEAD...)
                              Call:   Ident(LOOKING AHEAD...)
                                Visited token: <<IDENTIFIER>: "miles" at line 3 column 9>; Expected token: <<IDENTIFIER>>
                                Call:   stmblk
                                  Call:   statement
                                    Visited token: <"integer" at line 3 column 1>; Expected token: <<IDENTIFIER>>
                                    Call:   VarDeclare
                                      Call:   DataType
                                        Consumed token: <"integer" at line 3 column 1>
                                      Return: DataType
                                      Call:   IdentList
                                        Call:   Ident
                                          Consumed token: <<IDENTIFIER>: "miles" at line 3 column 9>
                                        Return: Ident
                                      Return: IdentList
                                    Return: VarDeclare
                                  Return: statement
                                Return: stmblk
                                Consumed token: <<EOF> at line 3 column 13>
                              Return: javacc_input
input... 
