Call:   javacc_input
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"break">
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"continue">
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"retry">
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"exit">
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"fallthru">
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"procedure" at line 1 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"procedure" at line 1 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"procedure" at line 1 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"procedure" at line 1 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"procedure" at line 1 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"procedure" at line 1 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"procedure" at line 1 column 1>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"global">
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"public">
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"export">
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"procedure" at line 1 column 1>; Expected token: <"atom">
          Visited token: <"procedure" at line 1 column 1>; Expected token: <"integer">
          Visited token: <"procedure" at line 1 column 1>; Expected token: <"sequence">
          Visited token: <"procedure" at line 1 column 1>; Expected token: <"object">
          Visited token: <"procedure" at line 1 column 1>; Expected token: <<IDENTIFIER>>
        Return: DataType(LOOKAHEAD FAILED)
      Return: VarDeclare(LOOKAHEAD FAILED)
      Call:   TypeDeclare(LOOKING AHEAD...)
        Visited token: <"procedure" at line 1 column 1>; Expected token: <"type">
      Return: TypeDeclare(LOOKAHEAD FAILED)
    Return: statement(LOOKAHEAD FAILED)
    Visited token: <"procedure" at line 1 column 1>; Expected token: <"\n">
  Return: stmblk(LOOKAHEAD FAILED)
  Call:   ProcDeclare
    Consumed token: <"procedure" at line 1 column 1>
    Consumed token: <<IDENTIFIER>: "DigaOi" at line 1 column 11>
    Consumed token: <"(" at line 1 column 17>
    Call:   ParamList
      Call:   Parameter
        Call:   DataType
          Consumed token: <"sequence" at line 1 column 18>
        Return: DataType
        Consumed token: <<IDENTIFIER>: "nome" at line 1 column 27>
      Return: Parameter
      Consumed token: <"," at line 1 column 31>
      Call:   Parameter
        Call:   DataType
          Consumed token: <"atom" at line 1 column 32>
        Return: DataType
        Consumed token: <<IDENTIFIER>: "idade" at line 1 column 38>
      Return: Parameter
    Return: ParamList
    Consumed token: <")" at line 1 column 43>
    Call:   stmblk
      Consumed token: <"\n": "
" at line 1 column 44>
    Return: stmblk
    Call:   stmblk
      Call:   statement
        Visited token: <<IDENTIFIER>: "printf" at line 2 column 4>; Expected token: <<IDENTIFIER>>
        Call:   Assignment(LOOKING AHEAD...)
          Call:   AssignmentMulti(LOOKING AHEAD...)
            Call:   Variable(LOOKING AHEAD...)
              Visited token: <"(" at line 2 column 10>; Expected token: <"[">
            Return: Variable(LOOKAHEAD FAILED)
            Visited token: <"(" at line 2 column 10>; Expected token: <",">
            Visited token: <"(" at line 2 column 10>; Expected token: <"=">
          Return: AssignmentMulti(LOOKAHEAD FAILED)
          Call:   AssignmentWihOp(LOOKING AHEAD...)
            Visited token: <"(" at line 2 column 10>; Expected token: <"+">
            Visited token: <"(" at line 2 column 10>; Expected token: <"-">
            Visited token: <"(" at line 2 column 10>; Expected token: <"/">
            Visited token: <"(" at line 2 column 10>; Expected token: <"*">
            Visited token: <"(" at line 2 column 10>; Expected token: <"&">
          Return: AssignmentWihOp(LOOKAHEAD FAILED)
        Return: Assignment(LOOKAHEAD FAILED)
        Call:   Call(LOOKING AHEAD...)
          Visited token: <"(" at line 2 column 10>; Expected token: <"(">
          Consumed token: <<IDENTIFIER>: "printf" at line 2 column 4>
          Call:   Call
            Consumed token: <"(" at line 2 column 10>
            Call:   ArgList
              Call:   Expression
                Call:   Expression00
                  Call:   Expression01
                    Call:   Expression02
                      Call:   Expression03
                        Call:   Expression04
                          Call:   Expression05
                            Call:   Expression06
                              Call:   Atom
                                Consumed token: <<INTEGER>: "1" at line 2 column 11>
                              Return: Atom
                            Return: Expression06
                          Return: Expression05
                        Return: Expression04
                      Return: Expression03
                    Return: Expression02
                  Return: Expression01
                Return: Expression00
              Return: Expression
              Consumed token: <"," at line 2 column 12>
              Call:   Expression
                Call:   Expression00
                  Call:   Expression01
                    Call:   Expression02
                      Call:   Expression03
                        Call:   Expression04
                          Call:   Expression05
                            Call:   Expression06
                              Consumed token: <<STRINGLIT>: ""%s tem %d anos."" at line 2 column 14>
                            Return: Expression06
                          Return: Expression05
                        Return: Expression04
                      Return: Expression03
                    Return: Expression02
                  Return: Expression01
                Return: Expression00
              Return: Expression
              Consumed token: <"," at line 2 column 31>
              Call:   Expression
                Call:   Sequence
                  Consumed token: <"{" at line 2 column 33>
                  Visited token: <<IDENTIFIER>: "nome" at line 2 column 34>; Expected token: <"$">
                  Call:   Object
                    Consumed token: <<IDENTIFIER>: "nome" at line 2 column 34>
                  Return: Object
                  Visited token: <"," at line 2 column 38>; Expected token: <",">
                  Call:   Object(LOOKING AHEAD...)
                    Call:   Sequence(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <"{">
                    Return: Sequence(LOOKAHEAD FAILED)
                    Call:   Atom(LOOKING AHEAD...)
                      Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<INTEGER>>
                      Call:   Real(LOOKING AHEAD...)
                        Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<FLOAT>>
                        Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<EXP>>
                      Return: Real(LOOKAHEAD FAILED)
                    Return: Atom(LOOKAHEAD FAILED)
                    Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<BIN_NUMBER>>
                    Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<OCT_NUMBER>>
                    Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<DEC_NUMBER>>
                    Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<HEX_NUMBER>>
                    Visited token: <<IDENTIFIER>: "idade" at line 2 column 40>; Expected token: <<IDENTIFIER>>
                    Consumed token: <"," at line 2 column 38>
                    Call:   Object
                      Consumed token: <<IDENTIFIER>: "idade" at line 2 column 40>
                    Return: Object
                    Visited token: <"}" at line 2 column 45>; Expected token: <",">
                    Consumed token: <"}" at line 2 column 45>
                  Return: Sequence
                Return: Expression
              Return: ArgList
              Consumed token: <")" at line 2 column 46>
            Return: Call
          Return: statement
        Return: stmblk
        Call:   stmblk
          Consumed token: <"\n": "
" at line 2 column 47>
        Return: stmblk
        Consumed token: <"end" at line 3 column 1>
        Consumed token: <"procedure" at line 3 column 5>
      Return: ProcDeclare
      Call:   stmblk(LOOKING AHEAD...)
        Call:   statement(LOOKING AHEAD...)
          Call:   Flow(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"break">
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"continue">
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"retry">
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"exit">
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"fallthru">
          Return: Flow(LOOKAHEAD FAILED)
          Call:   Loop(LOOKING AHEAD...)
            Call:   ForStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"for">
            Return: ForStatement(LOOKAHEAD FAILED)
            Call:   WhileStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"while">
            Return: WhileStatement(LOOKAHEAD FAILED)
            Call:   LoopStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"loop">
            Return: LoopStatement(LOOKAHEAD FAILED)
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"goto">
          Return: Loop(LOOKAHEAD FAILED)
          Call:   Branch(LOOKING AHEAD...)
            Call:   IfStatement(LOOKING AHEAD...)
              Call:   IfTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"if">
              Return: IfTest(LOOKAHEAD FAILED)
            Return: IfStatement(LOOKAHEAD FAILED)
            Call:   SwitchStatement(LOOKING AHEAD...)
              Call:   SwitchTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"switch">
              Return: SwitchTest(LOOKAHEAD FAILED)
            Return: SwitchStatement(LOOKAHEAD FAILED)
            Call:   IfDefStatement(LOOKING AHEAD...)
              Call:   IfDefTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"ifdef">
              Return: IfDefTest(LOOKAHEAD FAILED)
            Return: IfDefStatement(LOOKAHEAD FAILED)
          Return: Branch(LOOKAHEAD FAILED)
          Call:   Return(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"return">
          Return: Return(LOOKAHEAD FAILED)
          Visited token: <"\n": "
" at line 3 column 14>; Expected token: <<IDENTIFIER>>
          Call:   ScopeModifier(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"global">
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"public">
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"export">
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"override">
          Return: ScopeModifier(LOOKAHEAD FAILED)
          Call:   VarDeclare(LOOKING AHEAD...)
            Call:   DataType(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"atom">
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"integer">
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"sequence">
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"object">
              Visited token: <"\n": "
" at line 3 column 14>; Expected token: <<IDENTIFIER>>
            Return: DataType(LOOKAHEAD FAILED)
          Return: VarDeclare(LOOKAHEAD FAILED)
          Call:   TypeDeclare(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"type">
          Return: TypeDeclare(LOOKAHEAD FAILED)
        Return: statement(LOOKAHEAD FAILED)
        Visited token: <"\n": "
" at line 3 column 14>; Expected token: <"\n">
      Return: stmblk(LOOKAHEAD SUCCEEDED)
      Call:   stmblk
        Consumed token: <"\n": "
" at line 3 column 14>
      Return: stmblk
      Call:   stmblk(LOOKING AHEAD...)
        Call:   statement(LOOKING AHEAD...)
          Call:   Flow(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"break">
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"continue">
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"retry">
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"exit">
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"fallthru">
          Return: Flow(LOOKAHEAD FAILED)
          Call:   Loop(LOOKING AHEAD...)
            Call:   ForStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"for">
            Return: ForStatement(LOOKAHEAD FAILED)
            Call:   WhileStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"while">
            Return: WhileStatement(LOOKAHEAD FAILED)
            Call:   LoopStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"loop">
            Return: LoopStatement(LOOKAHEAD FAILED)
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"goto">
          Return: Loop(LOOKAHEAD FAILED)
          Call:   Branch(LOOKING AHEAD...)
            Call:   IfStatement(LOOKING AHEAD...)
              Call:   IfTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"if">
              Return: IfTest(LOOKAHEAD FAILED)
            Return: IfStatement(LOOKAHEAD FAILED)
            Call:   SwitchStatement(LOOKING AHEAD...)
              Call:   SwitchTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"switch">
              Return: SwitchTest(LOOKAHEAD FAILED)
            Return: SwitchStatement(LOOKAHEAD FAILED)
            Call:   IfDefStatement(LOOKING AHEAD...)
              Call:   IfDefTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"ifdef">
              Return: IfDefTest(LOOKAHEAD FAILED)
            Return: IfDefStatement(LOOKAHEAD FAILED)
          Return: Branch(LOOKAHEAD FAILED)
          Call:   Return(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"return">
          Return: Return(LOOKAHEAD FAILED)
          Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<IDENTIFIER>>
          Call:   ScopeModifier(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"global">
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"public">
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"export">
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"override">
          Return: ScopeModifier(LOOKAHEAD FAILED)
          Call:   VarDeclare(LOOKING AHEAD...)
            Call:   DataType(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"atom">
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"integer">
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"sequence">
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"object">
              Visited token: <"\n": "
" at line 4 column 1>; Expected token: <<IDENTIFIER>>
            Return: DataType(LOOKAHEAD FAILED)
          Return: VarDeclare(LOOKAHEAD FAILED)
          Call:   TypeDeclare(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"type">
          Return: TypeDeclare(LOOKAHEAD FAILED)
        Return: statement(LOOKAHEAD FAILED)
        Visited token: <"\n": "
" at line 4 column 1>; Expected token: <"\n">
      Return: stmblk(LOOKAHEAD SUCCEEDED)
      Call:   stmblk
        Consumed token: <"\n": "
" at line 4 column 1>
      Return: stmblk
      Call:   stmblk(LOOKING AHEAD...)
        Call:   statement(LOOKING AHEAD...)
          Call:   Flow(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"break">
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"continue">
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"retry">
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"exit">
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"fallthru">
          Return: Flow(LOOKAHEAD FAILED)
          Call:   Loop(LOOKING AHEAD...)
            Call:   ForStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"for">
            Return: ForStatement(LOOKAHEAD FAILED)
            Call:   WhileStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"while">
            Return: WhileStatement(LOOKAHEAD FAILED)
            Call:   LoopStatement(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"loop">
            Return: LoopStatement(LOOKAHEAD FAILED)
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"goto">
          Return: Loop(LOOKAHEAD FAILED)
          Call:   Branch(LOOKING AHEAD...)
            Call:   IfStatement(LOOKING AHEAD...)
              Call:   IfTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"if">
              Return: IfTest(LOOKAHEAD FAILED)
            Return: IfStatement(LOOKAHEAD FAILED)
            Call:   SwitchStatement(LOOKING AHEAD...)
              Call:   SwitchTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"switch">
              Return: SwitchTest(LOOKAHEAD FAILED)
            Return: SwitchStatement(LOOKAHEAD FAILED)
            Call:   IfDefStatement(LOOKING AHEAD...)
              Call:   IfDefTest(LOOKING AHEAD...)
                Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"ifdef">
              Return: IfDefTest(LOOKAHEAD FAILED)
            Return: IfDefStatement(LOOKAHEAD FAILED)
          Return: Branch(LOOKAHEAD FAILED)
          Call:   Return(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"return">
          Return: Return(LOOKAHEAD FAILED)
          Visited token: <"\n": "
" at line 5 column 39>; Expected token: <<IDENTIFIER>>
          Call:   ScopeModifier(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"global">
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"public">
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"export">
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"override">
          Return: ScopeModifier(LOOKAHEAD FAILED)
          Call:   VarDeclare(LOOKING AHEAD...)
            Call:   DataType(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"atom">
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"integer">
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"sequence">
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"object">
              Visited token: <"\n": "
" at line 5 column 39>; Expected token: <<IDENTIFIER>>
            Return: DataType(LOOKAHEAD FAILED)
          Return: VarDeclare(LOOKAHEAD FAILED)
          Call:   TypeDeclare(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"type">
          Return: TypeDeclare(LOOKAHEAD FAILED)
        Return: statement(LOOKAHEAD FAILED)
        Visited token: <"\n": "
" at line 5 column 39>; Expected token: <"\n">
      Return: stmblk(LOOKAHEAD SUCCEEDED)
      Call:   stmblk
        Consumed token: <"\n": "
" at line 5 column 39>
      Return: stmblk
      Call:   stmblk(LOOKING AHEAD...)
        Call:   statement(LOOKING AHEAD...)
          Call:   Flow(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"break">
            Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"continue">
            Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"retry">
            Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"exit">
            Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"fallthru">
          Return: Flow(LOOKAHEAD FAILED)
          Call:   Loop(LOOKING AHEAD...)
            Call:   ForStatement(LOOKING AHEAD...)
              Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"for">
            Return: ForStatement(LOOKAHEAD FAILED)
            Call:   WhileStatement(LOOKING AHEAD...)
              Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"while">
            Return: WhileStatement(LOOKAHEAD FAILED)
            Call:   LoopStatement(LOOKING AHEAD...)
              Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"loop">
            Return: LoopStatement(LOOKAHEAD FAILED)
            Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"goto">
          Return: Loop(LOOKAHEAD FAILED)
          Call:   Branch(LOOKING AHEAD...)
            Call:   IfStatement(LOOKING AHEAD...)
              Call:   IfTest(LOOKING AHEAD...)
                Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"if">
              Return: IfTest(LOOKAHEAD FAILED)
            Return: IfStatement(LOOKAHEAD FAILED)
            Call:   SwitchStatement(LOOKING AHEAD...)
              Call:   SwitchTest(LOOKING AHEAD...)
                Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"switch">
              Return: SwitchTest(LOOKAHEAD FAILED)
            Return: SwitchStatement(LOOKAHEAD FAILED)
            Call:   IfDefStatement(LOOKING AHEAD...)
              Call:   IfDefTest(LOOKING AHEAD...)
                Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"ifdef">
              Return: IfDefTest(LOOKAHEAD FAILED)
            Return: IfDefStatement(LOOKAHEAD FAILED)
          Return: Branch(LOOKAHEAD FAILED)
          Call:   Return(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <"return">
          Return: Return(LOOKAHEAD FAILED)
          Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <<IDENTIFIER>>
          Call:   Assignment(LOOKING AHEAD...)
            Call:   AssignmentMulti(LOOKING AHEAD...)
              Call:   Variable(LOOKING AHEAD...)
                Visited token: <"(" at line 6 column 7>; Expected token: <"[">
              Return: Variable(LOOKAHEAD FAILED)
              Visited token: <"(" at line 6 column 7>; Expected token: <",">
              Visited token: <"(" at line 6 column 7>; Expected token: <"=">
            Return: AssignmentMulti(LOOKAHEAD FAILED)
            Call:   AssignmentWihOp(LOOKING AHEAD...)
              Visited token: <"(" at line 6 column 7>; Expected token: <"+">
              Visited token: <"(" at line 6 column 7>; Expected token: <"-">
              Visited token: <"(" at line 6 column 7>; Expected token: <"/">
              Visited token: <"(" at line 6 column 7>; Expected token: <"*">
              Visited token: <"(" at line 6 column 7>; Expected token: <"&">
            Return: AssignmentWihOp(LOOKAHEAD FAILED)
          Return: Assignment(LOOKAHEAD FAILED)
          Call:   Call(LOOKING AHEAD...)
            Visited token: <"(" at line 6 column 7>; Expected token: <"(">
            Call:   stmblk
              Call:   statement
                Visited token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>; Expected token: <<IDENTIFIER>>
                Call:   Assignment(LOOKING AHEAD...)
                  Call:   AssignmentMulti(LOOKING AHEAD...)
                    Call:   Variable(LOOKING AHEAD...)
                      Visited token: <"(" at line 6 column 7>; Expected token: <"[">
                    Return: Variable(LOOKAHEAD FAILED)
                    Visited token: <"(" at line 6 column 7>; Expected token: <",">
                    Visited token: <"(" at line 6 column 7>; Expected token: <"=">
                  Return: AssignmentMulti(LOOKAHEAD FAILED)
                  Call:   AssignmentWihOp(LOOKING AHEAD...)
                    Visited token: <"(" at line 6 column 7>; Expected token: <"+">
                    Visited token: <"(" at line 6 column 7>; Expected token: <"-">
                    Visited token: <"(" at line 6 column 7>; Expected token: <"/">
                    Visited token: <"(" at line 6 column 7>; Expected token: <"*">
                    Visited token: <"(" at line 6 column 7>; Expected token: <"&">
                  Return: AssignmentWihOp(LOOKAHEAD FAILED)
                Return: Assignment(LOOKAHEAD FAILED)
                Call:   Call(LOOKING AHEAD...)
                  Visited token: <"(" at line 6 column 7>; Expected token: <"(">
                  Consumed token: <<IDENTIFIER>: "DigaOi" at line 6 column 1>
                  Call:   Call
                    Consumed token: <"(" at line 6 column 7>
                    Call:   ArgList
                      Call:   Expression
                        Call:   Expression00
                          Call:   Expression01
                            Call:   Expression02
                              Call:   Expression03
                                Call:   Expression04
                                  Call:   Expression05
                                    Call:   Expression06
                                      Consumed token: <<STRINGLIT>: ""zara"" at line 6 column 8>
                                    Return: Expression06
                                  Return: Expression05
                                Return: Expression04
                              Return: Expression03
                            Return: Expression02
                          Return: Expression01
                        Return: Expression00
                      Return: Expression
                      Consumed token: <"," at line 6 column 14>
                      Call:   Expression
                        Call:   Expression00
                          Call:   Expression01
                            Call:   Expression02
                              Call:   Expression03
                                Call:   Expression04
                                  Call:   Expression05
                                    Call:   Expression06
                                      Call:   Atom
                                        Consumed token: <<INTEGER>: "8" at line 6 column 16>
                                      Return: Atom
                                    Return: Expression06
                                  Return: Expression05
                                Return: Expression04
                              Return: Expression03
                            Return: Expression02
                          Return: Expression01
                        Return: Expression00
                      Return: Expression
                    Return: ArgList
                    Consumed token: <")" at line 6 column 17>
                  Return: Call
                Return: statement
              Return: stmblk
              Consumed token: <<EOF> at line 6 column 17>
            Return: javacc_input
input... 
