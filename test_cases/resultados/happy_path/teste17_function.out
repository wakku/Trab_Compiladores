Call:   javacc_input
  Call:   stmblk(LOOKING AHEAD...)
    Call:   statement(LOOKING AHEAD...)
      Call:   Flow(LOOKING AHEAD...)
        Visited token: <"function" at line 1 column 1>; Expected token: <"break">
        Visited token: <"function" at line 1 column 1>; Expected token: <"continue">
        Visited token: <"function" at line 1 column 1>; Expected token: <"retry">
        Visited token: <"function" at line 1 column 1>; Expected token: <"exit">
        Visited token: <"function" at line 1 column 1>; Expected token: <"fallthru">
      Return: Flow(LOOKAHEAD FAILED)
      Call:   Loop(LOOKING AHEAD...)
        Call:   ForStatement(LOOKING AHEAD...)
          Visited token: <"function" at line 1 column 1>; Expected token: <"for">
        Return: ForStatement(LOOKAHEAD FAILED)
        Call:   WhileStatement(LOOKING AHEAD...)
          Visited token: <"function" at line 1 column 1>; Expected token: <"while">
        Return: WhileStatement(LOOKAHEAD FAILED)
        Call:   LoopStatement(LOOKING AHEAD...)
          Visited token: <"function" at line 1 column 1>; Expected token: <"loop">
        Return: LoopStatement(LOOKAHEAD FAILED)
        Visited token: <"function" at line 1 column 1>; Expected token: <"goto">
      Return: Loop(LOOKAHEAD FAILED)
      Call:   Branch(LOOKING AHEAD...)
        Call:   IfStatement(LOOKING AHEAD...)
          Call:   IfTest(LOOKING AHEAD...)
            Visited token: <"function" at line 1 column 1>; Expected token: <"if">
          Return: IfTest(LOOKAHEAD FAILED)
        Return: IfStatement(LOOKAHEAD FAILED)
        Call:   SwitchStatement(LOOKING AHEAD...)
          Call:   SwitchTest(LOOKING AHEAD...)
            Visited token: <"function" at line 1 column 1>; Expected token: <"switch">
          Return: SwitchTest(LOOKAHEAD FAILED)
        Return: SwitchStatement(LOOKAHEAD FAILED)
        Call:   IfDefStatement(LOOKING AHEAD...)
          Call:   IfDefTest(LOOKING AHEAD...)
            Visited token: <"function" at line 1 column 1>; Expected token: <"ifdef">
          Return: IfDefTest(LOOKAHEAD FAILED)
        Return: IfDefStatement(LOOKAHEAD FAILED)
      Return: Branch(LOOKAHEAD FAILED)
      Call:   Return(LOOKING AHEAD...)
        Visited token: <"function" at line 1 column 1>; Expected token: <"return">
      Return: Return(LOOKAHEAD FAILED)
      Visited token: <"function" at line 1 column 1>; Expected token: <<IDENTIFIER>>
      Call:   ScopeModifier(LOOKING AHEAD...)
        Visited token: <"function" at line 1 column 1>; Expected token: <"global">
        Visited token: <"function" at line 1 column 1>; Expected token: <"public">
        Visited token: <"function" at line 1 column 1>; Expected token: <"export">
        Visited token: <"function" at line 1 column 1>; Expected token: <"override">
      Return: ScopeModifier(LOOKAHEAD FAILED)
      Call:   VarDeclare(LOOKING AHEAD...)
        Call:   DataType(LOOKING AHEAD...)
          Visited token: <"function" at line 1 column 1>; Expected token: <"atom">
          Visited token: <"function" at line 1 column 1>; Expected token: <"integer">
          Visited token: <"function" at line 1 column 1>; Expected token: <"sequence">
          Visited token: <"function" at line 1 column 1>; Expected token: <"object">
          Visited token: <"function" at line 1 column 1>; Expected token: <<IDENTIFIER>>
        Return: DataType(LOOKAHEAD FAILED)
      Return: VarDeclare(LOOKAHEAD FAILED)
      Call:   TypeDeclare(LOOKING AHEAD...)
        Visited token: <"function" at line 1 column 1>; Expected token: <"type">
      Return: TypeDeclare(LOOKAHEAD FAILED)
    Return: statement(LOOKAHEAD FAILED)
    Visited token: <"function" at line 1 column 1>; Expected token: <"\n">
  Return: stmblk(LOOKAHEAD FAILED)
  Call:   FuncDeclare
    Consumed token: <"function" at line 1 column 1>
    Consumed token: <<IDENTIFIER>: "DigaOi" at line 1 column 10>
    Consumed token: <"(" at line 1 column 16>
    Consumed token: <")" at line 1 column 17>
    Call:   stmblk
      Consumed token: <"\n": "
" at line 1 column 18>
    Return: stmblk
    Call:   stmblk
      Call:   statement
        Visited token: <<IDENTIFIER>: "puts" at line 2 column 4>; Expected token: <<IDENTIFIER>>
        Call:   Assignment(LOOKING AHEAD...)
          Call:   AssignmentMulti(LOOKING AHEAD...)
            Call:   Variable(LOOKING AHEAD...)
              Visited token: <"(" at line 2 column 8>; Expected token: <"[">
            Return: Variable(LOOKAHEAD FAILED)
            Visited token: <"(" at line 2 column 8>; Expected token: <",">
            Visited token: <"(" at line 2 column 8>; Expected token: <"=">
          Return: AssignmentMulti(LOOKAHEAD FAILED)
          Call:   AssignmentWihOp(LOOKING AHEAD...)
            Visited token: <"(" at line 2 column 8>; Expected token: <"+">
            Visited token: <"(" at line 2 column 8>; Expected token: <"-">
            Visited token: <"(" at line 2 column 8>; Expected token: <"/">
            Visited token: <"(" at line 2 column 8>; Expected token: <"*">
            Visited token: <"(" at line 2 column 8>; Expected token: <"&">
          Return: AssignmentWihOp(LOOKAHEAD FAILED)
        Return: Assignment(LOOKAHEAD FAILED)
        Call:   Call(LOOKING AHEAD...)
          Visited token: <"(" at line 2 column 8>; Expected token: <"(">
          Consumed token: <<IDENTIFIER>: "puts" at line 2 column 4>
          Call:   Call
            Consumed token: <"(" at line 2 column 8>
            Call:   ArgList
              Call:   Expression
                Call:   Expression00
                  Call:   Expression01
                    Call:   Expression02
                      Call:   Expression03
                        Call:   Expression04
                          Call:   Expression05
                            Call:   Expression06
                              Call:   Atom
                                Consumed token: <<INTEGER>: "1" at line 2 column 9>
                              Return: Atom
                            Return: Expression06
                          Return: Expression05
                        Return: Expression04
                      Return: Expression03
                    Return: Expression02
                  Return: Expression01
                Return: Expression00
              Return: Expression
              Consumed token: <"," at line 2 column 10>
              Call:   Expression
                Call:   Expression00
                  Call:   Expression01
                    Call:   Expression02
                      Call:   Expression03
                        Call:   Expression04
                          Call:   Expression05
                            Call:   Expression06
                              Consumed token: <<STRINGLIT>: ""Oi Professora"" at line 2 column 12>
                            Return: Expression06
                          Return: Expression05
                        Return: Expression04
                      Return: Expression03
                    Return: Expression02
                  Return: Expression01
                Return: Expression00
              Return: Expression
            Return: ArgList
            Consumed token: <")" at line 2 column 27>
          Return: Call
        Return: statement
      Return: stmblk
      Call:   stmblk
        Consumed token: <"\n": "
" at line 2 column 28>
      Return: stmblk
      Call:   stmblk
        Call:   statement
          Call:   Return
            Consumed token: <"return" at line 3 column 4>
            Call:   Expression
              Call:   Expression00
                Call:   Expression01
                  Call:   Expression02
                    Call:   Expression03
                      Call:   Expression04
                        Call:   Expression05
                          Call:   Expression06
                            Call:   Atom
                              Consumed token: <<INTEGER>: "1" at line 3 column 11>
                            Return: Atom
                          Return: Expression06
                        Return: Expression05
                      Return: Expression04
                    Return: Expression03
                  Return: Expression02
                Return: Expression01
              Return: Expression00
            Return: Expression
          Return: Return
        Return: statement
      Return: stmblk
      Call:   stmblk
        Consumed token: <"\n": "
" at line 3 column 12>
      Return: stmblk
      Consumed token: <"end" at line 4 column 1>
      Consumed token: <"function" at line 4 column 5>
    Return: FuncDeclare
    Call:   stmblk(LOOKING AHEAD...)
      Call:   statement(LOOKING AHEAD...)
        Call:   Flow(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"break">
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"continue">
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"retry">
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"exit">
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"fallthru">
        Return: Flow(LOOKAHEAD FAILED)
        Call:   Loop(LOOKING AHEAD...)
          Call:   ForStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"for">
          Return: ForStatement(LOOKAHEAD FAILED)
          Call:   WhileStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"while">
          Return: WhileStatement(LOOKAHEAD FAILED)
          Call:   LoopStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"loop">
          Return: LoopStatement(LOOKAHEAD FAILED)
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"goto">
        Return: Loop(LOOKAHEAD FAILED)
        Call:   Branch(LOOKING AHEAD...)
          Call:   IfStatement(LOOKING AHEAD...)
            Call:   IfTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"if">
            Return: IfTest(LOOKAHEAD FAILED)
          Return: IfStatement(LOOKAHEAD FAILED)
          Call:   SwitchStatement(LOOKING AHEAD...)
            Call:   SwitchTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"switch">
            Return: SwitchTest(LOOKAHEAD FAILED)
          Return: SwitchStatement(LOOKAHEAD FAILED)
          Call:   IfDefStatement(LOOKING AHEAD...)
            Call:   IfDefTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"ifdef">
            Return: IfDefTest(LOOKAHEAD FAILED)
          Return: IfDefStatement(LOOKAHEAD FAILED)
        Return: Branch(LOOKAHEAD FAILED)
        Call:   Return(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"return">
        Return: Return(LOOKAHEAD FAILED)
        Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<IDENTIFIER>>
        Call:   ScopeModifier(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"global">
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"public">
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"export">
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"override">
        Return: ScopeModifier(LOOKAHEAD FAILED)
        Call:   VarDeclare(LOOKING AHEAD...)
          Call:   DataType(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"atom">
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"integer">
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"sequence">
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"object">
            Visited token: <"\n": "
" at line 4 column 13>; Expected token: <<IDENTIFIER>>
          Return: DataType(LOOKAHEAD FAILED)
        Return: VarDeclare(LOOKAHEAD FAILED)
        Call:   TypeDeclare(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"type">
        Return: TypeDeclare(LOOKAHEAD FAILED)
      Return: statement(LOOKAHEAD FAILED)
      Visited token: <"\n": "
" at line 4 column 13>; Expected token: <"\n">
    Return: stmblk(LOOKAHEAD SUCCEEDED)
    Call:   stmblk
      Consumed token: <"\n": "
" at line 4 column 13>
    Return: stmblk
    Call:   stmblk(LOOKING AHEAD...)
      Call:   statement(LOOKING AHEAD...)
        Call:   Flow(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"break">
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"continue">
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"retry">
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"exit">
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"fallthru">
        Return: Flow(LOOKAHEAD FAILED)
        Call:   Loop(LOOKING AHEAD...)
          Call:   ForStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"for">
          Return: ForStatement(LOOKAHEAD FAILED)
          Call:   WhileStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"while">
          Return: WhileStatement(LOOKAHEAD FAILED)
          Call:   LoopStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"loop">
          Return: LoopStatement(LOOKAHEAD FAILED)
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"goto">
        Return: Loop(LOOKAHEAD FAILED)
        Call:   Branch(LOOKING AHEAD...)
          Call:   IfStatement(LOOKING AHEAD...)
            Call:   IfTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"if">
            Return: IfTest(LOOKAHEAD FAILED)
          Return: IfStatement(LOOKAHEAD FAILED)
          Call:   SwitchStatement(LOOKING AHEAD...)
            Call:   SwitchTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"switch">
            Return: SwitchTest(LOOKAHEAD FAILED)
          Return: SwitchStatement(LOOKAHEAD FAILED)
          Call:   IfDefStatement(LOOKING AHEAD...)
            Call:   IfDefTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"ifdef">
            Return: IfDefTest(LOOKAHEAD FAILED)
          Return: IfDefStatement(LOOKAHEAD FAILED)
        Return: Branch(LOOKAHEAD FAILED)
        Call:   Return(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"return">
        Return: Return(LOOKAHEAD FAILED)
        Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<IDENTIFIER>>
        Call:   ScopeModifier(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"global">
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"public">
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"export">
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"override">
        Return: ScopeModifier(LOOKAHEAD FAILED)
        Call:   VarDeclare(LOOKING AHEAD...)
          Call:   DataType(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"atom">
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"integer">
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"sequence">
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"object">
            Visited token: <"\n": "
" at line 5 column 1>; Expected token: <<IDENTIFIER>>
          Return: DataType(LOOKAHEAD FAILED)
        Return: VarDeclare(LOOKAHEAD FAILED)
        Call:   TypeDeclare(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"type">
        Return: TypeDeclare(LOOKAHEAD FAILED)
      Return: statement(LOOKAHEAD FAILED)
      Visited token: <"\n": "
" at line 5 column 1>; Expected token: <"\n">
    Return: stmblk(LOOKAHEAD SUCCEEDED)
    Call:   stmblk
      Consumed token: <"\n": "
" at line 5 column 1>
    Return: stmblk
    Call:   stmblk(LOOKING AHEAD...)
      Call:   statement(LOOKING AHEAD...)
        Call:   Flow(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"break">
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"continue">
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"retry">
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"exit">
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"fallthru">
        Return: Flow(LOOKAHEAD FAILED)
        Call:   Loop(LOOKING AHEAD...)
          Call:   ForStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"for">
          Return: ForStatement(LOOKAHEAD FAILED)
          Call:   WhileStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"while">
          Return: WhileStatement(LOOKAHEAD FAILED)
          Call:   LoopStatement(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"loop">
          Return: LoopStatement(LOOKAHEAD FAILED)
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"goto">
        Return: Loop(LOOKAHEAD FAILED)
        Call:   Branch(LOOKING AHEAD...)
          Call:   IfStatement(LOOKING AHEAD...)
            Call:   IfTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"if">
            Return: IfTest(LOOKAHEAD FAILED)
          Return: IfStatement(LOOKAHEAD FAILED)
          Call:   SwitchStatement(LOOKING AHEAD...)
            Call:   SwitchTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"switch">
            Return: SwitchTest(LOOKAHEAD FAILED)
          Return: SwitchStatement(LOOKAHEAD FAILED)
          Call:   IfDefStatement(LOOKING AHEAD...)
            Call:   IfDefTest(LOOKING AHEAD...)
              Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"ifdef">
            Return: IfDefTest(LOOKAHEAD FAILED)
          Return: IfDefStatement(LOOKAHEAD FAILED)
        Return: Branch(LOOKAHEAD FAILED)
        Call:   Return(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"return">
        Return: Return(LOOKAHEAD FAILED)
        Visited token: <"\n": "
" at line 6 column 24>; Expected token: <<IDENTIFIER>>
        Call:   ScopeModifier(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"global">
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"public">
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"export">
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"override">
        Return: ScopeModifier(LOOKAHEAD FAILED)
        Call:   VarDeclare(LOOKING AHEAD...)
          Call:   DataType(LOOKING AHEAD...)
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"atom">
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"integer">
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"sequence">
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"object">
            Visited token: <"\n": "
" at line 6 column 24>; Expected token: <<IDENTIFIER>>
          Return: DataType(LOOKAHEAD FAILED)
        Return: VarDeclare(LOOKAHEAD FAILED)
        Call:   TypeDeclare(LOOKING AHEAD...)
          Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"type">
        Return: TypeDeclare(LOOKAHEAD FAILED)
      Return: statement(LOOKAHEAD FAILED)
      Visited token: <"\n": "
" at line 6 column 24>; Expected token: <"\n">
    Return: stmblk(LOOKAHEAD SUCCEEDED)
    Call:   stmblk
      Consumed token: <"\n": "
" at line 6 column 24>
    Return: stmblk
    Call:   stmblk(LOOKING AHEAD...)
      Call:   statement(LOOKING AHEAD...)
        Call:   Flow(LOOKING AHEAD...)
          Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"break">
          Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"continue">
          Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"retry">
          Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"exit">
          Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"fallthru">
        Return: Flow(LOOKAHEAD FAILED)
        Call:   Loop(LOOKING AHEAD...)
          Call:   ForStatement(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"for">
          Return: ForStatement(LOOKAHEAD FAILED)
          Call:   WhileStatement(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"while">
          Return: WhileStatement(LOOKAHEAD FAILED)
          Call:   LoopStatement(LOOKING AHEAD...)
            Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"loop">
          Return: LoopStatement(LOOKAHEAD FAILED)
          Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"goto">
        Return: Loop(LOOKAHEAD FAILED)
        Call:   Branch(LOOKING AHEAD...)
          Call:   IfStatement(LOOKING AHEAD...)
            Call:   IfTest(LOOKING AHEAD...)
              Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"if">
            Return: IfTest(LOOKAHEAD FAILED)
          Return: IfStatement(LOOKAHEAD FAILED)
          Call:   SwitchStatement(LOOKING AHEAD...)
            Call:   SwitchTest(LOOKING AHEAD...)
              Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"switch">
            Return: SwitchTest(LOOKAHEAD FAILED)
          Return: SwitchStatement(LOOKAHEAD FAILED)
          Call:   IfDefStatement(LOOKING AHEAD...)
            Call:   IfDefTest(LOOKING AHEAD...)
              Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"ifdef">
            Return: IfDefTest(LOOKAHEAD FAILED)
          Return: IfDefStatement(LOOKAHEAD FAILED)
        Return: Branch(LOOKAHEAD FAILED)
        Call:   Return(LOOKING AHEAD...)
          Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <"return">
        Return: Return(LOOKAHEAD FAILED)
        Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <<IDENTIFIER>>
        Call:   Assignment(LOOKING AHEAD...)
          Call:   AssignmentMulti(LOOKING AHEAD...)
            Call:   Variable(LOOKING AHEAD...)
              Visited token: <"(" at line 7 column 7>; Expected token: <"[">
            Return: Variable(LOOKAHEAD FAILED)
            Visited token: <"(" at line 7 column 7>; Expected token: <",">
            Visited token: <"(" at line 7 column 7>; Expected token: <"=">
          Return: AssignmentMulti(LOOKAHEAD FAILED)
          Call:   AssignmentWihOp(LOOKING AHEAD...)
            Visited token: <"(" at line 7 column 7>; Expected token: <"+">
            Visited token: <"(" at line 7 column 7>; Expected token: <"-">
            Visited token: <"(" at line 7 column 7>; Expected token: <"/">
            Visited token: <"(" at line 7 column 7>; Expected token: <"*">
            Visited token: <"(" at line 7 column 7>; Expected token: <"&">
          Return: AssignmentWihOp(LOOKAHEAD FAILED)
        Return: Assignment(LOOKAHEAD FAILED)
        Call:   Call(LOOKING AHEAD...)
          Visited token: <"(" at line 7 column 7>; Expected token: <"(">
          Call:   stmblk
            Call:   statement
              Visited token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>; Expected token: <<IDENTIFIER>>
              Call:   Assignment(LOOKING AHEAD...)
                Call:   AssignmentMulti(LOOKING AHEAD...)
                  Call:   Variable(LOOKING AHEAD...)
                    Visited token: <"(" at line 7 column 7>; Expected token: <"[">
                  Return: Variable(LOOKAHEAD FAILED)
                  Visited token: <"(" at line 7 column 7>; Expected token: <",">
                  Visited token: <"(" at line 7 column 7>; Expected token: <"=">
                Return: AssignmentMulti(LOOKAHEAD FAILED)
                Call:   AssignmentWihOp(LOOKING AHEAD...)
                  Visited token: <"(" at line 7 column 7>; Expected token: <"+">
                  Visited token: <"(" at line 7 column 7>; Expected token: <"-">
                  Visited token: <"(" at line 7 column 7>; Expected token: <"/">
                  Visited token: <"(" at line 7 column 7>; Expected token: <"*">
                  Visited token: <"(" at line 7 column 7>; Expected token: <"&">
                Return: AssignmentWihOp(LOOKAHEAD FAILED)
              Return: Assignment(LOOKAHEAD FAILED)
              Call:   Call(LOOKING AHEAD...)
                Visited token: <"(" at line 7 column 7>; Expected token: <"(">
                Consumed token: <<IDENTIFIER>: "DigaOi" at line 7 column 1>
                Call:   Call
                  Consumed token: <"(" at line 7 column 7>
                  Consumed token: <")" at line 7 column 8>
                Return: Call
              Return: statement
            Return: stmblk
            Consumed token: <<EOF> at line 7 column 8>
          Return: javacc_input
input... 
